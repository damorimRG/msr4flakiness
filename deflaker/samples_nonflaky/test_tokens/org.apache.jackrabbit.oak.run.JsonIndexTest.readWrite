
}]
/oak:index/counter
getStore
'entryCount': 1, 
{'xpath':'explain /jcr:root//element(*, nt:unstructured)[@x=1]'}
/oak:index
{'$y':0}
[nt:unstructured] as [a] /* traverse '*' 
{'loop':[
logout
{'$break': true, 'if': '$x', '=': 100}]}
50
'jcr:primaryType':'oak:QueryIndexDefinition', 
explain select [jcr:path], [jcr:score], * from [nt:unstructured] as a 
[nt:unstructured] as [a] /* property test = 1 
}}
{'$x':1}
/foo
where ([a].[x] = 1) and (isdescendantnode([a], [/])) */
{'addNode':'/oak:index/test', 'node':{ 
property=[x=[1]]) where ([a].[x] = 1) and (isdescendantnode([a], [/])) */
/jcr:root//element(*, nt:unstructured)[@x=1] */, path=//*, 
index
[nt:unstructured] as [a] /* nodeType Filter(query=
assertCommand
{'xpath':'/jcr:root//element(*, nt:unstructured)[@x<50]', 'quiet':true}
{'addNode':'/foo', 'node':{'jcr:primaryType': 'nt:unstructured', 'x': 1, 'y':{}}}
fixture
{'addNode':'/foo/test', 'node':{'jcr:primaryType': 'oak:Unstructured', 'child':{}}}
{'session':'save'}, 
/rep:security
/jcr:system
{'$p': '/foo/test/child/n', '+': '$x'}, 
  'jcr:primaryType': 'nt:unstructured', '{Long}x': '1', 'y': {}, 'test': {}

memoryFixture
{'xpath':'/jcr:root//element(*, nt:unstructured)[@x=2]'}
order by @jcr:path'}
{'xpath':'/jcr:root/* order by @jcr:path'}
{'xpath':'/jcr:root/foo', 'depth':2}
admin
{'addNode': '$p', 'node': {'x': '$x', 'jcr:primaryType': 'nt:unstructured'}}, 
{'session':'save'}
{'$x': '$x', '+':1}, 
{'session': 'save'}
combineLines
where [a].[x] = 1 */
'{Name}propertyNames':['x'] 
{'sql':'explain select * from [nt:unstructured] as [a] where [x]=1'}
readWrite
'type':'property', 
where [x] = 1 and isdescendantnode(a, '/') /* xpath: 
'{Name}declaringNodeTypes': ['nt:unstructured'], 
'reindex':true, 
{'for':'$result', 'do': [{'$y': '$y', '+': 1}]}
{'print': '$y'}
store
{'removeNode': '/oak:index/nodetype'}
{'setProperty': '/oak:index/test/type', 'value': 'disabled'}
openSession
JsonIndexCommand
['/foo': {

{'xpath':'/jcr:root//element(*, oak:QueryIndexDefinition)[@type=`counter`] 
