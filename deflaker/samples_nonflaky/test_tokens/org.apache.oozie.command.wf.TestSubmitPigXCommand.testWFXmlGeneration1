getClass
-a aaa -b bbb -c ccc -M -Da=aaa -Db=bbb -param input=abc
<argument>-a</argument>
getLog
</configuration>
<workflow-app xmlns="uri:oozie:workflow:0.2" name="oozie-pig">
conf
<start to="pig1" />
<kill name="fail">
pigArgsStr
<param>INPUT=/some/path</param>
<argument>bbb</argument>
reference
split
</workflow-app>
abc=xyz
xml
/user/oozie/input1.txt,/user/oozie/input2.txt#my.txt
<archive>/user/oozie/udf1.jar#udf1.jar</archive>
<argument>aaa</argument>
<argument>-M</argument>
<ok to="end" />
testWFXmlGeneration1
info
<error to="fail" />
 
<argument>ccc</argument>
<action name="pig1">
<job-tracker>jobtracker</job-tracker>
reference xml = 
<name>b</name>
parseXml
<file>/user/oozie/input2.txt#my.txt</file>
params
<pig>
OozieClient
</kill>
INPUT=/some/path
submitPigCmd
ActionUtils
<message>pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
<argument>input=abc</argument>
OUTPUT=/some/other/path
<value>bbb</value>
namenode
libpath
getWorkflowXml
</pig>
sb
</action>
setStrings
assertTrue
root
<archive>/user/oozie/udf2.jar#my.jar</archive>
<value>aaa</value>
/user/oozie/udf1.jar,/user/oozie/udf2.jar#my.jar
xml = 
<param>abc=xyz</param>
set
prettyPrint
XmlUtils
XLog
<argument>-c</argument>
XOozieClient
<argument>-param</argument>
<property>
<configuration>
<name>a</name>
<end name="end" />
args
<script>dummy.pig</script>
jobtracker
<file>/user/oozie/input1.txt#input1.txt</file>
</property>
<argument>-b</argument>
equals
toString
<param>OUTPUT=/some/other/path</param>
append
<name-node>namenode</name-node>
