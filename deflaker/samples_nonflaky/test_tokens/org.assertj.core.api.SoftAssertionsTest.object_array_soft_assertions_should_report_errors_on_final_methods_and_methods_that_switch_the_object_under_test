hasMessage
John
 the test would fail if any method was not proxyable as the assertion error would not be softly caught
extracting
bar
filteredOnNull
children
extracting("first", String.class)
maggie
Doe
Bilbo
errorsCollected
filteredOn
filteredOn + extracting
in
[filteredOn firstName = null] error message
using flatExtracting on Iterable
flatExtracting
filteredOn firstName = John
[filteredOn firstName = John] error message
hasSize
as
contains
filteredOn firstName in {John, Frodo}
isSubsetOf
extracting("last")
containsOnly
endsWith
filteredOn firstName = null
frodo
firstNameFunction
Messi
Ronaldo
doesNotContainSubsequence
extracting("first", "last")
using flatExtracting on Iterable with exception
characters
overridingErrorMessage
tuple
[extractingResultOf("getFirst", String.class)] error message
get
[using flatExtracting on Iterable with exception] error message
fred
extracting(Name::getFirst)
extractingResultOf
[filteredOn firstName in {John, Frodo}] error message
Jo
[extracting(Name::getFirst, Name::getLast)] error message
[extracting(firstNameFunction)] error message
Jane
[using flatExtracting(String fieldOrPropertyName)] error message
names
toString
[filteredOn with condition] error message
containsAnyOf
first
filteredOn with consumer
doesNotContain
getFirst
Sauron
 GIVEN
homer
last
filteredOn(name -> name.first.startsWith("Jo"))
unchecked
containsOnlyOnce
containsSubsequence
assertThat
 WHEN
Baggins
extracting(Name::getFirst, Name::getLast)
startsWith Jo
[extracting("first", "last")] error message
name
doesNotContainSequence
isNotEmpty
[filteredOn + extracting] error message
softly
Sam
extractingResultOf("getFirst", String.class)
Frodo
filteredOnAssertions
using flatExtracting(String fieldOrPropertyName)
foo
Aragorn
extractingResultOf("getFirst")
containsExactly
[filteredOn(name -> name.first.startsWith("Jo"))] error message
array
extracting(firstNameFunction)
 THEN
containsExactlyInAnyOrder
[extractingResultOf("getFirst")] error message
object_array_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test
sam
[extracting("first", String.class)] error message
isEmpty
error message
filteredOn with condition
containsSequence
gandalf
bart
[extracting(Name::getFirst)] error message
[extracting("last")] error message
hasMessageContaining
[using flatExtracting on Iterable] error message
startsWith
