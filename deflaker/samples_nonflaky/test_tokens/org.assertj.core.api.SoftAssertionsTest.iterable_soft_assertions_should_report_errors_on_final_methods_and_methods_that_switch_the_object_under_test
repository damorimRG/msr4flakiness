hasMessage
[using flatExtracting(String... fieldOrPropertyNames)] error message
flatExtracting with multiple ThrowingExtractors
John
 the test would fail if any method was not proxyable as the assertion error would not be softly caught
extracting
asList
childrenExtractor
bar
throwingLastNameFunction
filteredOnNull
children
extracting("first", String.class)
maggie
Doe
Bilbo
errorsCollected
filteredOn
in
[filteredOn firstName = null] error message
iterable_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test
using flatExtracting on Iterable
flatExtracting
filteredOn firstName = John
[filteredOn firstName = John] error message
hasSize
flatExtracting with multiple Extractors
as
contains
filteredOn firstName in {John, Frodo}
isSubsetOf
extracting("last")
containsOnly
endsWith
filteredOn firstName = null
frodo
firstNameFunction
[name.first.startsWith("Jo")] error message
Messi
Ronaldo
doesNotContainSubsequence
extracting("first", "last")
using flatExtracting on Iterable with exception
characters
overridingErrorMessage
tuple
[extractingResultOf("getFirst", String.class)] error message
get
[using flatExtracting on Iterable with exception] error message
throwingFirstNameFunction
fred
extractingResultOf
[extracting(throwingFirstNameFunction)] error message
[filteredOn firstName in {John, Frodo}] error message
Jo
[extracting(firstNameFunction)] error message
Jane
[using flatExtracting(String fieldOrPropertyName)] error message
names
toString
[filteredOn with condition] error message
containsAnyOf
first
[flatExtracting with multiple ThrowingExtractors] error message
filteredOn with consumer
doesNotContain
getFirst
Sauron
 GIVEN
[filteredOn with consumer] error message
homer
last
filteredOn(name -> name.first.startsWith("Jo"))
unchecked
containsOnlyOnce
containsSubsequence
assertThat
 WHEN
Baggins
startsWith Jo
[extracting("first", "last")] error message
name
doesNotContainSequence
isNotEmpty
[extracting(firstNameFunction, lastNameFunction)] error message
softly
Sam
extractingResultOf("getFirst", String.class)
Frodo
using flatExtracting(String... fieldOrPropertyNames)
filteredOnAssertions
[flatExtracting with multiple Extractors] error message
using flatExtracting(String fieldOrPropertyName)
foo
Aragorn
extractingResultOf("getFirst")
containsExactly
[filteredOn(name -> name.first.startsWith("Jo"))] error message
extracting(firstNameFunction)
 THEN
containsExactlyInAnyOrder
[extractingResultOf("getFirst")] error message
lastNameFunction
extracting(throwingFirstNameFunction)
sam
extracting(firstNameFunction, lastNameFunction)
[extracting("first", String.class)] error message
isEmpty
error message
filteredOn with condition
containsSequence
name.first.startsWith("Jo")
gandalf
bart
[extracting("last")] error message
hasMessageContaining
[using flatExtracting on Iterable] error message
startsWith
