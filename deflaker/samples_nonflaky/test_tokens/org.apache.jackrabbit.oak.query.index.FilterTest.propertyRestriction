Operator
 if there is an overlap
Filter(, path=*, property=[x=[is not null, ..1), 2]])
Filter(, path=*, property=[x=[1, [1.., ..1]]])
Filter(, path=*, property=[x=[1, [1.., ..1], (1..]])
Filter(, path=*, property=[x=[..2], [1.., (1..]])
two
Filter(, path=*, property=[x=[..2]]])
Filter(, path=*, property=[x=[is not null, ..1)]])
assertTrue
Filter(, path=*, property=[x=[is not null]])
Filter(, path=*, property=[x=[1, ..1)]])
 no change, as the same restrictions already were added
Filter(, path=*, property=[x=[1]])
 (which is faster, and correct even when using multi-valued properties)
newTestInstance
PropertyValues
FilterImpl
Filter(, path=*, property=[x=[..2], [1.., (1.., ..2)]])
f
one
Filter(, path=*, property=[x=[..2], [1.., (1.., ..2), 2]])
Filter(, path=*, property=[x=[1, [1..]])
assertEquals
newString
1
restrictProperty
2
Filter(, path=*, property=[x=[..2], [1..]])
getPropertyRestriction
propertyRestriction
toString
