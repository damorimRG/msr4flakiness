SettableFuture
writeLock
channel
run
Executors
getCause
sleepUninterruptibly
that
executor
interrupt
lock
create
write
 wait for all blocking threads to start
MILLISECONDS
expected
READ
fail
allocate
queueAllBlockingOperations
isInstanceOf
Uninterruptibles
 interrupt this thread.
 different thread, closed the channel)
blockingStartLatch
interruptException
WRITE
 let the thread start running
interrupted thread exception
file
get
await
 ensure all operations on the channel will block
countDown
 then ensure time for thread to start blocking on the write lock
blocking thread exception
threadStartLatch
set
BLOCKING_OP_COUNT
e
testCloseByInterrupt
start
regularFile
thread
futures
 then ensure time for the operations to start blocking
newCachedThreadPool
ByteBuffer
 ClosedByInterruptException
future
 get the exception that caused the interrupted operation to terminate
assertWithMessage
