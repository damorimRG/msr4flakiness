"ģ"
"\u0002"
"\u0123"
"\u0014"
falsehood
/error/
nil
"ሴ"
[0, 12, -1, 0.1, -0.1, -2.3e1, 1e+1, 1.e-20]
"\u000d"
"\u001f"
[true, false, null]
"invalid
wrong\m
"\u0003"
"\u0015"
 {

}

matches
"-\b-\f-\n-\r-\t"
/*/ comment /*/
fail
[0,12,-1,0.1,-0.1,-2.3e1,1e+1,1.e-20]
"\u000e"
"\t"
{}123[*] expected: '+'
truer
""
hello

"\u0004"
"\u0016"
/**/ comment /**/
/*/ comment /*/ 
-"test\/test"
world
assertTrue
"\u000f"
{}123[*] expected: string
"Hello"
- "test/test"
[]
{}
"\u0005"
e
"\f"
"\u0017"
getMessage
assertEquals
"hello\n
{}123
"\u001a"
t
"test"
"\
toString
"\n"
"\u0006"
"\u0018"
+ - / ^ 
decode
"\u0010"
"\u001b"
JsopReader
test\
"\u0019"
/**/ /id:comment//**/ 
"\u0011"
read
test
"\u0007"
decodeQuoted
"\u000a"
world"
"\u001c"
true
"\u0008"
wrong\uxxxx
"\u0000"
"\u0012"
.1
{"x":1, "y":2}
testTokenizer
assertFalse
 {
"a": /* test */ 10
}

/id:falsehood/
JsopTokenizer
/id:nil/1
"\u000b"
"\u001d"
"\u1234"
+ - / ^
"\u0009"
"---
--	"
nil 1
/id:truer/
/id:nil/
"\u0001"
"\u0013"
"\b"
"-\\-\"-\b-\f-\n-\r-\t"
 {
"x": 1,
"y": 2
}

"\u000c"
/error/1
/id:truetrue/
"\u001e"
"\r"
{ "a": /* test */ 10}
