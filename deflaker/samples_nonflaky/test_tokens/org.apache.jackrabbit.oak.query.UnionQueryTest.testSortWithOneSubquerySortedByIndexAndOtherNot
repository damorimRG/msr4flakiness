getNodeTypeInfo
type
SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest/a')
when
sImpl3
jcr:path
testSortWithOneSubquerySortedByIndexAndOtherNot
getPath
getQueryEngine
propValImpl
unionImpl
Order
init
expected
/UnionQueryTest/a
sImpl2
setOrderings
executeQuery
left
nt:base
spyLeft
nodeTypes
spy
rr
sImpl
bindSelector
propValImpl3
propValImpl2
/UnionQueryTest/a/b
getRows
setExecutionContext
spyRight
result
 TODO - Write a similar test that might fail with guava's merge sort on some conditions
 / One subquery sorted by index and the other not and orderBY != null in UnionQueryImpl
getExecutionContext
SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest2')
root
/UnionQueryTest2/a
/UnionQueryTest2
getRoot
a
createQuery
qImplRight
/UnionQueryTest/a/b/c
doReturn
/UnionQueryTest/a/b/c/d
assertEquals
right
store
/UnionQueryTest/a/b/c/d/e
isSortedByIndex
 Execute query with ORDER BY clause - This should use mergeSorted and the final result should be sorted across both the subqueries.
Mockito
qImplLeft
