using extractingResultOf(method, Class)
using extracting(..., Class)
John
extracting
asList
using extracting(...)
should_pass_when_using_extracting_with_list
Name
tuple
getFirst
 THEN
get
using extracting()
Doe
 GIVEN
extractingResultOf
using extractingResultOf(method)
errorsCollected
last
Foo
Foo1
then
Foo3
assertThat
Jane
Foo2
using extracting(Extractor)
Foo5
 WHEN
Foo6
hasSize
as
contains
names
4
name
hasMessageContaining
first
softly
