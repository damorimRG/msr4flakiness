@Test
public void testInClassBlock() {
    assertFalse(ScopeUtil.isInClassBlock(new DetailAstImpl()), "Should return false when passed is not class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.LITERAL_NEW, TokenTypes.MODIFIERS)), "Should return false when passed is not class");
    assertTrue(ScopeUtil.isInClassBlock(getNode(TokenTypes.OBJBLOCK, TokenTypes.CLASS_DEF, TokenTypes.MODIFIERS)), "Should return true when passed is class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.MODIFIERS)), "Should return false when passed is not class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.CLASS_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.MODIFIERS)), "Should return false when passed is not class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.CLASS_DEF, TokenTypes.ENUM_DEF, TokenTypes.MODIFIERS)), "Should return false when passed is not class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.CLASS_DEF, TokenTypes.LITERAL_NEW, TokenTypes.IDENT)), "Should return false when passed is not class");
    assertFalse(ScopeUtil.isInClassBlock(getNode(TokenTypes.PACKAGE_DEF, TokenTypes.DOT)), "Should return false when passed is not expected");
}
