@Test
public void test() throws IOException {
    createFile();
    // test open / close (without reading)
    LazyInputStream in = new LazyInputStream(asInputStreamSupplier(file));
    in.close();
    // test reading too much and closing too much
    in = new LazyInputStream(asInputStreamSupplier(file));
    assertEquals(0, in.read());
    assertEquals(-1, in.read());
    assertEquals(-1, in.read());
    assertEquals(-1, in.read());
    in.close();
    in.close();
    in.close();
    // test markSupported, mark, and reset
    in = new LazyInputStream(asInputStreamSupplier(file));
    assertFalse(in.markSupported());
    in.mark(1);
    assertEquals(0, in.read());
    try {
        in.reset();
        fail();
    } catch (IOException e) {
    // expected
    }
    assertEquals(-1, in.read());
    in.close();
    // test read(byte[])
    in = new LazyInputStream(asInputStreamSupplier(file));
    byte[] test = new byte[2];
    assertEquals(1, in.read(test));
    in.close();
    // test read(byte[],int,int)
    in = new LazyInputStream(asInputStreamSupplier(file));
    assertEquals(1, in.read(test, 0, 2));
    in.close();
    // test skip
    in = new LazyInputStream(asInputStreamSupplier(file));
    assertEquals(2, in.skip(2));
    assertEquals(-1, in.read(test));
    in.close();
    createFile();
    // test that the file is closed after reading the last byte
    in = new LazyInputStream(asInputStreamSupplier(file));
    assertEquals(0, in.read());
    assertEquals(-1, in.read());
    in.close();
    file.delete();
}
