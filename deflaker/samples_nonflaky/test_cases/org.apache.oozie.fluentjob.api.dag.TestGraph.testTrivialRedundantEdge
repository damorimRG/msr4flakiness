@Test
public void testTrivialRedundantEdge() {
    final Node a = MapReduceActionBuilder.create().withName("A").build();
    final Node b = MapReduceActionBuilder.create().withName("B").withParent(a).build();
    MapReduceActionBuilder.create().withName("C").withParent(a).withParent(b).build();
    final Workflow workflow = new WorkflowBuilder().withName("trivial-redundant-edge").withDagContainingNode(a).build();
    final Graph graph = new Graph(workflow);
    checkDependencies(workflow.getNodes(), graph);
    final NodeBase A = new ExplicitNode("A", null);
    final NodeBase B = new ExplicitNode("B", null);
    final NodeBase C = new ExplicitNode("C", null);
    final Start start = new Start("start");
    final End end = new End("end");
    end.addParent(C);
    C.addParent(B);
    B.addParent(A);
    A.addParent(start);
    final List<NodeBase> nodes = Arrays.asList(start, end, A, B, C);
    checkEqualStructureByNames(nodes, graph);
// 
// nodesToPng.withWorkflow(workflow);
// nodesToPng.withGraph(graph);
}
