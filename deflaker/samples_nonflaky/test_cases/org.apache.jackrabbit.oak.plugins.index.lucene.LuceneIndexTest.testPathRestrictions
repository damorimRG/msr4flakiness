@Test
public void testPathRestrictions() throws Exception {
    NodeBuilder idx = newLucenePropertyIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "lucene", ImmutableSet.of("foo"), null);
    idx.setProperty(FulltextIndexConstants.EVALUATE_PATH_RESTRICTION, true);
    NodeState before = builder.getNodeState();
    builder.setProperty("foo", "bar");
    builder.child("a").setProperty("foo", "bar");
    builder.child("a1").setProperty("foo", "bar");
    builder.child("a").child("b").setProperty("foo", "bar");
    builder.child("a").child("b").child("c").setProperty("foo", "bar");
    NodeState after = builder.getNodeState();
    NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);
    tracker = new IndexTracker();
    tracker.update(indexed);
    AdvancedQueryIndex queryIndex = new LucenePropertyIndex(tracker);
    FilterImpl filter = createTestFilter();
    filter.restrictPath("/", Filter.PathRestriction.EXACT);
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/"));
    filter = createTestFilter();
    filter.restrictPath("/", Filter.PathRestriction.DIRECT_CHILDREN);
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/a", "/a1"));
    filter = createTestFilter();
    filter.restrictPath("/a", Filter.PathRestriction.DIRECT_CHILDREN);
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/a/b"));
    filter = createTestFilter();
    filter.restrictPath("/a", Filter.PathRestriction.ALL_CHILDREN);
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/a/b", "/a/b/c"));
}
