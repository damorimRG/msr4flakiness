/*
    Given an index def with 2 orderable property definitions(Relative) for same property - one with function and one without
    Order by should give correct results
     */
@Test
public void sameOrderableRelPropWithAndWithoutFunc_checkOrdering() throws Exception {
    // Index def with same property - ordered - one with function and one without
    Tree luceneIndex = createIndex("upper", Collections.<String>emptySet());
    Tree nonFunc = luceneIndex.addChild(FulltextIndexConstants.INDEX_RULES).addChild("nt:base").addChild(FulltextIndexConstants.PROP_NODE).addChild("foo");
    nonFunc.setProperty(FulltextIndexConstants.PROP_PROPERTY_INDEX, true);
    nonFunc.setProperty(FulltextIndexConstants.PROP_ORDERED, true);
    nonFunc.setProperty("name", "jcr:content/n/foo");
    Tree func = luceneIndex.getChild(FulltextIndexConstants.INDEX_RULES).getChild("nt:base").getChild(FulltextIndexConstants.PROP_NODE).addChild("testOak");
    func.setProperty(FulltextIndexConstants.PROP_ORDERED, true);
    func.setProperty(FulltextIndexConstants.PROP_FUNCTION, "fn:upper-case(jcr:content/n/@foo)");
    root.commit();
    int i = 1;
    // Create nodes that will be served by the index definition that follows
    for (String node : asList("a", "c", "b", "e", "d")) {
        Tree test = root.getTree("/").addChild(node);
        test.setProperty("jcr:primaryType", "nt:unstructured", Type.NAME);
        Tree a = test.addChild("jcr:content");
        a.setProperty("jcr:primaryType", "nt:unstructured", Type.NAME);
        Tree b = a.addChild("n");
        b.setProperty("jcr:primaryType", "nt:unstructured", Type.NAME);
        b.setProperty("foo", "bar" + i);
        i++;
    }
    root.commit();
    // Check ordering works for func and non func properties
    assertOrderedPlanAndQuery("select * from [nt:base] order by upper([jcr:content/n/foo])", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by [jcr:content/n/foo]", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by upper([jcr:content/n/foo]) DESC", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by [jcr:content/n/foo] DESC", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
    // Now we change the value of foo on already indexed nodes and see if changes get indexed properly.
    i = 5;
    for (String node : asList("a", "c", "b", "e", "d")) {
        Tree test = root.getTree("/").getChild(node).getChild("jcr:content").getChild("n");
        test.setProperty("foo", "bar" + i);
        i--;
    }
    root.commit();
    assertOrderedPlanAndQuery("select * from [nt:base] order by upper([jcr:content/n/foo])", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by [jcr:content/n/foo]", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by upper([jcr:content/n/foo]) DESC", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
    assertOrderedPlanAndQuery("select * from [nt:base] order by [jcr:content/n/foo] DESC", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
}
