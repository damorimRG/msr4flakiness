// OAK-3474
@Test
public void ignoreUncommitted() throws Exception {
    final AtomicLong numPreviousFinds = new AtomicLong();
    MemoryDocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            if (Utils.getPathFromId(key).startsWith("p")) {
                numPreviousFinds.incrementAndGet();
            }
            return super.find(collection, key);
        }
    };
    DocumentNodeStore ns = builderProvider.newBuilder().setDocumentStore(store).setAsyncDelay(0).getNodeStore();
    String id = Utils.getIdFromPath("/test");
    NodeBuilder b = ns.getRoot().builder();
    b.child("test").setProperty("p", "a");
    merge(ns, b);
    NodeDocument doc;
    int i = 0;
    do {
        b = ns.getRoot().builder();
        b.child("test").setProperty("q", i++);
        merge(ns, b);
        doc = store.find(NODES, id);
        assertNotNull(doc);
        if (i % 100 == 0) {
            ns.runBackgroundOperations();
        }
    } while (doc.getPreviousRanges().isEmpty());
    Revision r = ns.newRevision();
    UpdateOp op = new UpdateOp(id, false);
    NodeDocument.setCommitRoot(op, r, 0);
    op.setMapEntry("p", r, "b");
    assertNotNull(store.findAndUpdate(NODES, op));
    doc = store.find(NODES, id);
    numPreviousFinds.set(0);
    doc.getNodeAtRevision(ns, ns.getHeadRevision(), null);
    assertEquals(0, numPreviousFinds.get());
}
