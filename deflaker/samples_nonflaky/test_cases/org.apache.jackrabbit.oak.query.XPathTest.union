@Test
public void union() throws ParseException {
    verify("(//*[@a=1 or @b=1] | //*[@c=1])", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] = 1 " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [b] = 1 " + "/* xpath: //*[@a=1 or @b=1] */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [c] = 1 " + "/* xpath: //*[@c=1] */");
    verify("//(a|(b|c))", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where name(a) = 'a' " + "/* xpath: //a */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where name(a) = 'b' " + "/* xpath: //b */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where name(a) = 'c' " + "/* xpath: //c */");
    verify("(//*[jcr:contains(., 'some')])", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where contains(*, 'some') " + "/* xpath: //*[jcr:contains(., 'some')] */");
    verify("(//*[jcr:contains(., 'x')] | //*[jcr:contains(., 'y')])", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where contains(*, 'x') " + "/* xpath: //*[jcr:contains(., 'x')] */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where contains(*, 'y') " + "/* xpath: //*[jcr:contains(., 'y')] */");
    try {
        verify("(/jcr:root/x[@a][@b][@c]", "");
        fail();
    } catch (ParseException e) {
    // expected
    }
    verify("(/jcr:root/x[@a] | /jcr:root/y[@b])[@c]", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and [c] is not null " + "and issamenode(a, '/x') " + "/* xpath: /jcr:root/x[@a] [@c] */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [b] is not null " + "and [c] is not null " + "and issamenode(a, '/y') " + "/* xpath: /jcr:root/y[@b][@c] */");
    verify("(/jcr:root/x | /jcr:root/y)", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/x') " + "/* xpath: /jcr:root/x */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/y') " + "/* xpath: /jcr:root/y */");
    verify("(/jcr:root/x | /jcr:root/y )", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/x') " + "/* xpath: /jcr:root/x */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/y') " + "/* xpath: /jcr:root/y */");
    verify("(/jcr:root/content//*[@a] | /jcr:root/lib//*[@b]) order by @c", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//*[@a]  " + "order by @c */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [b] is not null " + "and isdescendantnode(a, '/lib') " + "/* xpath: /jcr:root/lib//*[@b] " + "order by @c */ " + "order by [c]");
    verify("/jcr:root/(content|lib)/element(*, nt:base) order by @title", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where ischildnode(a, '/content') " + "/* xpath: /jcr:root/content/element(*, nt:base) " + "order by @title */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where ischildnode(a, '/lib') " + "/* xpath: /jcr:root/lib/element(*, nt:base) " + "order by @title */ " + "order by [title]");
    verify("/jcr:root/(content|lib)", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/content') " + "/* xpath: /jcr:root/content */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where issamenode(a, '/lib') " + "/* xpath: /jcr:root/lib */");
    verify("(/jcr:root/content|/jcr:root/lib)//*", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//* */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/lib') " + "/* xpath: /jcr:root/lib//* */");
    verify("/jcr:root/content/(a|b|c)/thumbnails/*", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where ischildnode(a, '/content/a/thumbnails') " + "/* xpath: /jcr:root/content/a/thumbnails/* */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where ischildnode(a, '/content/b/thumbnails') " + "/* xpath: /jcr:root/content/b/thumbnails/* */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where ischildnode(a, '/content/c/thumbnails') " + "/* xpath: /jcr:root/content/c/thumbnails/* */");
    verify("/jcr:root/(content|lib)//*[@a]", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//*[@a] */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/lib') " + "/* xpath: /jcr:root/lib//*[@a] */");
    // "order by @jcr:score" is kept on xpath to sql2 conversion
    // (because the default is ascending)
    verify("/jcr:root/content//(element(*, nt:base) | element(*, nt:folder)) order by @jcr:score", "select [jcr:path], [jcr:score], * from [nt:base] as a where isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//element(*, nt:base)  order by @jcr:score */ " + "union select [jcr:path], [jcr:score], * from [nt:folder] as a where isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content// element(*, nt:folder) order by @jcr:score */ " + "order by [jcr:score]");
    // "order by @jcr:score descending" is ignored on xpath to sql2 conversion
    verify("/jcr:root/content//(element(*, nt:base) | element(*, nt:folder)) order by @jcr:score descending", "select [jcr:path], [jcr:score], * from [nt:base] as a where isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//element(*, nt:base)  order by @jcr:score descending */ " + "union select [jcr:path], [jcr:score], * from [nt:folder] as a where isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content// element(*, nt:folder) order by @jcr:score descending */");
}
