@Test
public void testAutoCreateItemsNonExistingChild() throws Exception {
    Tree definition = when(mock(Tree.class).getProperty(JCR_AUTOCREATED)).thenReturn(PropertyStates.createProperty(JCR_AUTOCREATED, true)).getMock();
    when(definition.getProperty(JCR_DEFAULTPRIMARYTYPE)).thenReturn(PropertyStates.createProperty(JCR_DEFAULTPRIMARYTYPE, NT_OAK_UNSTRUCTURED, Type.NAME));
    Tree definitions = mockTree("/some/path/autoChild", true);
    when(definitions.getChildren()).thenReturn(ImmutableList.of(definition));
    Tree defWithAutoChild = when(mock(Tree.class).getChildren()).thenReturn(ImmutableList.of(definitions)).getMock();
    when(ntDef.getChild(REP_NAMED_CHILD_NODE_DEFINITIONS)).thenReturn(defWithAutoChild);
    Tree defWithoutChildren = when(mock(Tree.class).getChildren()).thenReturn(ImmutableList.of()).getMock();
    when(ntDef.getChild(REP_NAMED_PROPERTY_DEFINITIONS)).thenReturn(defWithoutChildren);
    Tree newChild = mock(Tree.class);
    when(newChild.hasChild("autoChild")).thenReturn(true);
    when(child.hasChild("autoChild")).thenReturn(false);
    when(child.addChild("autoChild")).thenReturn(newChild);
    TreeUtil.autoCreateItems(child, ntDef, typeRoot, "userId");
    verify(child, times(1)).hasChild("autoChild");
    verify(child, never()).setProperty(any(PropertyState.class));
    verify(child, times(1)).addChild("autoChild");
    verify(newChild, times(1)).setProperty(JCR_PRIMARYTYPE, NT_OAK_UNSTRUCTURED, NAME);
}
