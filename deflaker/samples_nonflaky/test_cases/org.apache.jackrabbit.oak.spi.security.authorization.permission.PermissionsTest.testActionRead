@Test
public void testActionRead() {
    TreeLocation treeLocation = TreeLocation.create(existingTree);
    assertNull(treeLocation.getProperty());
    assertEquals(Permissions.READ_NODE, Permissions.getPermissions(Session.ACTION_READ, treeLocation, false));
    assertEquals(Permissions.READ_ACCESS_CONTROL, Permissions.getPermissions(Session.ACTION_READ, treeLocation, true));
    TreeLocation nonExistingTree = createNonExistingTreeLocation("/nonExisting");
    assertNull(nonExistingTree.getProperty());
    assertEquals(Permissions.READ, Permissions.getPermissions(Session.ACTION_READ, nonExistingTree, false));
    assertEquals(Permissions.READ_ACCESS_CONTROL, Permissions.getPermissions(Session.ACTION_READ, nonExistingTree, true));
    TreeLocation nonExistingProp = createNonExistingTreeLocation("/nonExisting").getChild("nonExisting");
    assertNull(nonExistingProp.getProperty());
    assertEquals(Permissions.READ, Permissions.getPermissions(Session.ACTION_READ, nonExistingProp, false));
    assertEquals(Permissions.READ_ACCESS_CONTROL, Permissions.getPermissions(Session.ACTION_READ, nonExistingProp, true));
    TreeLocation existingProp = treeLocation.getChild(JcrConstants.JCR_PRIMARYTYPE);
    assertNotNull(existingProp.getProperty());
    assertEquals(Permissions.READ_PROPERTY, Permissions.getPermissions(Session.ACTION_READ, existingProp, false));
    assertEquals(Permissions.READ_ACCESS_CONTROL, Permissions.getPermissions(Session.ACTION_READ, existingProp, true));
}
