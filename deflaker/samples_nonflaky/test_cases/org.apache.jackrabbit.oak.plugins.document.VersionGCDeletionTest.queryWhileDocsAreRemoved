// OAK-2420
@Test
public void queryWhileDocsAreRemoved() throws Exception {
    final Thread currentThread = Thread.currentThread();
    final Semaphore queries = new Semaphore(0);
    final CountDownLatch ready = new CountDownLatch(1);
    MemoryDocumentStore ms = new MemoryDocumentStore() {

        @NotNull
        @Override
        public <T extends Document> List<T> query(Collection<T> collection, String fromKey, String toKey, int limit) {
            if (collection == Collection.NODES && Thread.currentThread() != currentThread) {
                ready.countDown();
                queries.acquireUninterruptibly();
            }
            return super.query(collection, fromKey, toKey, limit);
        }
    };
    store = new DocumentMK.Builder().clock(clock).setLeaseCheckMode(LeaseCheckMode.LENIENT).setDocumentStore(ms).setAsyncDelay(0).getNodeStore();
    // create nodes
    NodeBuilder builder = store.getRoot().builder();
    NodeBuilder node = builder.child("node");
    for (int i = 0; i < 200; i++) {
        node.child("c-" + i);
    }
    merge(store, builder);
    clock.waitUntil(clock.getTime() + HOURS.toMillis(1));
    // remove nodes
    builder = store.getRoot().builder();
    node = builder.child("node");
    for (int i = 0; i < 90; i++) {
        node.getChildNode("c-" + i).remove();
    }
    merge(store, builder);
    store.runBackgroundOperations();
    clock.waitUntil(clock.getTime() + HOURS.toMillis(1));
    List<String> expected = Lists.newArrayList();
    // fill caches
    NodeState n = store.getRoot().getChildNode("node");
    for (ChildNodeEntry entry : n.getChildNodeEntries()) {
        expected.add(entry.getName());
    }
    assertEquals(110, expected.size());
    // invalidate the nodeChildren cache only
    store.invalidateNodeChildrenCache();
    Future<List<String>> f = newSingleThreadExecutor().submit(new Callable<List<String>>() {

        @Override
        public List<String> call() {
            List<String> names = Lists.newArrayList();
            NodeState n = store.getRoot().getChildNode("node");
            for (ChildNodeEntry entry : n.getChildNodeEntries()) {
                names.add(entry.getName());
            }
            return names;
        }
    });
    // run GC once the reader thread is collecting documents
    ready.await();
    VersionGarbageCollector gc = store.getVersionGarbageCollector();
    VersionGCStats stats = gc.gc(30, MINUTES);
    assertEquals(90, stats.deletedDocGCCount);
    assertEquals(90, stats.deletedLeafDocGCCount);
    queries.release(2);
    List<String> names = f.get();
    assertEquals(expected, names);
}
