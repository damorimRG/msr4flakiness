@Test
public void testEnforceAuthorizableFolderHierarchy() throws Exception {
    User user = getTestUser();
    Tree userNode = root.getTree(user.getPath());
    Tree folder = TreeUtil.addChild(userNode, "folder", UserConstants.NT_REP_AUTHORIZABLE_FOLDER);
    String path = folder.getPath();
    // authNode - authFolder -> create User
    try {
        Principal p = new PrincipalImpl("test2");
        userMgr.createUser(p.getName(), p.getName(), p, path);
        root.commit();
        fail("Users may not be nested.");
    } catch (CommitFailedException e) {
    // success
    } finally {
        Authorizable a = userMgr.getAuthorizable("test2");
        if (a != null) {
            a.remove();
            root.commit();
        }
    }
    Tree someContent = TreeUtil.addChild(userNode, "mystuff", JcrConstants.NT_UNSTRUCTURED);
    path = someContent.getPath();
    try {
        // authNode - anyNode -> create User
        try {
            Principal p = new PrincipalImpl("test3");
            userMgr.createUser(p.getName(), p.getName(), p, path);
            root.commit();
            fail("Users may not be nested.");
        } catch (CommitFailedException e) {
        // success
        } finally {
            Authorizable a = userMgr.getAuthorizable("test3");
            if (a != null) {
                a.remove();
                root.commit();
            }
        }
        // authNode - anyNode - authFolder -> create User
        folder = TreeUtil.addChild(someContent, "folder", UserConstants.NT_REP_AUTHORIZABLE_FOLDER);
        // this time save node structure
        root.commit();
        try {
            Principal p = new PrincipalImpl("test4");
            userMgr.createUser(p.getName(), p.getName(), p, folder.getPath());
            root.commit();
            fail("Users may not be nested.");
        } catch (CommitFailedException e) {
        // success
        } finally {
            root.refresh();
            Authorizable a = userMgr.getAuthorizable("test4");
            if (a != null) {
                a.remove();
                root.commit();
            }
        }
    } finally {
        root.refresh();
        Tree t = root.getTree(path);
        if (t.exists()) {
            t.remove();
            root.commit();
        }
    }
}
