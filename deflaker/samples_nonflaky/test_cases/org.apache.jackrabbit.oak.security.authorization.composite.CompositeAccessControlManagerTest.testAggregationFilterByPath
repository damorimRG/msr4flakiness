@Test
public void testAggregationFilterByPath() throws Exception {
    String matchingPath = TEST_PATH;
    JackrabbitAccessControlManager acMgr1 = mock(JackrabbitAccessControlManager.class, withSettings().extraInterfaces(PolicyOwner.class));
    JackrabbitAccessControlManager acMgr2 = mock(JackrabbitAccessControlManager.class, withSettings().extraInterfaces(PolicyOwner.class));
    for (JackrabbitAccessControlManager acMgr : new JackrabbitAccessControlManager[] { acMgr1, acMgr2 }) {
        when(acMgr.getApplicablePolicies(anyString())).thenReturn(AccessControlPolicyIteratorAdapter.EMPTY);
        when(acMgr.getPolicies(anyString())).thenReturn(new AccessControlPolicy[0]);
        when(acMgr.getEffectivePolicies(anyString())).thenReturn(new AccessControlPolicy[0]);
    }
    AggregationFilter aggregationFilter = mock(AggregationFilter.class);
    when(aggregationFilter.stop(acMgr1, matchingPath)).thenReturn(true);
    CompositeAccessControlManager composite = createComposite(aggregationFilter, acMgr1, acMgr2);
    // must not call AggregationFilter
    composite.getApplicablePolicies(TEST_PATH);
    // must not call AggregationFilter
    composite.getPolicies(TEST_PATH);
    // must call AggregationFilter
    composite.getEffectivePolicies(TEST_PATH);
    verify(aggregationFilter, times(1)).stop(acMgr1, TEST_PATH);
    verify(aggregationFilter, never()).stop(acMgr2, TEST_PATH);
    verify(acMgr1, times(1)).getEffectivePolicies(TEST_PATH);
    verify(acMgr2, never()).getEffectivePolicies(TEST_PATH);
    // must call AggregationFilter but not trigger stop
    composite.getEffectivePolicies(ROOT_PATH);
    verify(aggregationFilter, times(1)).stop(acMgr1, ROOT_PATH);
    verify(aggregationFilter, times(1)).stop(acMgr2, ROOT_PATH);
    verify(acMgr1, times(1)).getEffectivePolicies(ROOT_PATH);
    verify(acMgr2, times(1)).getEffectivePolicies(ROOT_PATH);
}
