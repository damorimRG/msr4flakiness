@Test
public void tooManyReadsOnGetNodeAtRevision() throws Exception {
    final int numChanges = 200;
    final Set<String> prevDocCalls = newHashSet();
    MemoryDocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            if (Utils.getPathFromId(key).startsWith("p")) {
                prevDocCalls.add(key);
            }
            return super.find(collection, key);
        }
    };
    DocumentNodeStore ns = createTestStore(store, 0, numChanges);
    NodeDocument doc = getRootDocument(store);
    Map<Revision, String> valueMap = doc.getValueMap("p");
    assertEquals(200, valueMap.size());
    Revision oldest = Iterables.getLast(valueMap.keySet());
    prevDocCalls.clear();
    DocumentNodeState state = doc.getNodeAtRevision(ns, new RevisionVector(oldest), null);
    assertNotNull(state);
    PropertyState prop = state.getProperty("p");
    assertNotNull(prop);
    assertEquals(0L, (long) prop.getValue(Type.LONG));
    assertTrue("too many calls for previous documents: " + prevDocCalls, prevDocCalls.size() <= 2);
    ns.dispose();
}
