@Test
public void should_fail_if_no_elements_satisfy_the_assertions_requirements() {
    try {
        iterables.<String>assertAnySatisfy(someInfo(), actual, s -> {
            assertThat(s).hasSize(4);
            assertThat(s).contains("W");
        });
    } catch (AssertionError e) {
        List<ElementsShouldSatisfy.UnsatisfiedRequirement> errors = list(unsatisfiedRequirement("Luke", format("%n" + "Expecting:%n" + " <\"Luke\">%n" + "to contain:%n" + " <\"W\"> ")), unsatisfiedRequirement("Leia", format("%n" + "Expecting:%n" + " <\"Leia\">%n" + "to contain:%n" + " <\"W\"> ")), unsatisfiedRequirement("Yoda", format("%n" + "Expecting:%n" + " <\"Yoda\">%n" + "to contain:%n" + " <\"W\"> ")), unsatisfiedRequirement("Obiwan", format("%n" + "Expected size:<4> but was:<6> in:%n" + "<\"Obiwan\">")));
        verify(failures).failure(info, elementsShouldSatisfyAny(actual, errors, someInfo()));
        return;
    }
    failBecauseExpectedAssertionErrorWasNotThrown();
}
