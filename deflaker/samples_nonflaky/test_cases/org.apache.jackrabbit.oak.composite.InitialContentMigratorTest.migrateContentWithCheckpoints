@Test
public void migrateContentWithCheckpoints() throws IOException, CommitFailedException {
    // 1. populate the seed store with
    // .
    // \- first
    // \- second
    // \- third
    // 
    // 2. checkpoint before adding the third node
    // 
    // 3. the mount only includes the '/first' path, so only the
    // 'second' and 'third' nodes should be available
    MemoryNodeStore seed = new MemoryNodeStore();
    NodeBuilder root = seed.getRoot().builder();
    root.child("first");
    root.child("second");
    seed.merge(root, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    String checkpoint1 = seed.checkpoint(TimeUnit.MINUTES.toMillis(10));
    root = seed.getRoot().builder();
    root.child("third");
    seed.merge(root, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    MemoryNodeStore target = new MemoryNodeStore();
    NodeBuilder targetRootBuilder = target.getRoot().builder();
    targetRootBuilder.child(CLUSTER_CONFIG_NODE);
    target.merge(targetRootBuilder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    MountInfoProvider mip = Mounts.newBuilder().mount("seed", "/first").build();
    // perform migration
    InitialContentMigrator icm = new InitialContentMigrator(target, seed, mip.getMountByName("seed"));
    icm.migrate();
    NodeState targetRoot = target.getRoot();
    // verify that the 'second' and 'third' nodes are visible in the migrated store
    assertFalse("Node /first should not have been migrated", targetRoot.hasChildNode("first"));
    assertTrue("Node /second should have been migrated", targetRoot.hasChildNode("second"));
    assertTrue("Node /third should have been migrated", targetRoot.hasChildNode("third"));
    assertTrue(CLUSTER_CONFIG_NODE + " should be retained", targetRoot.hasChildNode(CLUSTER_CONFIG_NODE));
    // verify that the 'second' node is visible in the migrated store when retrieving the checkpoint
    NodeState checkpointTargetRoot = target.retrieve(checkpoint1);
    assertFalse("Node /first should not have been migrated", checkpointTargetRoot.hasChildNode("first"));
    assertTrue("Node /second should have been migrated", checkpointTargetRoot.hasChildNode("second"));
    assertFalse("Node /third should not be visible from the migrated checkpoint", checkpointTargetRoot.hasChildNode("third"));
}
