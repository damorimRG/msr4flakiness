@Test
public void testScanResistance() {
    boolean log = false;
    int size = 20;
    // cache size 11 (10 hot, 1 cold)
    CacheLIRS<Integer, Integer> test = createCache(size / 2 + 1);
    // init the cache with some dummy entries
    for (int i = 0; i < size; i++) {
        test.put(-i, -i * 10);
    }
    verify(test, null);
    // init with 0..9, ensure those are hot entries
    for (int i = 0; i < size / 2; i++) {
        test.put(i, i * 10);
        test.getUnchecked(i);
        if (log) {
            System.out.println("get " + i + " -> " + test);
        }
    }
    verify(test, null);
    // read 0..9, add 10..19 (cold)
    for (int i = 0; i < size; i++) {
        Integer x = test.getIfPresent(i);
        Integer y = test.peek(i);
        if (i < size / 2) {
            assertTrue("i: " + i, x != null);
            assertTrue("i: " + i, y != null);
            assertEquals(i * 10, x.intValue());
            assertEquals(i * 10, y.intValue());
        } else {
            assertNull(x);
            assertNull(y);
            test.put(i, i * 10);
            // peek should have no effect
            assertEquals(i * 10, test.peek(i).intValue());
        }
        if (log) {
            System.out.println("get " + i + " -> " + test);
        }
        verify(test, null);
    }
    // ensure 0..9 are hot, 10..18 are not resident, 19 is cold
    for (int i = 0; i < size; i++) {
        Integer x = test.getIfPresent(i);
        if (i < size / 2 || i == size - 1) {
            assertTrue("i: " + i, x != null);
            assertEquals(i * 10, x.intValue());
        } else {
            assertNull(x);
        }
        verify(test, null);
    }
}
