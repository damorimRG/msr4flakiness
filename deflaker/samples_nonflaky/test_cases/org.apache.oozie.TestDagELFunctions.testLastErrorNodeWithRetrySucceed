// This test simulates an action that gets retried because of an Error and succeeds on one of the retries.  The lastErrorNode
// EL function should never be set to this node.
public void testLastErrorNodeWithRetrySucceed() throws Exception {
    WorkflowJobBean job = this.addRecordToWfJobTable(WorkflowJob.Status.RUNNING, WorkflowInstance.Status.RUNNING);
    WorkflowActionBean action = this.addRecordToWfActionTable(job.getId(), "1", WorkflowAction.Status.END_RETRY, true);
    action.setType("java");
    action.setExternalStatus("FAILED");
    action.setErrorInfo("JA018", "some error occurred");
    WorkflowActionQueryExecutor.getInstance().executeUpdate(WorkflowActionQueryExecutor.WorkflowActionQuery.UPDATE_ACTION, action);
    new ActionEndXCommandIgnoreSignalException(action.getId(), action.getType()).call();
    ELEvaluator eval = Services.get().get(ELService.class).createEvaluator("workflow");
    job = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQueryExecutor.WorkflowJobQuery.GET_WORKFLOW, job.getId());
    action = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQueryExecutor.WorkflowActionQuery.GET_ACTION, action.getId());
    DagELFunctions.configureEvaluator(eval, job, action);
    assertEquals("", eval.evaluate("${wf:lastErrorNode()}", String.class));
    action.setExternalStatus("SUCCEEDED");
    action.setStatus(WorkflowAction.Status.DONE);
    WorkflowActionQueryExecutor.getInstance().executeUpdate(WorkflowActionQueryExecutor.WorkflowActionQuery.UPDATE_ACTION, action);
    new ActionEndXCommandIgnoreSignalException(action.getId(), action.getType()).call();
    job = WorkflowJobQueryExecutor.getInstance().get(WorkflowJobQueryExecutor.WorkflowJobQuery.GET_WORKFLOW, job.getId());
    action = WorkflowActionQueryExecutor.getInstance().get(WorkflowActionQueryExecutor.WorkflowActionQuery.GET_ACTION, action.getId());
    assertEquals(WorkflowAction.Status.OK, action.getStatus());
    DagELFunctions.configureEvaluator(eval, job, action);
    assertEquals("", eval.evaluate("${wf:lastErrorNode()}", String.class));
}
