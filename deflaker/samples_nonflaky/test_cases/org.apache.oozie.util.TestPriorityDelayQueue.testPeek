@Test
public void testPeek() throws Exception {
    PriorityDelayQueue<Integer> q = new PriorityDelayQueue<Integer>(3, 500, TimeUnit.MILLISECONDS, -1);
    // test immediate offer peeking
    q.offer(new TestQueueElement<Integer>(1));
    assertEquals((Integer) 1, q.peek().getElement().call());
    q.poll();
    assertEquals(0, q.size());
    // test delay offer peeking
    q.offer(new TestQueueElement<Integer>(1, 1, 10, TimeUnit.MILLISECONDS));
    assertEquals((Integer) 1, q.peek().getElement().call());
    Thread.sleep(11);
    assertNotNull(q.poll());
    assertEquals(0, q.size());
    // test different priorities immediate offer peeking
    q.offer(new TestQueueElement<Integer>(10, 0, 0, TimeUnit.MILLISECONDS));
    q.offer(new TestQueueElement<Integer>(30, 2, 0, TimeUnit.MILLISECONDS));
    q.offer(new TestQueueElement<Integer>(20, 1, 0, TimeUnit.MILLISECONDS));
    assertEquals((Integer) 30, q.peek().getElement().call());
    assertNotNull(q.poll());
    assertEquals((Integer) 20, q.peek().getElement().call());
    assertNotNull(q.poll());
    assertEquals((Integer) 10, q.peek().getElement().call());
    assertNotNull(q.poll());
    assertEquals(0, q.size());
    // test different priorities delayed offer peeking
    q.offer(new TestQueueElement<Integer>(30, 2, 200, TimeUnit.MILLISECONDS));
    q.offer(new TestQueueElement<Integer>(10, 0, 100, TimeUnit.MILLISECONDS));
    q.offer(new TestQueueElement<Integer>(20, 1, 150, TimeUnit.MILLISECONDS));
    assertEquals((Integer) 10, q.peek().getElement().call());
    Thread.sleep(100);
    assertNotNull(q.poll());
    assertEquals((Integer) 20, q.peek().getElement().call());
    Thread.sleep(50);
    assertNotNull(q.poll());
    assertEquals((Integer) 30, q.peek().getElement().call());
    Thread.sleep(50);
    assertNotNull(q.poll());
    assertEquals(0, q.size());
}
