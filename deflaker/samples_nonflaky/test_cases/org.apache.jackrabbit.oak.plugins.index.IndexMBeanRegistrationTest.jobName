@Test
public void jobName() throws Exception {
    final AtomicReference<Map<?, ?>> props = new AtomicReference<Map<?, ?>>();
    Whiteboard wb = new DefaultWhiteboard() {

        @Override
        public <T> Registration register(Class<T> type, T service, Map<?, ?> properties) {
            if (service instanceof AsyncIndexUpdate) {
                props.set(properties);
            }
            return super.register(type, service, properties);
        }
    };
    // some number which is hard to default else-where
    long schedulingDelayInSecs = 7;
    AsyncIndexUpdate update = new AsyncIndexUpdate("async", new MemoryNodeStore(), new CompositeIndexEditorProvider());
    IndexMBeanRegistration reg = new IndexMBeanRegistration(wb);
    reg.registerAsyncIndexer(update, schedulingDelayInSecs);
    try {
        Map<?, ?> map = props.get();
        assertNotNull(map);
        assertEquals(AsyncIndexUpdate.class.getName() + "-async", map.get("scheduler.name"));
        assertEquals(schedulingDelayInSecs, map.get("scheduler.period"));
        assertEquals(false, map.get("scheduler.concurrent"));
        assertEquals("LEADER", map.get("scheduler.runOn"));
        assertEquals("oak", map.get("scheduler.threadPool"));
    } finally {
        reg.unregister();
    }
}
