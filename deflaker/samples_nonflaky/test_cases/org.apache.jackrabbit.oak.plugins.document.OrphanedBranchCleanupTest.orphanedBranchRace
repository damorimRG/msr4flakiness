// OAK-8012 / OAK-8353
@Test
public void orphanedBranchRace() throws Exception {
    Semaphore branchCleanupInProgress = new Semaphore(0);
    Semaphore readHappened = new Semaphore(0);
    DocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T findAndUpdate(Collection<T> collection, UpdateOp update) {
            if (collection == NODES && isBranchCleanup(update)) {
                branchCleanupInProgress.release();
                readHappened.acquireUninterruptibly();
            }
            return super.findAndUpdate(collection, update);
        }

        private boolean isBranchCleanup(UpdateOp update) {
            for (Entry<Key, Operation> e : update.getChanges().entrySet()) {
                if (e.getValue().type == REMOVE_MAP_ENTRY && NodeDocument.isRevisionsEntry(e.getKey().getName())) {
                    return true;
                }
            }
            return false;
        }
    };
    DocumentNodeStore ns = builderProvider.newBuilder().setDocumentStore(store).setAsyncDelay(0).build();
    createOrphanedBranch(ns);
    // add a node below the root. this serves two purposes:
    // 1) the root state will have hasChildren set to true, otherwise
    // a read will not even try to get children
    // 2) push the head revision after the orphaned branch commit revision
    NodeBuilder builder = ns.getRoot().builder();
    builder.child("foo");
    merge(ns, builder);
    do {
        System.gc();
        executorService.submit(ns::runBackgroundOperations);
    } while (!branchCleanupInProgress.tryAcquire(100, TimeUnit.MILLISECONDS));
    ns.getNodeCache().invalidateAll();
    ns.getNodeChildrenCache().invalidateAll();
    boolean hasTestNode = ns.getRoot().hasChildNode("test");
    readHappened.release();
    new ExecutorCloser(executorService).close();
    assertFalse(hasTestNode);
}
