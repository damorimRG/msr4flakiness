@Test
public void testMetafileSymlink() throws ServiceException, IOException {
    Configuration conf = getOozieConfig();
    setShipLauncherInOozieConfig();
    services.init();
    FileSystem fs = getFileSystem();
    Properties prop = new Properties();
    try {
        Path basePath = new Path(SHARELIB_PATH + "testPath");
        Path basePath1 = new Path(SHARELIB_PATH + "testPath1");
        Path hive_site = new Path(basePath.toString() + Path.SEPARATOR + "hive_conf" + Path.SEPARATOR + "hive-site.xml");
        Path hive_site1 = new Path(basePath.toString() + Path.SEPARATOR + "hive_conf" + Path.SEPARATOR + "hive-site1.xml");
        Path symlink = new Path("symlink/");
        Path symlink_hive_site = new Path("symlink/hive_conf" + Path.SEPARATOR + "hive-site.xml");
        fs.mkdirs(basePath);
        createFiles(basePath.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig.jar");
        createFiles(basePath.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig_1.jar");
        createFiles(basePath1.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig_2.jar");
        createFiles(basePath1.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig_3.jar");
        createFiles(basePath1.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig_4.jar");
        createFiles(hive_site.toString());
        FSUtils.createSymlink(fs, basePath, symlink, true);
        FSUtils.createSymlink(fs, hive_site, symlink_hive_site, true);
        prop.put(ShareLibService.SHARE_LIB_CONF_PREFIX + ".pig", TEST_HDFS_HOME + symlink.toString());
        prop.put(ShareLibService.SHARE_LIB_CONF_PREFIX + ".hive_conf", TEST_HDFS_HOME + symlink_hive_site.toString() + "#hive-site.xml");
        createTestShareLibMappingFile(fs, prop);
        assertEquals(FSUtils.isSymlink(fs, symlink), true);
        setShareLibMappingFileInOozieConfig(fs, conf);
        setShipLauncherInOozieConfig();
        try {
            ShareLibService shareLibService = Services.get().get(ShareLibService.class);
            assertEquals(shareLibService.getShareLibJars("pig").size(), 2);
            assertEquals(shareLibService.getShareLibJars("hive_conf").size(), 1);
            FSUtils.createSymlink(fs, basePath1, symlink, true);
            FSUtils.createSymlink(fs, hive_site1, symlink_hive_site, true);
            assertEquals(FSUtils.getSymLinkTarget(fs, shareLibService.getShareLibJars("hive_conf").get(0)), hive_site1);
            assertEquals(shareLibService.getShareLibJars("pig").size(), 3);
        } finally {
            fs.delete(symlink, true);
        }
    } catch (IOException ex) {
        ex.printStackTrace();
    } finally {
        fs.delete(new Path(SHARELIB_PATH), true);
        fs.delete(new Path(TEST_HDFS_MAPPING_FILE_PATH), true);
    }
}
