@Test
public void should_include_errors_count_and_clearly_separate_error_messages() {
    // GIVEN
    SoftAssertions softly = new SoftAssertions();
    softly.assertThat(list("")).isEmpty();
    softly.assertThat(list("a", "b", "c")).as("isEmpty list").isEmpty();
    softly.assertThat("abc").isEmpty();
    softly.assertThat("abc").as("isEmpty string").isEmpty();
    softly.assertThat("abc").isEqualTo("bcd");
    softly.assertThat("abc").as("isEqualTo").isEqualTo("bcd");
    softly.assertThat(list("a", "b", "c")).as("contains").contains("e").doesNotContain("a");
    softly.assertThat(list("a", "b", "c")).contains("e").doesNotContain("a");
    // WHEN
    AssertionError error = expectAssertionError(() -> softly.assertAll());
    // THEN
    assertThat(error).hasMessage(format("%nMultiple Failures (10 failures)%n" + "-- failure 1 --%n" + "Expecting empty but was:<[\"\"]>%n" + "-- failure 2 --%n" + "[isEmpty list] %n" + "Expecting empty but was:<[\"a\", \"b\", \"c\"]>%n" + "-- failure 3 --%n" + "Expecting empty but was:<\"abc\">%n" + "-- failure 4 --%n" + "[isEmpty string] %n" + "Expecting empty but was:<\"abc\">%n" + "-- failure 5 --%n" + "Expecting:%n" + " <\"abc\">%n" + "to be equal to:%n" + " <\"bcd\">%n" + "but was not.%n" + "-- failure 6 --%n" + "[isEqualTo] %n" + "Expecting:%n" + " <\"abc\">%n" + "to be equal to:%n" + " <\"bcd\">%n" + "but was not.%n" + "-- failure 7 --%n" + "[contains] %n" + "Expecting:%n" + " <[\"a\", \"b\", \"c\"]>%n" + "to contain:%n" + " <[\"e\"]>%n" + "but could not find:%n" + " <[\"e\"]>%n" + "%n" + "-- failure 8 --%n" + "[contains] %n" + "Expecting%n" + " <[\"a\", \"b\", \"c\"]>%n" + "not to contain%n" + " <[\"a\"]>%n" + "but found%n" + " <[\"a\"]>%n" + "%n" + "-- failure 9 --%n" + "Expecting:%n" + " <[\"a\", \"b\", \"c\"]>%n" + "to contain:%n" + " <[\"e\"]>%n" + "but could not find:%n" + " <[\"e\"]>%n" + "%n" + "-- failure 10 --%n" + "Expecting%n" + " <[\"a\", \"b\", \"c\"]>%n" + "not to contain%n" + " <[\"a\"]>%n" + "but found%n" + " <[\"a\"]>%n"));
}
