@Test
public void isConflicting() throws CommitFailedException {
    DocumentNodeStore ns = newBuilder().setAsyncDelay(0).getNodeStore();
    DocumentStore store = ns.getDocumentStore();
    String id = Utils.getIdFromPath("/test");
    NodeBuilder b = ns.getRoot().builder();
    b.child("test").setProperty("p", "a");
    // test:{p:"a"}
    Revision r1 = merge(ns, b).getRevision(ns.getClusterId());
    assertNotNull(r1);
    NodeDocument doc = getDocument(store, id);
    // concurrent create
    Revision c = ns.newRevision();
    UpdateOp op = new UpdateOp(id, true);
    NodeDocument.setDeleted(op, c, false);
    Collision col = newCollision(doc, r1, op, c, ns);
    assertTrue(col.isConflicting());
    // concurrent change
    op = new UpdateOp(id, false);
    op.setMapEntry("p", c, "b");
    col = newCollision(doc, r1, op, c, ns);
    assertTrue(col.isConflicting());
    b = ns.getRoot().builder();
    b.child("test").setProperty("p", "b");
    // test:{p:"b"}
    Revision r2 = merge(ns, b).getRevision(ns.getClusterId());
    assertNotNull(r2);
    doc = getDocument(store, id);
    // concurrent delete
    c = ns.newRevision();
    op = new UpdateOp(id, false);
    op.setDelete(true);
    NodeDocument.setDeleted(op, c, true);
    col = newCollision(doc, r2, op, c, ns);
    assertTrue(col.isConflicting());
    // concurrent conflicting property set
    op = new UpdateOp(id, false);
    op.setMapEntry("p", c, "c");
    col = newCollision(doc, r2, op, c, ns);
    assertTrue(col.isConflicting());
    // concurrent non-conflicting property set
    op = new UpdateOp(id, false);
    op.setMapEntry("q", c, "a");
    col = newCollision(doc, r2, op, c, ns);
    assertFalse(col.isConflicting());
    b = ns.getRoot().builder();
    b.child("test").remove();
    // test (removed)
    Revision r3 = merge(ns, b).getRevision(ns.getClusterId());
    assertNotNull(r3);
    doc = getDocument(store, id);
    // concurrent delete
    c = ns.newRevision();
    op = new UpdateOp(id, false);
    op.setDelete(true);
    NodeDocument.setDeleted(op, c, true);
    col = newCollision(doc, r3, op, c, ns);
    assertTrue(col.isConflicting());
    // concurrent conflicting property set
    op = new UpdateOp(id, false);
    op.setMapEntry("p", c, "d");
    col = newCollision(doc, r3, op, c, ns);
    assertTrue(col.isConflicting());
}
