/**
 * Verify getAtMost when SyncGeneration Policy = ALL
 */
@Test(timeout = 30000)
public void testgetAtMostPolicyALL() throws Exception {
    MockFiller filler = new MockFiller();
    final ValueQueue<String> vq = new ValueQueue<String>(10, 0.1f, 30000, 1, SyncGenerationPolicy.ALL, filler);
    // Trigger a prefill (1) and an async refill (10)
    Assert.assertEquals("test", vq.getNext("k1"));
    Assert.assertEquals(1, filler.getTop().num);
    // Wait for the async task to finish
    waitForRefill(vq, "k1", 10);
    // Refill task should add 10 values to get to a full queue (1 produced by
    // the prefill to the low watermark, 1 consumed by getNext())
    Assert.assertEquals(10, filler.getTop().num);
    // Drain completely, no further refills triggered
    vq.drain("k1");
    // Wait a while to make sure that no async refills are triggered
    try {
        waitForRefill(vq, "k1", 10);
    } catch (TimeoutException ignored) {
    // This is the correct outcome - no refill is expected
    }
    Assert.assertNull(filler.getTop());
    // Synchronous call:
    // 1. Synchronously fill returned list
    // 2. Start another async task to fill the queue in the cache
    Assert.assertEquals("Failed in sync call.", 10, vq.getAtMost("k1", 10).size());
    Assert.assertEquals("Sync call filler got wrong number.", 10, filler.getTop().num);
    // Wait for the async task to finish
    waitForRefill(vq, "k1", 10);
    // Refill task should add 10 values to get to a full queue
    Assert.assertEquals("Failed in async call.", 10, filler.getTop().num);
    // Drain completely after filled by the async thread
    vq.drain("k1");
    Assert.assertEquals("Failed to drain completely after async.", 0, vq.getSize("k1"));
    // Synchronous call
    Assert.assertEquals("Failed to get all 19.", 19, vq.getAtMost("k1", 19).size());
    Assert.assertEquals("Failed in sync call.", 19, filler.getTop().num);
    vq.shutdown();
}
