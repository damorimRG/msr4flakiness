// OAK-3586
@Test
public void resolveMultipleConflictedRevisions() throws Exception {
    MemoryDocumentStore store = new MemoryDocumentStore();
    final DocumentNodeStore ds = builderProvider.newBuilder().setDocumentStore(store).setAsyncDelay(0).getNodeStore();
    DocumentNodeState root = ds.getRoot();
    final DocumentNodeStoreBranch b = ds.createBranch(root);
    NodeBuilder builder = root.builder();
    builder.child("foo");
    b.setRoot(builder.getNodeState());
    final Set<Revision> revisions = new HashSet<Revision>();
    final List<Commit> commits = new ArrayList<Commit>();
    for (int i = 0; i < 10; i++) {
        Revision revision = ds.newRevision();
        Commit commit = ds.newCommit(nop -> {
        }, new RevisionVector(revision), ds.createBranch(root));
        commits.add(commit);
        revisions.add(revision);
    }
    final AtomicBoolean merged = new AtomicBoolean();
    Thread t = new Thread(new Runnable() {

        public void run() {
            try {
                CommitFailedException exception = new ConflictException("Can't merge", revisions).asCommitFailedException();
                b.merge(new HookFailingOnce(exception), CommitInfo.EMPTY);
                merged.set(true);
            } catch (CommitFailedException e) {
                LOG.error("Can't commit", e);
            }
        }
    });
    t.start();
    // 6 x done()
    for (int i = 0; i < 6; i++) {
        assertFalse("The branch can't be merged yet", merged.get());
        ds.done(commits.get(i), false, CommitInfo.EMPTY);
    }
    // 2 x cancel()
    for (int i = 6; i < 8; i++) {
        assertFalse("The branch can't be merged yet", merged.get());
        ds.canceled(commits.get(i));
    }
    // 2 x branch done()
    for (int i = 8; i < 10; i++) {
        assertFalse("The branch can't be merged yet", merged.get());
        ds.done(commits.get(i), true, CommitInfo.EMPTY);
    }
    for (int i = 0; i < 100; i++) {
        if (merged.get()) {
            break;
        }
        Thread.sleep(10);
    }
    assertTrue("The branch should be merged by now", merged.get());
    t.join();
}
