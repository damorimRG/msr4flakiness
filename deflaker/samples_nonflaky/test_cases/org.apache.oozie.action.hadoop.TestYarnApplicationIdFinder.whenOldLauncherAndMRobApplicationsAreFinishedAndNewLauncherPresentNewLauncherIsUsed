@Test
public void whenOldLauncherAndMRobApplicationsAreFinishedAndNewLauncherPresentNewLauncherIsUsed() throws Exception {
    final ApplicationReport oldLauncher = mock(ApplicationReport.class);
    when(oldLauncher.getApplicationType()).thenReturn("Oozie Launcher");
    final ApplicationReport oldMRJob = mock(ApplicationReport.class);
    when(oldMRJob.getApplicationType()).thenReturn("MAPREDUCE");
    final ApplicationId oldMRJobId = mock(ApplicationId.class);
    when(oldMRJobId.toString()).thenReturn("application_1534164756526_0002");
    when(oldMRJob.getApplicationId()).thenReturn(oldMRJobId);
    final ApplicationReport newLauncher = mock(ApplicationReport.class);
    when(newLauncher.getApplicationType()).thenReturn("Oozie Launcher");
    final ApplicationReport newMRJob = mock(ApplicationReport.class);
    when(newMRJob.getApplicationType()).thenReturn("MAPREDUCE");
    final ApplicationId newMRJobId = mock(ApplicationId.class);
    when(newMRJobId.toString()).thenReturn("application_1534164756526_0004");
    when(newMRJob.getApplicationId()).thenReturn(newMRJobId);
    when(reader.read()).thenReturn(new ArrayList<>(Arrays.asList(oldLauncher, oldMRJob, newLauncher, newMRJob)));
    when(workflowActionBean.getExternalId()).thenReturn("application_1534164756526_0003");
    assertEquals("newLauncher should be found", "application_1534164756526_0004", yarnApplicationIdFinder.find());
    when(workflowActionBean.getExternalId()).thenReturn("application_1534164756526_0004");
    assertEquals("newLauncher should be found", "application_1534164756526_0004", yarnApplicationIdFinder.find());
    when(workflowActionBean.getExternalId()).thenReturn("application_1534164756526_0005");
    assertEquals("workflowActionBean.externalId should be found", "application_1534164756526_0005", yarnApplicationIdFinder.find());
}
