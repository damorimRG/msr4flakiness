@Test
public void gcReconcileActiveDeletionMarkCleared() throws Exception {
    Cluster cluster = new Cluster("cluster1");
    BlobStore s = cluster.blobStore;
    BlobIdTracker tracker = (BlobIdTracker) ((BlobTrackingStore) s).getTracker();
    // Simulate active deletion before the init to ensure that the references also cleared
    List<String> addlAdded = doActiveDelete(cluster.nodeStore, (DataStoreBlobStore) cluster.blobStore, tracker, folder, 0, 2);
    DataStoreState state = init(cluster.nodeStore, 0);
    // Force a snapshot of the tracker to refresh
    File f = folder.newFile();
    tracker.remove(f, BlobTracker.Options.ACTIVE_DELETION);
    List<String> addlPresent = Lists.newArrayList(addlAdded.get(2), addlAdded.get(3));
    List<String> activeDeleted = Lists.newArrayList(addlAdded.get(0), addlAdded.get(1));
    state.blobsPresent.addAll(addlPresent);
    state.blobsAdded.addAll(addlPresent);
    cluster.gc.collectGarbage(false);
    Set<String> existingAfterGC = iterate(s);
    // Check the state of the blob store after gc
    assertEquals(state.blobsPresent, existingAfterGC);
    // Tracked blobs should reflect deletions after gc
    assertEquals(state.blobsPresent, retrieveTracked(tracker));
    // Check that the delete tracker is refreshed
    assertEquals(Sets.newHashSet(), retrieveActiveDeleteTracked(tracker, folder));
}
