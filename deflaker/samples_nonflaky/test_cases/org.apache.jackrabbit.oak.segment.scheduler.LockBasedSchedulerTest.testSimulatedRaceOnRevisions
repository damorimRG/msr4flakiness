/**
 * OAK-7162
 *
 * This test guards against race conditions which may happen when the head
 * state in {@link Revisions} is changed from outside the scheduler. If a
 * race condition happens at that point, data from a single commit will be
 * lost.
 */
@Test
public void testSimulatedRaceOnRevisions() throws Exception {
    final MemoryStore ms = new MemoryStore();
    StatisticsProvider statsProvider = StatisticsProvider.NOOP;
    SegmentNodeStoreStats stats = new SegmentNodeStoreStats(statsProvider);
    final LockBasedScheduler scheduler = LockBasedScheduler.builder(ms.getRevisions(), ms.getReader(), stats).build();
    final RecordId initialHead = ms.getRevisions().getHead();
    ExecutorService executorService = newFixedThreadPool(10);
    final AtomicInteger count = new AtomicInteger();
    final Random rand = new Random();
    try {
        Callable<PropertyState> commitTask = new Callable<PropertyState>() {

            @Override
            public PropertyState call() throws Exception {
                String property = "prop" + count.incrementAndGet();
                Commit commit = createCommit(scheduler, property, "value");
                SegmentNodeState result = (SegmentNodeState) scheduler.schedule(commit);
                return result.getProperty(property);
            }
        };
        Callable<Void> parallelTask = new Callable<Void>() {

            @Override
            public Void call() throws Exception {
                Thread.sleep(rand.nextInt(10));
                ms.getRevisions().setHead(ms.getRevisions().getHead(), initialHead);
                return null;
            }
        };
        List<Future<?>> results = newArrayList();
        for (int i = 0; i < 100; i++) {
            results.add(executorService.submit(commitTask));
            executorService.submit(parallelTask);
        }
        for (Future<?> result : results) {
            assertNotNull("PropertyState must not be null! The corresponding commit got lost because of a race condition.", result.get());
        }
    } finally {
        new ExecutorCloser(executorService).close();
    }
}
