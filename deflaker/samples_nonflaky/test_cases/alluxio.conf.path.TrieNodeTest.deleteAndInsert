@Test
public void deleteAndInsert() {
    TrieNode node = new TrieNode();
    TrieNode a = node.insert("/a");
    TrieNode b = node.insert("/a/b");
    Assert.assertTrue(node.search("/a/b").contains(b));
    TrieNode b2 = node.deleteIf("/a/b", n -> {
        Assert.assertEquals(b, n);
        return true;
    });
    Assert.assertEquals(b, b2);
    Assert.assertFalse(node.search("/a/b").contains(b));
    TrieNode b3 = node.insert("/a/b");
    Assert.assertTrue(node.search("/a/b").contains(b3));
    Assert.assertTrue(node.search("/a").contains(a));
    Assert.assertTrue(node.search("/a/b").contains(a));
    TrieNode a2 = node.deleteIf("/a", n -> {
        Assert.assertEquals(a, n);
        return true;
    });
    Assert.assertEquals(a, a2);
    Assert.assertFalse(node.search("/a/b").contains(a));
    Assert.assertFalse(node.search("/a").contains(a));
    Assert.assertTrue(node.search("/a/b").contains(b3));
    TrieNode a3 = node.insert("/a");
    Assert.assertTrue(node.search("/a/b").contains(b3));
    Assert.assertTrue(node.search("/a").contains(a3));
    Assert.assertTrue(node.search("/a/b").contains(a3));
}
