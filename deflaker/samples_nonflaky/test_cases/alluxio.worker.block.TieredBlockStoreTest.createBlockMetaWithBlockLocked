/**
 * Tests that when creating a block, if the space of the target location is currently taken by
 * another block being locked, this creation operation will fail until the lock released.
 */
@Test
public void createBlockMetaWithBlockLocked() throws Exception {
    TieredBlockStoreTestUtils.cache(SESSION_ID1, BLOCK_ID1, BLOCK_SIZE, mTestDir1, mMetaManager, mEvictor);
    // session1 locks a block first
    long lockId = mBlockStore.lockBlock(SESSION_ID1, BLOCK_ID1);
    // Expect an exception because no eviction plan is feasible
    mThrown.expect(WorkerOutOfSpaceException.class);
    mThrown.expectMessage(ExceptionMessage.NO_SPACE_FOR_BLOCK_ALLOCATION_TIMEOUT.getMessage(mTestDir1.getCapacityBytes(), mTestDir1.toBlockStoreLocation(), FREE_SPACE_TIMEOUT_MS, TEMP_BLOCK_ID));
    mBlockStore.createBlock(SESSION_ID1, TEMP_BLOCK_ID, mTestDir1.toBlockStoreLocation(), mTestDir1.getCapacityBytes());
    // Expect createBlockMeta to succeed after unlocking this block.
    mBlockStore.unlockBlock(lockId);
    mBlockStore.createBlock(SESSION_ID1, TEMP_BLOCK_ID, mTestDir1.toBlockStoreLocation(), mTestDir1.getCapacityBytes());
    assertEquals(0, mTestDir1.getAvailableBytes());
}
