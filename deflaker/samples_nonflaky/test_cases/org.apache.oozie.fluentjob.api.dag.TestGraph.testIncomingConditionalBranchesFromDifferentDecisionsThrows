@Test
public void testIncomingConditionalBranchesFromDifferentDecisionsThrows() {
    final Node a = MapReduceActionBuilder.create().withName("A").build();
    final Node b = MapReduceActionBuilder.create().withName("B").withParent(a).build();
    final Node c = MapReduceActionBuilder.create().withName("C").withParent(a).build();
    final Node d = MapReduceActionBuilder.create().withName("D").withParent(a).build();
    MapReduceActionBuilder.create().withName("E").withParentWithCondition(c, "condition_goto_E").build();
    final Node f = MapReduceActionBuilder.create().withName("F").withParentDefaultConditional(c).build();
    final Node g = MapReduceActionBuilder.create().withName("G").withParentWithCondition(d, "condition_goto_G").build();
    final Node h = MapReduceActionBuilder.create().withName("H").withParentDefaultConditional(d).build();
    MapReduceActionBuilder.create().withName("I").withParent(b).withParent(f).withParent(g).build();
    MapReduceActionBuilder.create().withName("J").withParent(h).build();
    final Workflow workflow = new WorkflowBuilder().withName("incoming-conditional-branches-from-different-decisions").withDagContainingNode(a).build();
    // nodesToPng.withWorkflow(workflow);
    // TODO: We might choose to implement it later without an exception.
    expectedException.expect(IllegalStateException.class);
    new Graph(workflow);
}
