@Test
public void testClassRegularClass() throws Exception {
    final Class<?> tokenType = Class.forName("com.puppycrawl.tools.checkstyle.checks.javadoc." + "JavadocMethodCheck$Token");
    final Class<?> regularClassType = Class.forName("com.puppycrawl.tools.checkstyle.checks.javadoc." + "JavadocMethodCheck$RegularClass");
    final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(tokenType, String.class, JavadocMethodCheck.class);
    regularClassConstructor.setAccessible(true);
    try {
        regularClassConstructor.newInstance(null, "", new JavadocMethodCheck());
        fail("Exception is expected");
    } catch (InvocationTargetException ex) {
        assertTrue(ex.getCause() instanceof IllegalArgumentException, "Invalid exception class, expected: IllegalArgumentException.class");
        assertEquals("ClassInfo's name should be non-null", ex.getCause().getMessage(), "Invalid exception message");
    }
    final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class, int.class);
    final Object token = tokenConstructor.newInstance("blablabla", 1, 1);
    final JavadocMethodCheck methodCheck = new JavadocMethodCheck();
    final Object regularClass = regularClassConstructor.newInstance(token, "sur", methodCheck);
    final Method toString = regularClass.getClass().getDeclaredMethod("toString");
    toString.setAccessible(true);
    final String result = (String) toString.invoke(regularClass);
    final String expected = "RegularClass[name=Token[blablabla(1x1)], in class='sur', check=" + methodCheck.hashCode() + "]";
    assertEquals(expected, result, "Invalid toString result");
}
