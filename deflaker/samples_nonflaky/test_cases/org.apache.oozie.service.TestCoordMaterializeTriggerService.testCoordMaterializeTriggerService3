public void testCoordMaterializeTriggerService3() throws Exception {
    Services.get().destroy();
    setSystemProperty(CoordMaterializeTriggerService.CONF_MATERIALIZATION_SYSTEM_LIMIT, "1");
    services = new Services();
    services.init();
    jpaService = services.get(JPAService.class);
    Date start = new Date();
    Date end = new Date(start.getTime() + 3600 * 5 * 1000);
    CoordinatorJobBean job1 = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, start, end, false, false, 1);
    addRecordToCoordActionTable(job1.getId(), 2, CoordinatorAction.Status.WAITING, "coord-action-get.xml", 0);
    job1.setMatThrottling(1);
    CoordJobQueryExecutor.getInstance().executeUpdate(CoordJobQuery.UPDATE_COORD_JOB, job1);
    CoordinatorJobBean job2 = addRecordToCoordJobTable(CoordinatorJob.Status.PREP, start, end, false, false, 0);
    CoordinatorJobBean job3 = addRecordToCoordJobTable(CoordinatorJob.Status.PREP, start, end, false, false, 0);
    Runnable runnable = new CoordMaterializeTriggerRunnable(3600, 300);
    runnable.run();
    waitForStatus(10000, job2, CoordinatorJob.Status.RUNNING);
    // second job is beyond limit but still should be picked up
    job2 = jpaService.execute(new CoordJobGetJPAExecutor(job2.getId()));
    assertEquals(CoordinatorJob.Status.RUNNING, job2.getStatus());
    // third job not picked up because limit iteration only twice
    job3 = jpaService.execute(new CoordJobGetJPAExecutor(job3.getId()));
    assertEquals(CoordinatorJob.Status.PREP, job3.getStatus());
}
