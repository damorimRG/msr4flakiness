@Test
public void close() throws Exception {
    // write the mocking script
    peer.sendFrame().settings(new Settings());
    // ACK
    peer.acceptFrame();
    // SYN_STREAM
    peer.acceptFrame();
    // GOAWAY
    peer.acceptFrame();
    // RST_STREAM
    peer.acceptFrame();
    peer.play();
    // play it back
    Http2Connection connection = connect(peer);
    Http2Stream stream = connection.newStream(headerEntries("a", "android"), false);
    assertThat(connection.openStreamCount()).isEqualTo(1);
    connection.close();
    assertThat(connection.openStreamCount()).isEqualTo(0);
    try {
        connection.newStream(headerEntries("b", "banana"), false);
        fail();
    } catch (ConnectionShutdownException expected) {
    }
    BufferedSink sink = Okio.buffer(stream.getSink());
    try {
        sink.writeByte(0);
        sink.flush();
        fail();
    } catch (IOException expected) {
        assertThat(expected.getMessage()).isEqualTo("stream finished");
    }
    try {
        stream.getSource().read(new Buffer(), 1);
        fail();
    } catch (IOException expected) {
        assertThat(expected.getMessage()).isEqualTo("stream was reset: CANCEL");
    }
    // verify the peer received what was expected
    InFrame synStream = peer.takeFrame();
    assertThat(synStream.type).isEqualTo(Http2.TYPE_HEADERS);
    InFrame goaway = peer.takeFrame();
    assertThat(goaway.type).isEqualTo(Http2.TYPE_GOAWAY);
    InFrame rstStream = peer.takeFrame();
    assertThat(rstStream.type).isEqualTo(Http2.TYPE_RST_STREAM);
    assertThat(rstStream.streamId).isEqualTo(3);
}
