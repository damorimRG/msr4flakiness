/**
 * Tests that the default implementation of range based
 * {@code findPrincipals} methods of PrincipalProvider work properly. See
 * OAK-7994
 */
@Test
public void testRangeDefault() {
    List<? extends Principal> pps = ImmutableList.of(new PrincipalImpl("p0"), new PrincipalImpl("p1"), new PrincipalImpl("p2"));
    PrincipalProvider pp = new PrincipalProvider() {

        @Override
        @NotNull
        public Set<? extends Principal> getPrincipals(@NotNull String userID) {
            return Collections.emptySet();
        }

        @Override
        @Nullable
        public Principal getPrincipal(@NotNull String principalName) {
            return null;
        }

        @Override
        @NotNull
        public Iterator<? extends Principal> findPrincipals(int searchType) {
            return pps.iterator();
        }

        @Override
        @NotNull
        public Iterator<? extends Principal> findPrincipals(@Nullable String nameHint, int searchType) {
            return pps.iterator();
        }
    };
    List<String> expected = getNames(pps.iterator());
    for (int offset = 0; offset < expected.size() + 1; offset++) {
        for (int limit = -1; limit < expected.size() + 2; limit++) {
            int to = expected.size();
            if (limit >= 0) {
                to = Math.min(offset + limit, to);
            }
            List<String> sub = expected.subList(offset, to);
            Iterator<? extends Principal> i0 = pp.findPrincipals(null, false, PrincipalManager.SEARCH_TYPE_ALL, offset, limit);
            assertEquals(sub, getNames(i0));
            Iterator<? extends Principal> i1 = pp.findPrincipals("", false, PrincipalManager.SEARCH_TYPE_ALL, offset, limit);
            assertEquals(sub, getNames(i1));
        }
    }
}
