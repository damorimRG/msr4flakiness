public void testWfJobsGetWithCreatedTime() throws Exception {
    JPAService jpaService = Services.get().get(JPAService.class);
    Date createdTime1 = DateUtils.parseDateUTC("2012-01-01T10:00Z");
    Date createdTime2 = DateUtils.parseDateUTC("2012-02-01T10:00Z");
    Date createdTime3 = DateUtils.parseDateUTC("2012-03-01T10:00Z");
    Date createdTime4 = DateUtils.parseDateUTC("2012-04-01T10:00Z");
    Date createdTime5 = org.apache.commons.lang3.time.DateUtils.addHours(new Date(), -5);
    WorkflowJobBean wrkJob = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    wrkJob.setCreatedTime(createdTime1);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    wrkJob = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    wrkJob.setCreatedTime(createdTime2);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    wrkJob = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    wrkJob.setCreatedTime(createdTime3);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    wrkJob = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    wrkJob.setCreatedTime(createdTime4);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    wrkJob = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    wrkJob.setCreatedTime(createdTime5);
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW, wrkJob);
    // filter 2012-02-01T00:00Z <= createdTimeStamp <= 2012-03-02T00:00Z
    Map<String, List<String>> filter = new HashMap<String, List<String>>();
    List<String> timeList = new ArrayList<String>();
    timeList.add("2012-02-01T00:00Z");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    timeList = new ArrayList<String>();
    timeList.add("2012-03-02T00:00Z");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    WorkflowsJobGetJPAExecutor wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    WorkflowsInfo wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(2, wfInfo.getWorkflows().size());
    for (WorkflowJobBean jobBean : wfInfo.getWorkflows()) {
        assertTrue(jobBean.getCreatedTime().equals(createdTime2) || jobBean.getCreatedTime().equals(createdTime3));
    }
    // createdTime specified in wrong format
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    // not correct ISO8601_UTC_MASK format
    timeList.add("2012-02-01T00:00");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    try {
        wfInfo = jpaService.execute(wfGetCmd);
    } catch (XException e) {
        assertEquals(ErrorCode.E0302, e.getErrorCode());
    }
    // filter 2012-04-01T00:00Z <= createdTimeStamp
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("2012-04-01T00:00Z");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(2, wfInfo.getWorkflows().size());
    for (WorkflowJobBean jobBean : wfInfo.getWorkflows()) {
        assertTrue(jobBean.getCreatedTime().equals(createdTime4) || jobBean.getCreatedTime().equals(createdTime5));
    }
    // filter 2012-02-01T00:00Z >= createdTimeStamp
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("2012-02-01T00:00Z");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(1, wfInfo.getWorkflows().size());
    assertTrue(wfInfo.getWorkflows().get(0).getCreatedTime().equals(createdTime1));
    // when createdTimeStamp specified multiple times
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("2012-02-01T00:00Z");
    timeList.add("2012-04-01T00:00Z");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    try {
        wfInfo = jpaService.execute(wfGetCmd);
    } catch (XException e) {
        assertEquals(ErrorCode.E0302, e.getErrorCode());
    }
    // filter createdTimeStamp > currentTime - 2 days
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-2d");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(1, wfInfo.getWorkflows().size());
    assertTrue(wfInfo.getWorkflows().get(0).getCreatedTime().equals(createdTime5));
    // filter createdTimeStamp > currentTime - 10 hour
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-10h");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(1, wfInfo.getWorkflows().size());
    assertTrue(wfInfo.getWorkflows().get(0).getCreatedTime().equals(createdTime5));
    // filter createdTimeStamp > currentTime - 600 min
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-600m");
    filter.put(OozieClient.FILTER_CREATED_TIME_START, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(1, wfInfo.getWorkflows().size());
    assertTrue(wfInfo.getWorkflows().get(0).getCreatedTime().equals(createdTime5));
    // filter createdTimeStamp < currentTime - 3 days
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-3d");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(4, wfInfo.getWorkflows().size());
    for (WorkflowJobBean jobBean : wfInfo.getWorkflows()) {
        assertTrue(jobBean.getCreatedTime().equals(createdTime1) || jobBean.getCreatedTime().equals(createdTime2) || jobBean.getCreatedTime().equals(createdTime3) || jobBean.getCreatedTime().equals(createdTime4));
    }
    // filter createdTimeStamp < currentTime - 2 hours
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-2h");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(5, wfInfo.getWorkflows().size());
    for (WorkflowJobBean jobBean : wfInfo.getWorkflows()) {
        assertTrue(jobBean.getCreatedTime().equals(createdTime1) || jobBean.getCreatedTime().equals(createdTime2) || jobBean.getCreatedTime().equals(createdTime3) || jobBean.getCreatedTime().equals(createdTime4) || jobBean.getCreatedTime().equals(createdTime5));
    }
    // filter createdTimeStamp < currentTime - 60 min
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-60m");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    wfInfo = jpaService.execute(wfGetCmd);
    assertNotNull(wfInfo);
    assertEquals(5, wfInfo.getWorkflows().size());
    for (WorkflowJobBean jobBean : wfInfo.getWorkflows()) {
        assertTrue(jobBean.getCreatedTime().equals(createdTime1) || jobBean.getCreatedTime().equals(createdTime2) || jobBean.getCreatedTime().equals(createdTime3) || jobBean.getCreatedTime().equals(createdTime4) || jobBean.getCreatedTime().equals(createdTime5));
    }
    // when offset is in wrong format
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("-5M");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    try {
        wfInfo = jpaService.execute(wfGetCmd);
    } catch (XException e) {
        assertEquals(ErrorCode.E0302, e.getErrorCode());
    }
    // when offset is in wrong format
    filter = new HashMap<String, List<String>>();
    timeList = new ArrayList<String>();
    timeList.add("5D");
    filter.put(OozieClient.FILTER_CREATED_TIME_END, timeList);
    wfGetCmd = new WorkflowsJobGetJPAExecutor(filter, 1, 10);
    try {
        wfInfo = jpaService.execute(wfGetCmd);
    } catch (XException e) {
        assertEquals(ErrorCode.E0302, e.getErrorCode());
    }
}
