@Test
public void testLogFormat() throws Exception {
    final LogbackClassicRequestLogFactory factory = new LogbackClassicRequestLogFactory();
    @SuppressWarnings("unchecked")
    final Appender<ILoggingEvent> appender = mock(Appender.class);
    final Request request = mock(Request.class);
    final Response response = mock(Response.class, RETURNS_DEEP_STUBS);
    final HttpChannelState channelState = mock(HttpChannelState.class);
    factory.setAppenders(Collections.singletonList((context, applicationName, layoutFactory, levelFilterFactory, asyncAppenderFactory) -> appender));
    final String tz = TimeZone.getAvailableIDs((int) TimeUnit.HOURS.toMillis(-5))[0];
    factory.setTimeZone(TimeZone.getTimeZone(tz));
    CustomRequestLog logger = null;
    try {
        when(channelState.isInitial()).thenReturn(true);
        when(request.getRemoteHost()).thenReturn("10.0.0.1");
        // Jetty log format compares against System.currentTimeMillis, so there
        // isn't a way for us to set our own clock
        when(request.getTimeStamp()).thenReturn(System.currentTimeMillis());
        when(request.getMethod()).thenReturn("GET");
        when(request.getRequestURI()).thenReturn("/test/things");
        when(request.getProtocol()).thenReturn("HTTP/1.1");
        when(request.getHttpChannelState()).thenReturn(channelState);
        when(response.getCommittedMetaData().getStatus()).thenReturn(200);
        when(response.getHttpChannel().getBytesWritten()).thenReturn(8290L);
        final ArgumentCaptor<ILoggingEvent> captor = ArgumentCaptor.forClass(ILoggingEvent.class);
        logger = (CustomRequestLog) factory.build("my-app");
        logger.log(request, response);
        verify(appender, timeout(1000)).doAppend(captor.capture());
        final ILoggingEvent event = captor.getValue();
        assertThat(event.getFormattedMessage()).startsWith("10.0.0.1").doesNotContain("%").contains("\"GET /test/things HTTP/1.1\"").contains("-0500");
    } catch (Exception e) {
        if (logger != null) {
            logger.stop();
        }
        throw e;
    }
}
