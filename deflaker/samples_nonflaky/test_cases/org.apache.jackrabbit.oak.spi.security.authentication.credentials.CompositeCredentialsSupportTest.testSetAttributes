@Test
public void testSetAttributes() {
    SimpleCredentials sc = new SimpleCredentials("uid", new char[0]);
    TestCredentials tc = new TestCredentials();
    Credentials dummy = new Credentials() {
    };
    Map<String, ?> attributesS = credentialsSupport.getAttributes(sc);
    assertNotNull(attributesS);
    assertTrue(attributesS.isEmpty());
    Map<String, ?> attributesT = credentialsSupport.getAttributes(tc);
    assertNotNull(attributesT);
    assertTrue(attributesT.isEmpty());
    Map<String, ?> attributesD = credentialsSupport.getAttributes(dummy);
    assertNotNull(attributesD);
    assertTrue(attributesD.isEmpty());
    Map<String, ?> expectedS = ImmutableMap.of("a", "a", "b", Boolean.TRUE, "c", new TestCredentials());
    assertTrue(credentialsSupport.setAttributes(sc, expectedS));
    Map<String, ?> expectedT = ImmutableMap.of("test", "Test1CredentialsSupport");
    assertTrue(credentialsSupport.setAttributes(tc, expectedT));
    assertFalse(credentialsSupport.setAttributes(dummy, ImmutableMap.of("none", "none")));
    attributesS = credentialsSupport.getAttributes(sc);
    for (Map.Entry<String, ?> entry : expectedS.entrySet()) {
        assertEquals(entry.getValue(), attributesS.get(entry.getKey()));
    }
    attributesT = credentialsSupport.getAttributes(tc);
    for (Map.Entry<String, ?> entry : expectedT.entrySet()) {
        assertEquals(entry.getValue(), attributesT.get(entry.getKey()));
    }
    attributesD = credentialsSupport.getAttributes(dummy);
    assertNotNull(attributesD);
    assertTrue(attributesD.isEmpty());
}
