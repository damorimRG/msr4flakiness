@Test
public void quorumInfo() throws Exception {
    mCluster = MultiProcessCluster.newBuilder(PortCoordination.QUORUM_SHELL_INFO).setClusterName("QuorumShellInfo").setNumMasters(3).setNumWorkers(0).addProperty(PropertyKey.MASTER_JOURNAL_TYPE, JournalType.EMBEDDED.toString()).addProperty(PropertyKey.MASTER_JOURNAL_FLUSH_TIMEOUT_MS, "5min").addProperty(PropertyKey.MASTER_EMBEDDED_JOURNAL_ELECTION_TIMEOUT, "750ms").addProperty(PropertyKey.MASTER_EMBEDDED_JOURNAL_HEARTBEAT_INTERVAL, "250ms").build();
    mCluster.start();
    String output;
    try (FileSystemAdminShell shell = new FileSystemAdminShell(ServerConfiguration.global())) {
        // Validate quorum state is dumped as expected.
        mOutput.reset();
        shell.run("journal", "quorum", "info", "-domain", "MASTER");
        output = mOutput.toString().trim();
        Assert.assertTrue(output.contains(String.format(QuorumInfoCommand.OUTPUT_HEADER_DOMAIN, JournalDomain.MASTER.name())));
        Assert.assertTrue(output.contains(String.format(QuorumInfoCommand.OUTPUT_HEADER_QUORUM_SIZE, 3)));
        String journalAddresses = ServerConfiguration.get(PropertyKey.MASTER_EMBEDDED_JOURNAL_ADDRESSES);
        for (String address : journalAddresses.split(",")) {
            String hostName = address.substring(0, address.indexOf(":"));
            String port = address.substring(address.indexOf(":") + 1);
            Assert.assertTrue(output.contains(String.format(QuorumInfoCommand.OUTPUT_SERVER_INFO, QuorumServerState.AVAILABLE.name(), hostName, port)));
        }
        // Validate quorum state is updated as expected after a fail-over.
        mCluster.stopMaster(0);
        // Wait for up to 2 election timeouts until quorum notices the change.
        // Use shell "quorum info" for validation.
        CommonUtils.waitFor("Quorum noticing change.", () -> {
            mOutput.reset();
            shell.run("journal", "quorum", "info", "-domain", "MASTER");
            return mOutput.toString().trim().contains(QuorumServerState.UNAVAILABLE.name());
        }, WaitForOptions.defaults().setTimeoutMs(2 * (int) ServerConfiguration.getMs(PropertyKey.MASTER_EMBEDDED_JOURNAL_ELECTION_TIMEOUT)));
    }
    mCluster.notifySuccess();
}
