@Test
public void testChildOrderWithoutPropertyReadAccess() throws Exception {
    root.getTree("/a").setOrderableChildren(true);
    root.getTree("/a/bb").orderBefore("b");
    root.commit();
    setupPermission("/", testPrincipal, true, PrivilegeConstants.REP_READ_NODES);
    Root testRoot = getTestRoot();
    Tree aTree = testRoot.getTree("/a");
    // verify that properties cannot be read:
    assertFalse(aTree.hasProperty(JcrConstants.JCR_PRIMARYTYPE));
    List<String> expected = ImmutableList.of("/a/bb", "/a/b");
    Iterable<String> childPaths = Iterables.transform(aTree.getChildren(), new Function<Tree, String>() {

        @Nullable
        @Override
        public String apply(Tree input) {
            return input.getPath();
        }
    });
    assertTrue(childPaths.toString(), Iterables.elementsEqual(expected, childPaths));
}
