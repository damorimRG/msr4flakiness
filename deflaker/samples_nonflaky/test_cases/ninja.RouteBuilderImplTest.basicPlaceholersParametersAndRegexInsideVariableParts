@Test
public void basicPlaceholersParametersAndRegexInsideVariableParts() {
    // test that parameter parsing works in conjunction with
    // regex expressions...
    routeBuilder.GET().route("/assets/{file: .*}");
    Route route = buildRoute(routeBuilder);
    String pathUnderTest = "/assets/css/app.css";
    assertTrue(route.matches("GET", pathUnderTest));
    Map<String, String> map = route.getPathParametersEncoded(pathUnderTest);
    assertEquals(1, map.entrySet().size());
    assertEquals("css/app.css", map.get("file"));
    pathUnderTest = "/assets/javascripts/main.js";
    assertTrue(route.matches("GET", pathUnderTest));
    map = route.getPathParametersEncoded(pathUnderTest);
    assertEquals(1, map.entrySet().size());
    assertEquals("javascripts/main.js", map.get("file"));
    pathUnderTest = "/assets/robots.txt";
    assertTrue(route.matches("GET", pathUnderTest));
    map = route.getPathParametersEncoded(pathUnderTest);
    assertEquals(1, map.entrySet().size());
    assertEquals("robots.txt", map.get("file"));
    // multiple parameter parsing with regex expressions
    routeBuilder = new RouteBuilderImpl(ninjaProperties, ninjaBaseDirectoryResolver);
    routeBuilder.GET().route("/{name: .+}/photos/{id: [0-9]+}");
    route = buildRoute(routeBuilder);
    pathUnderTest = "/John/photos/2201";
    assertTrue(route.matches("GET", pathUnderTest));
    assertFalse(route.matches("GET", "John/photos/first"));
    map = route.getPathParametersEncoded(pathUnderTest);
    assertEquals(2, map.size());
    assertEquals("John", map.get("name"));
    assertEquals("2201", map.get("id"));
}
