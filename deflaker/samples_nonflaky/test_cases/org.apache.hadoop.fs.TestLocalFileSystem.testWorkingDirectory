/**
 * Test the capability of setting the working directory.
 */
@Test
public void testWorkingDirectory() throws IOException {
    Path origDir = fileSys.getWorkingDirectory();
    Path subdir = new Path(TEST_ROOT_DIR, "new");
    try {
        // make sure it doesn't already exist
        assertTrue(!fileSys.exists(subdir));
        // make it and check for it
        assertTrue(fileSys.mkdirs(subdir));
        assertTrue(fileSys.isDirectory(subdir));
        fileSys.setWorkingDirectory(subdir);
        // create a directory and check for it
        Path dir1 = new Path("dir1");
        assertTrue(fileSys.mkdirs(dir1));
        assertTrue(fileSys.isDirectory(dir1));
        // delete the directory and make sure it went away
        fileSys.delete(dir1, true);
        assertTrue(!fileSys.exists(dir1));
        // create files and manipulate them.
        Path file1 = new Path("file1");
        Path file2 = new Path("sub/file2");
        String contents = writeFile(fileSys, file1, 1);
        fileSys.copyFromLocalFile(file1, file2);
        assertTrue(fileSys.exists(file1));
        assertTrue(fileSys.isFile(file1));
        cleanupFile(fileSys, file2);
        fileSys.copyToLocalFile(file1, file2);
        cleanupFile(fileSys, file2);
        // try a rename
        fileSys.rename(file1, file2);
        assertTrue(!fileSys.exists(file1));
        assertTrue(fileSys.exists(file2));
        fileSys.rename(file2, file1);
        // try reading a file
        InputStream stm = fileSys.open(file1);
        byte[] buffer = new byte[3];
        int bytesRead = stm.read(buffer, 0, 3);
        assertEquals(contents, new String(buffer, 0, bytesRead));
        stm.close();
    } finally {
        fileSys.setWorkingDirectory(origDir);
    }
}
