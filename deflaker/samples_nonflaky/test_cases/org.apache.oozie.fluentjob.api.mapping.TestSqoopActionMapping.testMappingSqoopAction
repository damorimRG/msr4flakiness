@Test
public void testMappingSqoopAction() {
    final String resourceManager = "${resourceManager}";
    final String nameNode = "${nameNode}";
    final List<String> args = Arrays.asList("arg1", "arg2");
    final SqoopActionBuilder builder = SqoopActionBuilder.create();
    builder.withResourceManager(resourceManager).withNameNode(nameNode).withPrepare(new PrepareBuilder().withDelete("/path/to/delete").withMkdir("/path/to/mkdir").build()).withLauncher(new LauncherBuilder().withMemoryMb(1024).withVCores(2).withQueue(DEFAULT).withSharelib(DEFAULT).withViewAcl(DEFAULT).withModifyAcl(DEFAULT).build()).withCommand(DEFAULT);
    for (final String arg : args) {
        builder.withArgument(arg);
    }
    builder.withConfigProperty("propertyName1", "propertyValue1").withConfigProperty("propertyName2", "propertyValue2");
    final SqoopAction action = builder.build();
    final ACTION sqoop = DozerBeanMapperSingleton.instance().map(action, ACTION.class);
    assertEquals(resourceManager, sqoop.getResourceManager());
    assertEquals(nameNode, sqoop.getNameNode());
    assertNotNull(sqoop.getPrepare());
    assertEquals("/path/to/delete", sqoop.getPrepare().getDelete().get(0).getPath());
    assertEquals("/path/to/mkdir", sqoop.getPrepare().getMkdir().get(0).getPath());
    assertNotNull(sqoop.getConfiguration());
    assertEquals(args, sqoop.getArg());
    assertEquals(1024L, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(0).getValue());
    assertEquals(2L, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(1).getValue());
    assertEquals(DEFAULT, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(2).getValue());
    assertEquals(DEFAULT, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(3).getValue());
    assertEquals(DEFAULT, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(4).getValue());
    assertEquals(DEFAULT, sqoop.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(5).getValue());
    assertEquals(DEFAULT, sqoop.getCommand());
}
