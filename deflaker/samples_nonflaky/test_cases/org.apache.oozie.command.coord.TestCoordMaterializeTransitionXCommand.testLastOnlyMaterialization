public void testLastOnlyMaterialization() throws Exception {
    long now = System.currentTimeMillis();
    // 3 hours ago
    Date startTime = DateUtils.toDate(new Timestamp(now - 180 * 60 * 1000));
    // 3 hours from now
    Date endTime = DateUtils.toDate(new Timestamp(now + 180 * 60 * 1000));
    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, startTime, endTime, null, -1, "10", CoordinatorJob.Execution.LAST_ONLY);
    // This would normally materialize the throttle amount and within a 1 hour window; however, with LAST_ONLY this should
    // ignore those parameters and materialize everything in the past
    new CoordMaterializeTransitionXCommand(job.getId(), hoursToSeconds(1)).call();
    checkCoordJobs(job.getId(), CoordinatorJob.Status.RUNNING);
    CoordinatorActionBean.Status[] expectedStatuses = new CoordinatorActionBean.Status[19];
    Arrays.fill(expectedStatuses, CoordinatorActionBean.Status.WAITING);
    checkCoordActionsStatus(job.getId(), expectedStatuses);
    // now
    startTime = DateUtils.toDate(new Timestamp(now));
    job = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, startTime, endTime, null, -1, "10", CoordinatorJob.Execution.LAST_ONLY);
    // We're starting from "now" this time (i.e. present/future), so it should materialize things normally
    new CoordMaterializeTransitionXCommand(job.getId(), hoursToSeconds(1)).call();
    checkCoordJobs(job.getId(), CoordinatorJob.Status.RUNNING);
    expectedStatuses = new CoordinatorActionBean.Status[6];
    Arrays.fill(expectedStatuses, CoordinatorActionBean.Status.WAITING);
    checkCoordActionsStatus(job.getId(), expectedStatuses);
}
