@Test
public void testQueueDump() {
    CallableWrapper<?> pendingCallable = mock(CallableWrapper.class);
    CallableWrapper<?> waitingCallable = mock(CallableWrapper.class);
    ScheduledXCallable delayedXCallable = mock(ScheduledXCallable.class);
    @SuppressWarnings("unchecked")
    AccessibleRunnableScheduledFuture<ScheduledXCallable> asrf = mock(AccessibleRunnableScheduledFuture.class);
    Mockito.<CallableWrapper<?>>when(delayedXCallable.getCallableWrapper()).thenReturn(waitingCallable);
    when(asrf.getTask()).thenReturn(delayedXCallable);
    when(pendingCallable.toString()).thenReturn("pendingCallable");
    when(waitingCallable.toString()).thenReturn("waitingCallable");
    when(callableWrapper.toString()).thenReturn("callableWrapper");
    priorityBlockingQueue.add(callableWrapper);
    delayQueue.add(asrf);
    pendingCommandsPerType.put(DEFAULT_TYPE, Sets.newHashSet(pendingCallable));
    List<String> queueDump = asyncExecutor.getQueueDump();
    assertEquals("Size", 3, queueDump.size());
    assertTrue("PendingCallable not found", queueDump.contains("pendingCallable"));
    assertTrue("WaitingCallable not found", queueDump.contains("waitingCallable"));
    assertTrue("CallableWrapper not found", queueDump.contains("callableWrapper"));
}
