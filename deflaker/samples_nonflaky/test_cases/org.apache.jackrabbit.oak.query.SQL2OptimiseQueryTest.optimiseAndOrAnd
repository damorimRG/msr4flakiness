/**
 * ensure that an optimisation is available for the provided queries.
 *
 * @throws ParseException
 */
@Test
public void optimiseAndOrAnd() throws ParseException {
    optimiseAndOrAnd("select * from [nt:unstructured] as [c] " + "where isdescendantnode('/tmp') " + "and ([a]=1 or [b]=2) and ([c]=3 or [d]=4)", "(isdescendantnode(c, /tmp)) and (d = 4) and (b = 2), " + "(isdescendantnode(c, /tmp)) and (d = 4) and (a = 1), " + "(isdescendantnode(c, /tmp)) and (c = 3) and (b = 2), " + "(isdescendantnode(c, /tmp)) and (c = 3) and (a = 1)");
    optimiseAndOrAnd("select * from [nt:unstructured] as [c] " + "where ([a]=1 or [b]=2) and ([x]=3 or [y]=4)", "(y = 4) and (b = 2), " + "(y = 4) and (a = 1), " + "(x = 3) and (b = 2), " + "(x = 3) and (a = 1)");
    optimiseAndOrAnd("select * from [nt:unstructured] as [c] " + "where ([a]=1 or [b]=2 or ([c]=3 and [d]=4)) and ([x]=5 or [y]=6)", "(y = 6) and ((c = 3) and (d = 4)), " + "(y = 6) and (b = 2), " + "(y = 6) and (a = 1), " + "(x = 5) and ((c = 3) and (d = 4)), " + "(x = 5) and (b = 2), " + "(x = 5) and (a = 1)");
}
private void optimiseAndOrAnd(String statement, String expected) throws ParseException {
    SQL2Parser parser = SQL2ParserTest.createTestSQL2Parser(getMappings(), getNodeTypes(), qeSettings);
    Query original;
    original = parser.parse(statement, false);
    assertNotNull(original);
    String optimized = original.buildAlternativeQuery().toString();
    optimized = optimized.replaceAll("\\[", "").replaceAll("\\]", "");
    optimized = optimized.replaceAll("select c.jcr:primaryType as c.jcr:primaryType ", "");
    optimized = optimized.replaceAll("from nt:unstructured as c where ", "");
    optimized = optimized.replaceAll("c\\.", "");
    optimized = optimized.replaceAll(" union ", ", ");
    assertEquals(expected, optimized);
}
