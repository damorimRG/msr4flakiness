@Test
public void collectRandomAccessTrace() throws IOException {
    try (StringWriter out = new StringWriter()) {
        Function<IOMonitor, FileStore> factory = this::createFileStore;
        IOTracer ioTracer = newIOTracer(factory, out, RandomAccessTrace.CONTEXT_SPEC);
        ImmutableList<String> paths = ImmutableList.of("/1a", "/1b", "/foo");
        ioTracer.collectTrace(new RandomAccessTrace(paths, 0, 10, ioTracer::setContext));
        try (BufferedReader reader = new BufferedReader(new StringReader(out.toString()))) {
            Optional<String> header = reader.lines().findFirst();
            List<String[]> entries = reader.lines().map(line -> line.split(",")).collect(toList());
            assertTrue(header.isPresent());
            assertEquals("timestamp,file,segmentId,length,elapsed,path", header.get());
            long now = currentTimeMillis();
            assertTrue("The timestamps of all entries must be in the past", entries.stream().map(// ts
            row -> parseLong(row[0])).allMatch(ts -> ts <= now));
            assertTrue("The path of all entries must be in " + paths, entries.stream().map(// path
            row -> row[5]).allMatch(paths::contains));
        }
    }
}
