@Test
void filterCapturesPrincipal() {
    Principal principal = mock(Principal.class);
    given(principal.getName()).willReturn("alice");
    executeFilter(new ServerWebExchangeDecorator(MockServerWebExchange.from(MockServerHttpRequest.get("https://api.example.com"))) {

        @Override
        public Mono<Principal> getPrincipal() {
            return Mono.just(principal);
        }
    }, (exchange) -> {
        exchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put("a", "alpha");
        return Mono.empty();
    }).block(Duration.ofSeconds(30));
    assertThat(this.repository.findAll()).hasSize(1);
    org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal();
    assertThat(tracedPrincipal).isNotNull();
    assertThat(tracedPrincipal.getName()).isEqualTo("alice");
}
