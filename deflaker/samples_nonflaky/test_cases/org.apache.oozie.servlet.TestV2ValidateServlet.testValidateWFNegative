public void testValidateWFNegative() throws Exception {
    runTest("/v2/validate", V2ValidateServlet.class, IS_SECURITY_ENABLED, new Callable<Void>() {

        public Void call() throws Exception {
            Map<String, String> params = new HashMap<String, String>();
            params.put("file", "workflow.xml");
            params.put("user", getTestUser());
            URL url = createURL("", params);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("content-type", RestConstants.XML_CONTENT_TYPE);
            conn.setDoOutput(true);
            String xml = "<workflow-app xmlns=\"uri:oozie:workflow:0.3\" name=\"test\">\n" + "    <start to=\"shell-1\"/>\n" + "    <action name=\"shell-1\">\n" + "        <shell xmlns=\"uri:oozie:shell-action:0.3\">\n" + "            <name-node2>${nameNode}</name-node2>\n" + "            <exec>script-outstream.sh</exec>\n" + "            <argument></argument>\n" + "            <file>script-outstream.sh</file>\n" + "            <capture-output/>\n" + "        </shell>\n" + "        <ok to=\"end\"/>\n" + "        <error to=\"fail\"/>\n" + "    </action>\n" + "    <kill name=\"fail\">\n" + "        <message>failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>\n" + "    </kill>\n" + "    <end name=\"end\"/>\n" + "</workflow-app>";
            writeXML(conn.getOutputStream(), xml);
            assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());
            String error = conn.getHeaderField(RestConstants.OOZIE_ERROR_CODE);
            String message = conn.getHeaderField(RestConstants.OOZIE_ERROR_MESSAGE);
            assertEquals("E0701", error);
            assertEquals(true, message.contains("Invalid content was found starting with element 'name-node2'"));
            return null;
        }
    });
}
