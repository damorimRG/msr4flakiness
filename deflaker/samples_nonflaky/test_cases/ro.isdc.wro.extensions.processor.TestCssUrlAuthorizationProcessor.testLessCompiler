@Test
public void testLessCompiler() throws Exception {
    final String resourceUri = "classpath:" + LESS_INPUT_NAME;
    WroTestUtils.compareProcessedResourceContents(resourceUri, "classpath:" + LESS_OUTPUT_NAME, new ResourcePostProcessor() {

        @Override
        public void process(final Reader reader, final Writer writer) throws IOException {
            // Sample URLs that the CSS URL rewriter does not authorize... make sure we still don't:
            final String badUri = "classpath:test/@{iconSpritePath}";
            final String goodUri = "classpath:test/less-test-glyphicons-halflings.png";
            // Run the CSS rewriter with a proxy
            StringWriter writerProxy = new StringWriter();
            rewriter.process(createMockResource(resourceUri), reader, writerProxy);
            String rewrittenOutput = writerProxy.toString();
            // With just the CSS URL rewriter
            assertTrue("Invalid URI is not authorized", processor.isUriAllowed(badUri));
            assertFalse("Valid URI should not have been authorized yet", processor.isUriAllowed(goodUri));
            assertTrue("Invalid URI is not present in content", rewrittenOutput.contains(badUri));
            assertFalse("Valid URI is present in content", rewrittenOutput.contains(goodUri));
            // LESS compiler
            StringReader readerProxy = new StringReader(rewrittenOutput);
            writerProxy = new StringWriter();
            compiler.process(readerProxy, writerProxy);
            rewrittenOutput = writerProxy.toString();
            // With the two combined... the content will now be good, but not the authorization
            assertTrue("Invalid URI is not authorized", processor.isUriAllowed(badUri));
            assertFalse("Valid URI should not have been authorized yet", processor.isUriAllowed(goodUri));
            assertFalse("Invalid URI is present in content", rewrittenOutput.contains(badUri));
            assertTrue("Valid URI is not present in content", rewrittenOutput.contains(goodUri));
            // So we run the authorization processor to fix that
            readerProxy = new StringReader(rewrittenOutput);
            processor.process(readerProxy, writer);
            assertEquals("Authorization processor should never alter content", rewrittenOutput, writer.toString());
            assertTrue("Invalid URI is not authorized", processor.isUriAllowed(badUri));
            assertTrue("Valid URI is not authorized", processor.isUriAllowed(goodUri));
        }
    });
}
