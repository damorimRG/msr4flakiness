@SuppressWarnings("unchecked")
@Test
void listenerProperties() {
    this.contextRunner.withPropertyValues("spring.kafka.template.default-topic=testTopic", "spring.kafka.listener.ack-mode=MANUAL", "spring.kafka.listener.client-id=client", "spring.kafka.listener.ack-count=123", "spring.kafka.listener.ack-time=456", "spring.kafka.listener.concurrency=3", "spring.kafka.listener.poll-timeout=2000", "spring.kafka.listener.no-poll-threshold=2.5", "spring.kafka.listener.type=batch", "spring.kafka.listener.idle-event-interval=1s", "spring.kafka.listener.monitor-interval=45", "spring.kafka.listener.log-container-config=true", "spring.kafka.listener.missing-topics-fatal=false", "spring.kafka.jaas.enabled=true", "spring.kafka.producer.transaction-id-prefix=foo", "spring.kafka.jaas.login-module=foo", "spring.kafka.jaas.control-flag=REQUISITE", "spring.kafka.jaas.options.useKeyTab=true").run((context) -> {
        DefaultKafkaProducerFactory<?, ?> producerFactory = context.getBean(DefaultKafkaProducerFactory.class);
        DefaultKafkaConsumerFactory<?, ?> consumerFactory = context.getBean(DefaultKafkaConsumerFactory.class);
        KafkaTemplate<?, ?> kafkaTemplate = context.getBean(KafkaTemplate.class);
        AbstractKafkaListenerContainerFactory<?, ?, ?> kafkaListenerContainerFactory = (AbstractKafkaListenerContainerFactory<?, ?, ?>) context.getBean(KafkaListenerContainerFactory.class);
        assertThat(kafkaTemplate.getMessageConverter()).isInstanceOf(MessagingMessageConverter.class);
        assertThat(kafkaTemplate).hasFieldOrPropertyWithValue("producerFactory", producerFactory);
        assertThat(kafkaTemplate.getDefaultTopic()).isEqualTo("testTopic");
        assertThat(kafkaListenerContainerFactory.getConsumerFactory()).isEqualTo(consumerFactory);
        ContainerProperties containerProperties = kafkaListenerContainerFactory.getContainerProperties();
        assertThat(containerProperties.getAckMode()).isEqualTo(AckMode.MANUAL);
        assertThat(containerProperties.getClientId()).isEqualTo("client");
        assertThat(containerProperties.getAckCount()).isEqualTo(123);
        assertThat(containerProperties.getAckTime()).isEqualTo(456L);
        assertThat(containerProperties.getPollTimeout()).isEqualTo(2000L);
        assertThat(containerProperties.getNoPollThreshold()).isEqualTo(2.5f);
        assertThat(containerProperties.getIdleEventInterval()).isEqualTo(1000L);
        assertThat(containerProperties.getMonitorInterval()).isEqualTo(45);
        assertThat(containerProperties.isLogContainerConfig()).isTrue();
        assertThat(containerProperties.isMissingTopicsFatal()).isFalse();
        assertThat(ReflectionTestUtils.getField(kafkaListenerContainerFactory, "concurrency")).isEqualTo(3);
        assertThat(kafkaListenerContainerFactory.isBatchListener()).isTrue();
        assertThat(context.getBeansOfType(KafkaJaasLoginModuleInitializer.class)).hasSize(1);
        KafkaJaasLoginModuleInitializer jaas = context.getBean(KafkaJaasLoginModuleInitializer.class);
        assertThat(jaas).hasFieldOrPropertyWithValue("loginModule", "foo");
        assertThat(jaas).hasFieldOrPropertyWithValue("controlFlag", AppConfigurationEntry.LoginModuleControlFlag.REQUISITE);
        assertThat(context.getBeansOfType(KafkaTransactionManager.class)).hasSize(1);
        assertThat(((Map<String, String>) ReflectionTestUtils.getField(jaas, "options"))).containsExactly(entry("useKeyTab", "true"));
    });
}
