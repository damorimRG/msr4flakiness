/**
 * Tests that the eviction in the bottom tier works.
 */
@Test
public void evictInBottomTier() throws Exception {
    int bottomTierLevel = TieredBlockStoreTestUtils.TIER_ORDINAL[TieredBlockStoreTestUtils.TIER_ORDINAL.length - 1];
    // capacity increases with index
    long[] bottomTierDirCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[bottomTierLevel];
    long smallestCapacity = bottomTierDirCapacity[0];
    long delta = smallestCapacity / 10;
    int nDir = bottomTierDirCapacity.length;
    // free space of StorageDir increases with Dir index
    for (int i = 0; i < nDir; i++) {
        cache(SESSION_ID, BLOCK_ID + i, bottomTierDirCapacity[i] - i * delta, bottomTierLevel, i);
    }
    BlockStoreLocation anyDirInBottomTier = BlockStoreLocation.anyDirInTier(TieredBlockStoreTestUtils.TIER_ALIAS[bottomTierLevel]);
    // free the StorageDir with max free space
    EvictionPlan plan = mEvictor.freeSpaceWithView(smallestCapacity, anyDirInBottomTier, mMetadataView);
    assertNotNull(plan);
    assertTrue(plan.toMove().isEmpty());
    assertEquals(1, plan.toEvict().size());
    long toEvictBlockId = plan.toEvict().get(0).getFirst();
    assertEquals(BLOCK_ID + nDir - 1, toEvictBlockId);
}
