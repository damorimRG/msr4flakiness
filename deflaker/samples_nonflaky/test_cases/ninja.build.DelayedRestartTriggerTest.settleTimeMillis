@Test
public void settleTimeMillis() throws Exception {
    RunClassInSeparateJvmMachine machine = mock(RunClassInSeparateJvmMachine.class);
    final DelayedRestartTrigger restartTrigger = new DelayedRestartTrigger(machine);
    // long settling down period to ensure it'll happen
    restartTrigger.setSettleDownMillis(10000);
    try {
        restartTrigger.start();
        assertEquals(0, restartTrigger.getRestartCount());
        assertEquals(0, restartTrigger.getAccumulatedTriggerCount());
        // thread needs to be waiting after start
        waitOrTimeout(Conditions.isWaiting(restartTrigger), Timeout.timeout(millis(10000)));
        // call restart quickly in a row
        restartTrigger.trigger();
        Thread.sleep(5);
        restartTrigger.trigger();
        Thread.sleep(5);
        restartTrigger.trigger();
        Thread.sleep(5);
        restartTrigger.trigger();
        // wait until restart count is 1
        waitOrTimeout(new Condition() {

            @Override
            public boolean isSatisfied() {
                return restartTrigger.getRestartCount() > 0;
            }
        }, Timeout.timeout(millis(10000)));
        // wait until accumulated trigger is set back to zero
        waitOrTimeout(new Condition() {

            @Override
            public boolean isSatisfied() {
                restartTrigger.interrupt();
                return restartTrigger.getAccumulatedTriggerCount() <= 0;
            }
        }, Timeout.timeout(millis(10000)));
        // should have only called this exactly once
        verify(machine, timeout(10000).atLeast(1)).restart();
        // thread needs to be waiting after restart
        waitOrTimeout(Conditions.isWaiting(restartTrigger), Timeout.timeout(millis(10000)));
        assertEquals(1, restartTrigger.getRestartCount());
        assertEquals(0, restartTrigger.getAccumulatedTriggerCount());
    } finally {
        restartTrigger.shutdown();
    }
}
