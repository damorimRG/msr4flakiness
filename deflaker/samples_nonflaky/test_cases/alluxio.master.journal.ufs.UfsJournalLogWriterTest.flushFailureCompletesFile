/**
 * Test that failures during {@link UfsJournalLogWriter#flush()} will complete the current file.
 */
@Test
public void flushFailureCompletesFile() throws Exception {
    Mockito.when(mUfs.supportsFlush()).thenReturn(true);
    // Write several journal entries, creating and closing journal file.
    // This file is complete.
    long startSN = 0x10;
    UfsJournalLogWriter writer = new UfsJournalLogWriter(mJournal, startSN);
    final int numberOfEntriesWrittenBeforeFailure = 10;
    long nextSN = writeJournalEntries(writer, startSN, numberOfEntriesWrittenBeforeFailure);
    writer.flush();
    writer.close();
    // Write another entry and then fail the flush.
    writer = new UfsJournalLogWriter(mJournal, nextSN);
    nextSN = writeJournalEntries(writer, nextSN, 1);
    DataOutputStream badOut = createMockDataOutputStream(writer);
    Mockito.doThrow(new IOException(INJECTED_IO_ERROR_MESSAGE)).when(badOut).flush();
    nextSN = writeJournalEntries(writer, nextSN, 1);
    tryFlushAndExpectToFail(writer);
    // Retry the flush, expect it to rotate the log and start a new file
    writer.flush();
    // Complete the last log
    writer.close();
    UfsJournalSnapshot snapshot = UfsJournalSnapshot.getSnapshot(mJournal);
    Assert.assertEquals(3, snapshot.getLogs().size());
    Assert.assertEquals(nextSN - 1, snapshot.getLogs().get(2).getStart());
    Assert.assertEquals(nextSN, snapshot.getLogs().get(2).getEnd());
}
