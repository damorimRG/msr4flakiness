@Test
public void testBodyParserWithValidationErrors() {
    // some setup for this method:
    Map<String, String[]> map = new HashMap<>();
    map.put("integerPrimitive", new String[] { "a" });
    map.put("integerObject", new String[] { "b" });
    map.put("longPrimitive", new String[] { "c" });
    map.put("longObject", new String[] { "d" });
    map.put("floatPrimitive", new String[] { "e" });
    map.put("floatObject", new String[] { "f" });
    map.put("doublePrimitive", new String[] { "g" });
    map.put("doubleObject", new String[] { "h" });
    map.put("characterPrimitive", new String[] { null });
    map.put("characterObject", new String[] { null });
    map.put("date", new String[] { "cc" });
    map.put("timestamp", new String[] { "dd" });
    map.put("uuid", new String[] { "ee" });
    map.put("somethingElseWhatShouldBeSkipped", new String[] { "somethingElseWhatShouldBeSkipped" });
    Mockito.when(context.getParameters()).thenReturn(map);
    Mockito.when(context.getValidation()).thenReturn(validation);
    // do
    TestObject testObject = bodyParserEnginePost.invoke(context, TestObject.class);
    // and test:
    assertTrue(validation.hasViolations());
    assertViolation("integerPrimitive", IsInteger.KEY);
    assertThat(testObject.integerPrimitive, equalTo(0));
    assertViolation("integerObject", IsInteger.KEY);
    assertNull(testObject.integerObject);
    assertViolation("longPrimitive", IsInteger.KEY);
    assertThat(testObject.longPrimitive, equalTo(0L));
    assertViolation("longObject", IsInteger.KEY);
    assertNull(testObject.longObject);
    assertViolation("floatPrimitive", IsFloat.KEY);
    assertThat(testObject.floatPrimitive, equalTo(0F));
    assertViolation("floatObject", IsFloat.KEY);
    assertNull(testObject.floatObject);
    assertViolation("doublePrimitive", IsFloat.KEY);
    assertThat(testObject.doublePrimitive, equalTo(0D));
    assertViolation("doubleObject", IsFloat.KEY);
    assertNull(testObject.doubleObject);
    assertViolation("date", IsDate.KEY);
    assertNull(testObject.date);
    assertViolation("timestamp", IsDate.KEY);
    assertNull(testObject.timestamp);
    assertViolation("uuid", IsUUID.KEY);
    assertNull(testObject.uuid);
    assertNull(testObject.string);
    assertThat(testObject.characterPrimitive, equalTo('\0'));
    assertNull(testObject.characterObject);
    assertNull(testObject.string);
}
