@Test
public void abortedRun() throws Exception {
    NodeStore store = new MemoryNodeStore();
    IndexEditorProvider provider = new PropertyIndexEditorProvider();
    NodeBuilder builder = store.getRoot().builder();
    createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "rootIndex", true, false, ImmutableSet.of("foo"), null).setProperty(ASYNC_PROPERTY_NAME, "async");
    builder.child("testRoot").setProperty("foo", "abc");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    final Semaphore asyncLock = new Semaphore(1);
    final AsyncIndexUpdate async = new AsyncIndexUpdate("async", store, provider) {

        @Override
        protected AsyncUpdateCallback newAsyncUpdateCallback(NodeStore store, String name, long leaseTimeOut, String beforeCheckpoint, AsyncIndexStats indexStats, AtomicBoolean stopFlag) {
            return new AsyncUpdateCallback(store, name, leaseTimeOut, beforeCheckpoint, indexStats, stopFlag) {

                @Override
                public void indexUpdate() throws CommitFailedException {
                    try {
                        asyncLock.acquire();
                    } catch (InterruptedException ignore) {
                    }
                    try {
                        super.indexUpdate();
                    } finally {
                        asyncLock.release();
                    }
                }
            };
        }
    };
    runOneCycle(async);
    assertEquals(IndexStatsMBean.STATUS_DONE, async.getIndexStats().getStatus());
    // Below we ensure that we interrupt while the indexing is in progress
    // hence the use of asyncLock which ensures the abort is called at right time
    // Now make some changes to
    builder = store.getRoot().builder();
    builder.child("testRoot2").setProperty("foo", "abc");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    Thread t = new Thread(async);
    // Lock to ensure that AsyncIndexUpdate waits
    asyncLock.acquire();
    t.start();
    // Wait till async gets to wait state i.e. inside run
    while (!asyncLock.hasQueuedThreads()) ;
    assertEquals(IndexStatsMBean.STATUS_RUNNING, async.getIndexStats().getStatus());
    assertThat(async.getIndexStats().abortAndPause(), containsString("Abort request placed"));
    asyncLock.release();
    retry(5, 5, new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            return IndexStatsMBean.STATUS_INTERRUPTED.equals(async.getIndexStats().getStatus());
        }
    });
    // Post abort indexing should be fine
    runOneCycle(async);
    assertTrue(async.getIndexStats().isPaused());
    // Now resume indexing
    async.getIndexStats().resume();
    runOneCycle(async);
    assertEquals(IndexStatsMBean.STATUS_DONE, async.getIndexStats().getStatus());
    assertFalse(async.isClosed());
}
