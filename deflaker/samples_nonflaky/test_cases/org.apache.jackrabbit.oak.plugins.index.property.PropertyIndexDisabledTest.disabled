@Test
public void disabled() throws Exception {
    NodeBuilder index = createIndexDefinition(rootBuilder.child(INDEX_DEFINITIONS_NAME), "foo", true, false, ImmutableSet.of("foo"), null);
    index.setProperty(IndexConstants.USE_IF_EXISTS, "/");
    commit();
    for (int i = 0; i < MANY; i++) {
        rootBuilder.child("test").child("n" + i).setProperty("foo", "x" + i % 20);
    }
    commit();
    FilterImpl f = createFilter(root, NT_BASE);
    f.restrictProperty("foo", Operator.EQUAL, PropertyValues.newString("x10"));
    PropertyIndex propertyIndex = new PropertyIndex(Mounts.defaultMountInfoProvider());
    assertTrue(propertyIndex.getCost(f, root) != Double.POSITIVE_INFINITY);
    assertEquals("property foo = x10", propertyIndex.getPlan(f, root));
    // now test with a node that doesn't exist
    index = rootBuilder.child(INDEX_DEFINITIONS_NAME).child("foo");
    index.setProperty(IndexConstants.USE_IF_EXISTS, "/doesNotExist");
    commit();
    // need to create a new one - otherwise the cached plan is used
    propertyIndex = new PropertyIndex(Mounts.defaultMountInfoProvider());
    assertTrue(propertyIndex.getCost(f, root) == Double.POSITIVE_INFINITY);
    assertEquals("property index not applicable", propertyIndex.getPlan(f, root));
    // test with a property that does exist
    index = rootBuilder.child(INDEX_DEFINITIONS_NAME).child("foo");
    index.setProperty(IndexConstants.USE_IF_EXISTS, "/oak:index/@jcr:primaryType");
    commit();
    // need to create a new one - otherwise the cached plan is used
    propertyIndex = new PropertyIndex(Mounts.defaultMountInfoProvider());
    assertTrue(propertyIndex.getCost(f, root) != Double.POSITIVE_INFINITY);
    assertEquals("property foo = x10", propertyIndex.getPlan(f, root));
    // test with a property that does not exist
    index = rootBuilder.child(INDEX_DEFINITIONS_NAME).child("foo");
    index.setProperty(IndexConstants.USE_IF_EXISTS, "/oak:index/@unknownProperty");
    commit();
    // need to create a new one - otherwise the cached plan is used
    propertyIndex = new PropertyIndex(Mounts.defaultMountInfoProvider());
    assertTrue(propertyIndex.getCost(f, root) == Double.POSITIVE_INFINITY);
    assertEquals("property index not applicable", propertyIndex.getPlan(f, root));
}
