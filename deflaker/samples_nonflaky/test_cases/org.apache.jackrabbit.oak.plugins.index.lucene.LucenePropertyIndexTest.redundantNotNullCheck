@Test
public void redundantNotNullCheck() throws Exception {
    Tree idx = createIndex("test1", of("tags"));
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    test.addChild("a").setProperty("tags", of("a", "b"), Type.STRINGS);
    test.addChild("b").setProperty("tags", of("a", "c"), Type.STRINGS);
    root.commit();
    String q = "SELECT * FROM [nt:unstructured] as content WHERE ISDESCENDANTNODE('/content/dam/en/us')\n" + "and(\n" + "    content.[tags] = 'Products:A'\n" + "    or content.[tags] = 'Products:A/B'\n" + "    or content.[tags] = 'Products:A/B'\n" + "    or content.[tags] = 'Products:A'\n" + ")\n" + "and(\n" + "    content.[tags] = 'DocTypes:A'\n" + "    or content.[tags] = 'DocTypes:B'\n" + "    or content.[tags] = 'DocTypes:C'\n" + "    or content.[tags] = 'ProblemType:A'\n" + ")\n" + "and(\n" + "    content.[hasRendition] IS NULL\n" + "    or content.[hasRendition] = 'false'\n" + ")";
    // Check that filter created out of query does not have is not null restriction
    assertThat(explain(q), not(containsString("[content].[tags] is not null")));
}
