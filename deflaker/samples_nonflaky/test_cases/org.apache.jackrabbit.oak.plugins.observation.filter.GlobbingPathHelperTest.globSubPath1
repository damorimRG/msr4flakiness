@Test
public void globSubPath1() throws Exception {
    assertMatches("foo", "foo");
    assertMatches("**", "foo");
    assertMatches("**/bar", "bar");
    assertMatches("**/bar", "foo/bar");
    assertMatches("**/bar", "foo/zoo/bar");
    assertMatches("**/bar/**", "bar");
    assertMatches("**/bar/**", "/bar");
    assertMatches("**/bar/**", "foo/bar");
    assertMatches("**/bar/**", "/foo/bar");
    assertMatches("**/bar/**", "foo/bar/zoo");
    assertMatches("**/bar/**", "/foo/bar/zoo");
    assertMatches("**/bar/**", "bar/foo");
    assertMatches("**/bar/**", "/bar/foo");
    assertMatches("**/bar/**", "bar/foo/zoo");
    assertMatches("**/bar/**", "/bar/foo/zoo");
    assertMatches("**/bar/**/foo", "bar/foo");
    assertMatches("**/bar/**/foo", "/bar/foo");
    assertMatches("**/bar/**/foo", "a/bar/foo");
    assertMatches("**/bar/**/foo", "/a/bar/foo");
    assertMatches("**/bar/**/foo", "bar/b/foo");
    assertMatches("**/bar/**/foo", "/bar/b/foo");
    assertMatches("**/bar/**/foo", "bar/a/b/c/foo");
    assertMatches("**/bar/**/foo", "/bar/a/b/c/foo");
    assertMatches("/a/b/**/foo/*", "/a/b/foo/xy");
    assertDoesntMatch("/a/b/**/foo/*", "/a/b/barfoo/xy");
    assertDoesntMatch("/a/b/**/foo/*", "/a/bbar/foo/xy");
    assertDoesntMatch("/a/b/**/foo/*", "/a/bbar/barfoo/xy");
}
