@Test
public void competingPlans() {
    testIndexProvider.addPlan("plan1", 100000, true);
    testIndexProvider.addPlan("plan2", 100, true);
    assertPlanSelection(QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_SLOW_TRAVERSAL_QUERY, "plan2", "Low cost must win");
    testIndexProvider.restPlans();
    testIndexProvider.addPlan("plan1", 100000, false);
    testIndexProvider.addPlan("plan2", 100, true);
    assertPlanSelection(QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_SLOW_TRAVERSAL_QUERY, "plan2", "Low cost must win");
    testIndexProvider.restPlans();
    testIndexProvider.addPlan("plan1", 200000, true);
    testIndexProvider.addPlan("plan2", 10000, false);
    assertPlanSelection(QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_QUERY, "traverse", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_SLOW_TRAVERSAL_QUERY, "plan2", "Low cost must win");
    testIndexProvider.restPlans();
    testIndexProvider.addPlan("plan1", 200000, false);
    testIndexProvider.addPlan("plan2", 1000, false);
    assertPlanSelection(QUERY, "plan2", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_QUERY, "traverse", "Low cost must win");
    assertPlanSelection(PATH_RESTRICTED_SLOW_TRAVERSAL_QUERY, "plan2", "Low cost must win");
}
