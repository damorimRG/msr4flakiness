@Test
public void readsWithOverlappingPreviousDocuments() throws Exception {
    final Map<String, Document> prevDocCalls = newLinkedHashMap();
    MemoryDocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            T doc = super.find(collection, key);
            if (collection == NODES && Utils.getPathFromId(key).startsWith("p")) {
                prevDocCalls.put(key, doc);
            }
            return doc;
        }
    };
    Random random = new Random(42);
    DocumentNodeStore ns = createTestStore(store, 1, 0);
    List<RevisionVector> headRevisions = Lists.newArrayList();
    long count = 1000;
    for (int i = 0; i < count; i++) {
        NodeBuilder builder = ns.getRoot().builder();
        NodeBuilder test = builder.child("test");
        test.setProperty("p", i);
        // maintain four other properties and update
        // them with different probabilities
        for (int j = 0; j < 4; j++) {
            if (random.nextInt(j + 1) == 0) {
                test.setProperty("p" + j, i);
            }
        }
        merge(ns, builder);
        headRevisions.add(ns.getHeadRevision());
        if (i % 3 == 0) {
            // split the document
            RevisionVector head = ns.getHeadRevision();
            NodeDocument doc = store.find(NODES, Utils.getIdFromPath("/test"));
            for (UpdateOp op : SplitOperations.forDocument(doc, ns, head, NO_BINARY, 2)) {
                store.createOrUpdate(NODES, op);
            }
        }
    }
    ns.runBackgroundOperations();
    NodeDocument doc = store.find(NODES, Utils.getIdFromPath("/test"));
    assertNotNull(doc);
    List<Integer> numCalls = Lists.newArrayList();
    // go back in time and check number of find calls
    Collections.reverse(headRevisions);
    for (RevisionVector rv : headRevisions) {
        prevDocCalls.clear();
        DocumentNodeState s = doc.getNodeAtRevision(ns, rv, null);
        assertNotNull(s);
        assertEquals(--count, s.getProperty("p").getValue(Type.LONG).longValue());
        numCalls.add(prevDocCalls.size());
    }
    assertThat(numCalls.toString(), numCalls, everyItem(lessThan(43)));
    ns.dispose();
}
