@Test
public void longestPrefix() {
    FilterImpl filter;
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.EQUAL, PropertyValues.newString("hello"));
    assertEquals("hello", getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_OR_EQUAL, PropertyValues.newString("hello welt"));
    filter.restrictProperty("x", Operator.LESS_OR_EQUAL, PropertyValues.newString("hello world"));
    assertEquals("hello w", getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("hello welt"));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("hello world"));
    assertEquals("hello w", getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("hello welt"));
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("hello welt!"));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("hello world"));
    filter.restrictProperty("x", Operator.EQUAL, PropertyValues.newString("hell"));
    assertEquals("hell", getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("abc"));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("bde"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("abc"));
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("bcd"));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("dce"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.LIKE, PropertyValues.newString("hello%"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_OR_EQUAL, PropertyValues.newString("hello"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("hello"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.NOT_EQUAL, null);
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString(Arrays.asList("a0", "a1")));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString("a2"));
    assertNull(getLongestPrefix(filter, "x"));
    filter = new FilterImpl(null, null, null);
    filter.restrictProperty("x", Operator.GREATER_THAN, PropertyValues.newString("a0"));
    filter.restrictProperty("x", Operator.LESS_THAN, PropertyValues.newString(Arrays.asList("a3", "a4")));
    assertNull(getLongestPrefix(filter, "x"));
}
