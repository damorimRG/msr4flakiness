@Test
@LocalAlluxioClusterResource.Config(confParams = { PropertyKey.Name.MASTER_PERSISTENCE_MAX_TOTAL_WAIT_TIME_MS, "1ms", PropertyKey.Name.MASTER_PERSISTENCE_CHECKER_INTERVAL_MS, "50ms", PropertyKey.Name.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, "50ms" })
public void persistTimeoutTest() throws Exception {
    // write a file in alluxio only
    AlluxioURI filePath = new AlluxioURI(TEST_URI);
    FileOutStream os = mFileSystem.createFile(filePath, CreateFilePOptions.newBuilder().setWriteType(WritePType.MUST_CACHE).build());
    os.write((byte) 0);
    os.write((byte) 1);
    os.close();
    // check the file is completed but not persisted
    URIStatus status = mFileSystem.getStatus(filePath);
    Assert.assertEquals(PersistenceState.NOT_PERSISTED.toString(), status.getPersistenceState());
    Assert.assertTrue(status.isCompleted());
    // kill job worker
    mLocalAlluxioJobCluster.getWorker().stop();
    // persist the file
    try (CloseableResource<FileSystemMasterClient> client = mFsContext.acquireMasterClientResource()) {
        client.get().scheduleAsyncPersist(new AlluxioURI(TEST_URI), FileSystemOptions.scheduleAsyncPersistDefaults(ServerConfiguration.global()));
    }
    CommonUtils.waitFor("persist timeout", () -> {
        try {
            return PersistenceState.NOT_PERSISTED.toString().equals(mFileSystem.getStatus(filePath).getPersistenceState());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }, WaitForOptions.defaults().setTimeoutMs(10000));
    // verify timeout and reverted to not persisted
    status = mFileSystem.getStatus(filePath);
    Assert.assertEquals(PersistenceState.NOT_PERSISTED.toString(), status.getPersistenceState());
    // restart master
    mLocalAlluxioClusterResource.get().restartMasters();
    // need new client after restart
    mFileSystem = mLocalAlluxioClusterResource.get().getClient();
    // verify not persisted
    status = mFileSystem.getStatus(filePath);
    Assert.assertEquals(PersistenceState.NOT_PERSISTED.toString(), status.getPersistenceState());
    String ufsPath = status.getUfsPath();
    UnderFileSystem ufs = UnderFileSystem.Factory.create(ufsPath, ServerConfiguration.global());
    Assert.assertFalse(ufs.exists(ufsPath));
}
