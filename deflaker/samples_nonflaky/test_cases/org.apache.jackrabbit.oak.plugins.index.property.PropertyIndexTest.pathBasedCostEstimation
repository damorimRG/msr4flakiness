/**
 * This is essentially same test as {@link #costEstimation()} with one difference that it uses
 * path constraint in query and creates similar trees under 2 branches {@code path1} and {@code path2}.
 * The cost estimation is then verified to be same as that in {@code costEstimation} for query under {@code path1}
 * @throws Exception
 */
@Test
public void pathBasedCostEstimation() throws Exception {
    NodeState root = INITIAL_CONTENT;
    // Add index definition
    NodeBuilder builder = root.builder();
    NodeBuilder index = createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "foo", true, false, ImmutableSet.of("foo"), null);
    // disable the estimation
    index.setProperty("entryCount", -1);
    builder.setProperty(COUNT_PROPERTY_NAME, (long) MANY * 2, Type.LONG);
    NodeState before = builder.getNodeState();
    NodeBuilder path1 = builder.child("path1");
    NodeBuilder path2 = builder.child("path2");
    // Add some content and process it through the property index hook
    for (int i = 0; i < MANY; i++) {
        path1.child("n" + i).setProperty("foo", "x" + i % 20);
        path2.child("n" + i).setProperty("foo", "x" + i % 20);
    }
    path1.setProperty(COUNT_PROPERTY_NAME, (long) MANY, Type.LONG);
    NodeState after = builder.getNodeState();
    NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);
    FilterImpl f = createFilter(indexed, NT_BASE);
    f.restrictPath("/path1", Filter.PathRestriction.ALL_CHILDREN);
    // Query the index
    PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);
    double cost;
    cost = lookup.getCost(f, "foo", PropertyValues.newString("x1"));
    assertTrue("cost: " + cost, cost >= 10 && cost <= 14);
    cost = lookup.getCost(f, "foo", PropertyValues.newString(Arrays.asList("x1", "x2")));
    assertTrue("cost: " + cost, cost >= 20 && cost <= 24);
    cost = lookup.getCost(f, "foo", PropertyValues.newString(Arrays.asList("x1", "x2", "x3", "x4", "x5")));
    assertTrue("cost: " + cost, cost >= 50 && cost <= 54);
    cost = lookup.getCost(f, "foo", PropertyValues.newString(Arrays.asList("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x0")));
    assertTrue("cost: " + cost, cost >= 120 && cost <= 124);
    cost = lookup.getCost(f, "foo", null);
    assertTrue("cost: " + cost, cost >= MANY);
}
