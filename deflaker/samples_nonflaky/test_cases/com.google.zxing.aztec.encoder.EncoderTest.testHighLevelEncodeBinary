@Test
public void testHighLevelEncodeBinary() {
    // binary short form single byte
    testHighLevelEncodeString("N\0N", // 'N'  B/S    =1   '\0'      N
    ".XXXX XXXXX ....X ........ .XXXX");
    // Encode "N" in UPPER
    testHighLevelEncodeString("N\0n", // 'N'  B/S    =2   '\0'       'n'
    ".XXXX XXXXX ...X. ........ .XX.XXX.");
    // Encode "n" in BINARY
    // binary short form consecutive bytes
    testHighLevelEncodeString("N\0\u0080 A", // 'N'  B/S    =2    '\0'    \u0080   ' '  'A'
    ".XXXX XXXXX ...X. ........ X....... ....X ...X.");
    // binary skipping over single character
    testHighLevelEncodeString("\0a\u00FF\u0080 A", // B/S  =4    '\0'      'a'     '\3ff'   '\200'   ' '   'A'
    "XXXXX ..X.. ........ .XX....X XXXXXXXX X....... ....X ...X.");
    // getting into binary mode from digit mode
    testHighLevelEncodeString("1234\0", // D/L   '1'  '2'  '3'  '4'  U/L  B/S    =1    \0
    "XXXX. ..XX .X.. .X.X .XX. XXX. XXXXX ....X ........");
    // Create a string in which every character requires binary
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i <= 3000; i++) {
        sb.append((char) (128 + (i % 30)));
    }
    // Test the output generated by Binary/Switch, particularly near the
    // places where the encoding changes: 31, 62, and 2047+31=2078
    for (int i : new int[] { 1, 2, 3, 10, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 2076, 2077, 2078, 2079, 2080, 2100 }) {
        // This is the expected length of a binary string of length "i"
        int expectedLength = (8 * i) + ((i <= 31) ? 10 : (i <= 62) ? 20 : (i <= 2078) ? 21 : 31);
        // Verify that we are correct about the length.
        testHighLevelEncodeString(sb.substring(0, i), expectedLength);
        if (i != 1 && i != 32 && i != 2079) {
            // The addition of an 'a' at the beginning or end gets merged into the binary code
            // in those cases where adding another binary character only adds 8 or 9 bits to the result.
            // So we exclude the border cases i=1,32,2079
            // A lower case letter at the beginning will be merged into binary mode
            testHighLevelEncodeString('a' + sb.substring(0, i - 1), expectedLength);
            // A lower case letter at the end will also be merged into binary mode
            testHighLevelEncodeString(sb.substring(0, i - 1) + 'a', expectedLength);
        }
        // A lower case letter at both ends will enough to latch us into LOWER.
        testHighLevelEncodeString('a' + sb.substring(0, i) + 'b', expectedLength + 15);
    }
    sb = new StringBuilder();
    for (int i = 0; i < 32; i++) {
        // § forces binary encoding
        sb.append('§');
    }
    sb.setCharAt(1, 'A');
    // expect B/S(1) A B/S(30)
    testHighLevelEncodeString(sb.toString(), 5 + 20 + 31 * 8);
    sb = new StringBuilder();
    for (int i = 0; i < 31; i++) {
        sb.append('§');
    }
    sb.setCharAt(1, 'A');
    // expect B/S(31)
    testHighLevelEncodeString(sb.toString(), 10 + 31 * 8);
    sb = new StringBuilder();
    for (int i = 0; i < 34; i++) {
        sb.append('§');
    }
    sb.setCharAt(1, 'A');
    // expect B/S(31) B/S(3)
    testHighLevelEncodeString(sb.toString(), 20 + 34 * 8);
    sb = new StringBuilder();
    for (int i = 0; i < 64; i++) {
        sb.append('§');
    }
    sb.setCharAt(30, 'A');
    // expect B/S(64)
    testHighLevelEncodeString(sb.toString(), 21 + 64 * 8);
}
