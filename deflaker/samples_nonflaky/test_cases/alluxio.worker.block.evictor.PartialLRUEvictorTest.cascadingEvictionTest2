/**
 * Tests the cascading eviction with the first and second tier filled resulting in blocks in the
 * second tier are evicted.
 */
@Test
public void cascadingEvictionTest2() throws Exception {
    // Two tiers, the second tier has more dirs than the first tier and each dir in the second tier
    // has more space than any dir in the first tier. Fill in all dirs and request space from the
    // first tier, blocks should be moved from the first to the second tier, and some blocks in the
    // second tier should be evicted to hold blocks moved from the first tier.
    BlockStoreLocation anyDirInFirstTier = BlockStoreLocation.anyDirInTier(TieredBlockStoreTestUtils.TIER_ALIAS[0]);
    int nDirInFirstTier = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0].length;
    int nDirInSecondTier = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[1].length;
    long smallestCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0][0];
    long delta = smallestCapacity / 10;
    long blockId = BLOCK_ID;
    for (int tierLevel : TieredBlockStoreTestUtils.TIER_ORDINAL) {
        long[] tierCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[tierLevel];
        for (int dirIdx = 0; dirIdx < tierCapacity.length; dirIdx++) {
            cache(SESSION_ID, blockId, tierCapacity[dirIdx] - dirIdx * delta, tierLevel, dirIdx);
            blockId++;
        }
    }
    EvictionPlan plan = mEvictor.freeSpaceWithView(smallestCapacity, anyDirInFirstTier, mMetadataView);
    assertTrue(EvictorTestUtils.validCascadingPlan(smallestCapacity, plan, mMetaManager));
    // block in StorageDir with max free space in the first tier needs to be moved to the second
    // tier
    assertEquals(1, plan.toMove().size());
    long blockIdMovedInFirstTier = plan.toMove().get(0).getBlockId();
    assertEquals(BLOCK_ID + nDirInFirstTier - 1, blockIdMovedInFirstTier);
    // block in StorageDir with max free space in the second tier will be evicted to hold blocks
    // moved from first tier
    assertEquals(1, plan.toEvict().size());
    long blockIdEvictedInSecondTier = plan.toEvict().get(0).getFirst();
    assertEquals(BLOCK_ID + nDirInFirstTier + nDirInSecondTier - 1, blockIdEvictedInSecondTier);
}
