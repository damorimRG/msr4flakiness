public void testSplit3() {
    // Test invalid split cases
    byte[] low = { 1, 1, 1 };
    byte[] high = { 1, 1, 3 };
    // If swapped, should throw IAE
    try {
        Bytes.split(high, low, 1);
        fail("Should not be able to split if low > high");
    } catch (IllegalArgumentException iae) {
    // Correct
    }
    // Single split should work
    byte[][] parts = Bytes.split(low, high, 1);
    for (int i = 0; i < parts.length; i++) {
        System.out.println("" + i + " -> " + Bytes.toStringBinary(parts[i]));
    }
    assertEquals("Returned split should have 3 parts but has " + parts.length, 3, parts.length);
    // If split more than once, use additional byte to split
    parts = Bytes.split(low, high, 2);
    assertNotNull("Split with an additional byte", parts);
    assertEquals(parts.length, low.length + 1);
    // Split 0 times should throw IAE
    try {
        Bytes.split(low, high, 0);
        fail("Should not be able to split 0 times");
    } catch (IllegalArgumentException iae) {
    // Correct
    }
}
