@Test
@SuppressWarnings("deprecation")
void allMongoClientOptionsCanBeSet() {
    MongoClientOptions.Builder builder = MongoClientOptions.builder();
    builder.alwaysUseMBeans(true);
    builder.connectionsPerHost(101);
    builder.connectTimeout(10001);
    builder.cursorFinalizerEnabled(false);
    builder.description("test");
    builder.maxWaitTime(120001);
    builder.socketKeepAlive(false);
    builder.socketTimeout(1000);
    builder.threadsAllowedToBlockForConnectionMultiplier(6);
    builder.minConnectionsPerHost(0);
    builder.maxConnectionIdleTime(60000);
    builder.maxConnectionLifeTime(60000);
    builder.heartbeatFrequency(10001);
    builder.minHeartbeatFrequency(501);
    builder.heartbeatConnectTimeout(20001);
    builder.heartbeatSocketTimeout(20001);
    builder.localThreshold(20);
    builder.requiredReplicaSetName("testReplicaSetName");
    MongoClientOptions options = builder.build();
    MongoProperties properties = new MongoProperties();
    MongoClient client = new MongoClientFactory(properties, null).createMongoClient(options);
    MongoClientOptions wrapped = client.getMongoClientOptions();
    assertThat(wrapped.isAlwaysUseMBeans()).isEqualTo(options.isAlwaysUseMBeans());
    assertThat(wrapped.getConnectionsPerHost()).isEqualTo(options.getConnectionsPerHost());
    assertThat(wrapped.getConnectTimeout()).isEqualTo(options.getConnectTimeout());
    assertThat(wrapped.isCursorFinalizerEnabled()).isEqualTo(options.isCursorFinalizerEnabled());
    assertThat(wrapped.getDescription()).isEqualTo(options.getDescription());
    assertThat(wrapped.getMaxWaitTime()).isEqualTo(options.getMaxWaitTime());
    assertThat(wrapped.getSocketTimeout()).isEqualTo(options.getSocketTimeout());
    assertThat(wrapped.isSocketKeepAlive()).isEqualTo(options.isSocketKeepAlive());
    assertThat(wrapped.getThreadsAllowedToBlockForConnectionMultiplier()).isEqualTo(options.getThreadsAllowedToBlockForConnectionMultiplier());
    assertThat(wrapped.getMinConnectionsPerHost()).isEqualTo(options.getMinConnectionsPerHost());
    assertThat(wrapped.getMaxConnectionIdleTime()).isEqualTo(options.getMaxConnectionIdleTime());
    assertThat(wrapped.getMaxConnectionLifeTime()).isEqualTo(options.getMaxConnectionLifeTime());
    assertThat(wrapped.getHeartbeatFrequency()).isEqualTo(options.getHeartbeatFrequency());
    assertThat(wrapped.getMinHeartbeatFrequency()).isEqualTo(options.getMinHeartbeatFrequency());
    assertThat(wrapped.getHeartbeatConnectTimeout()).isEqualTo(options.getHeartbeatConnectTimeout());
    assertThat(wrapped.getHeartbeatSocketTimeout()).isEqualTo(options.getHeartbeatSocketTimeout());
    assertThat(wrapped.getLocalThreshold()).isEqualTo(options.getLocalThreshold());
    assertThat(wrapped.getRequiredReplicaSetName()).isEqualTo(options.getRequiredReplicaSetName());
}
