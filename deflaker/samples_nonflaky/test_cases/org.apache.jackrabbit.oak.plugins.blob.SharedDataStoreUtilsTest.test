@Test
public void test() throws Exception {
    File rootFolder = folder.newFolder();
    dataStore = getBlobStore(rootFolder);
    String repoId1 = UUID.randomUUID().toString();
    String repoId2 = UUID.randomUUID().toString();
    // Add repository records
    dataStore.addMetadataRecord(new ByteArrayInputStream(new byte[0]), SharedStoreRecordType.REPOSITORY.getNameFromId(repoId1));
    DataRecord repo1 = dataStore.getMetadataRecord(SharedStoreRecordType.REPOSITORY.getNameFromId(repoId1));
    dataStore.addMetadataRecord(new ByteArrayInputStream(new byte[0]), SharedStoreRecordType.REPOSITORY.getNameFromId(repoId2));
    DataRecord repo2 = dataStore.getMetadataRecord(SharedStoreRecordType.REPOSITORY.getNameFromId(repoId2));
    // Add reference marker record for repo1
    dataStore.addMetadataRecord(new ByteArrayInputStream(new byte[0]), SharedStoreRecordType.MARKED_START_MARKER.getNameFromId(repoId1));
    DataRecord markerRec1 = dataStore.getMetadataRecord(SharedStoreRecordType.MARKED_START_MARKER.getNameFromId(repoId1));
    assertEquals(SharedStoreRecordType.MARKED_START_MARKER.getIdFromName(markerRec1.getIdentifier().toString()), repoId1);
    long lastModifiedMarkerRec1 = markerRec1.getLastModified();
    TimeUnit.MILLISECONDS.sleep(100);
    // Add reference records
    dataStore.addMetadataRecord(new ByteArrayInputStream(new byte[0]), SharedStoreRecordType.REFERENCES.getNameFromId(repoId1));
    DataRecord rec1 = dataStore.getMetadataRecord(SharedStoreRecordType.REFERENCES.getNameFromId(repoId1));
    long lastModifiedRec1 = rec1.getLastModified();
    TimeUnit.MILLISECONDS.sleep(25);
    dataStore.addMetadataRecord(new ByteArrayInputStream(new byte[0]), SharedStoreRecordType.REFERENCES.getNameFromId(repoId2));
    DataRecord rec2 = dataStore.getMetadataRecord(SharedStoreRecordType.REFERENCES.getNameFromId(repoId2));
    long lastModifiedRec2 = rec2.getLastModified();
    assertEquals(SharedStoreRecordType.REPOSITORY.getIdFromName(repo1.getIdentifier().toString()), repoId1);
    assertEquals(SharedStoreRecordType.REPOSITORY.getIdFromName(repo2.getIdentifier().toString()), repoId2);
    assertEquals(SharedStoreRecordType.REFERENCES.getIdFromName(rec1.getIdentifier().toString()), repoId1);
    assertEquals(SharedStoreRecordType.REFERENCES.getIdFromName(rec2.getIdentifier().toString()), repoId2);
    // All the references from registered repositories are available
    Assert.assertTrue(SharedDataStoreUtils.refsNotAvailableFromRepos(dataStore.getAllMetadataRecords(SharedStoreRecordType.REPOSITORY.getType()), dataStore.getAllMetadataRecords(SharedStoreRecordType.REFERENCES.getType())).isEmpty());
    // Since, we don't care about which file specifically but only the earliest timestamped record
    // Earliest time should be the min timestamp from the 2 reference files
    long minRefTime = (lastModifiedRec1 <= lastModifiedRec2 ? lastModifiedRec1 : lastModifiedRec2);
    assertEquals(SharedDataStoreUtils.getEarliestRecord(dataStore.getAllMetadataRecords(SharedStoreRecordType.REFERENCES.getType())).getLastModified(), minRefTime);
    // the marker timestamp should be the minimum
    long minMarkerTime = SharedDataStoreUtils.getEarliestRecord(dataStore.getAllMetadataRecords(SharedStoreRecordType.MARKED_START_MARKER.getType())).getLastModified();
    Assert.assertTrue(minRefTime >= minMarkerTime);
    // Delete references and check back if deleted
    dataStore.deleteAllMetadataRecords(SharedStoreRecordType.REFERENCES.getType());
    Assert.assertTrue(dataStore.getAllMetadataRecords(SharedStoreRecordType.REFERENCES.getType()).isEmpty());
    // Delete markers and check back if deleted
    dataStore.deleteAllMetadataRecords(SharedStoreRecordType.MARKED_START_MARKER.getType());
    Assert.assertTrue(dataStore.getAllMetadataRecords(SharedStoreRecordType.MARKED_START_MARKER.getType()).isEmpty());
    // Repository ids should still be available
    assertEquals(2, dataStore.getAllMetadataRecords(SharedStoreRecordType.REPOSITORY.getType()).size());
}
