@Test
public void testRepSimilarWithBinaryFeatureVectorsAndRerank() throws Exception {
    IndexDefinitionBuilder idxb = new IndexDefinitionBuilder().noAsync();
    idxb.indexRule("nt:base").property("fv").useInSimilarity(true).nodeScopeIndex().propertyIndex();
    Tree idx = root.getTree("/").getChild("oak:index").addChild("test1");
    idxb.build(idx);
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    URI uri = getClass().getResource("/org/apache/jackrabbit/oak/query/fvs.csv").toURI();
    File file = new File(uri);
    Collection<String> children = new LinkedList<>();
    for (String line : IOUtils.readLines(new FileInputStream(file), Charset.defaultCharset())) {
        String[] split = line.split(",");
        List<Double> values = new LinkedList<>();
        int i = 0;
        for (String s : split) {
            if (i > 0) {
                values.add(Double.parseDouble(s));
            }
            i++;
        }
        byte[] bytes = SimSearchUtils.toByteArray(values);
        List<Double> actual = SimSearchUtils.toDoubles(bytes);
        assertEquals(values, actual);
        Blob blob = root.createBlob(new ByteArrayInputStream(bytes));
        String name = split[0];
        Tree child = test.addChild(name);
        child.setProperty("fv", blob, Type.BINARY);
        children.add(child.getPath());
    }
    root.commit();
    // check that similarity changes across different feature vectors
    List<String> baseline = new LinkedList<>();
    for (String similarPath : children) {
        String query = "select [jcr:path] from [nt:base] where similar(., '" + similarPath + "')";
        Iterator<String> result = executeQuery(query, "JCR-SQL2").iterator();
        List<String> current = new LinkedList<>();
        while (result.hasNext()) {
            String next = result.next();
            current.add(next);
        }
        assertNotEquals(baseline, current);
        baseline.clear();
        baseline.addAll(current);
    }
}
