@Test
public void should_show_multiple_differences() {
    // GIVEN
    final Name actualName = new Name("Magic", "Johnson");
    final Name nullName = new Name(null, "Ginobili");
    RecursiveComparisonConfiguration recursiveComparisonConfiguration = new RecursiveComparisonConfiguration();
    recursiveComparisonConfiguration.setIgnoreAllActualNullFields(true);
    List<ComparisonDifference> differences = computeDifferences(actualName, nullName, recursiveComparisonConfiguration);
    // WHEN
    // @format:off
    String message = shouldBeEqualByComparingFieldByFieldRecursively(actualName, nullName, differences, recursiveComparisonConfiguration, REPRESENTATION).create(TEST_DESCRIPTION, REPRESENTATION);
    // @format:on
    // THEN
    assertThat(message).isEqualTo(format("[Test] %n" + "Expecting:%n" + "  <Name[first='Magic', last='Johnson']>%n" + "to be equal to:%n" + "  <Name[first='null', last='Ginobili']>%n" + "when recursively comparing field by field, but found the following 2 differences:%n" + "%n" + "field/property 'first' differ:%n" + "- actual value   : \"Magic\"%n" + "- expected value : null%n" + "%n" + "field/property 'last' differ:%n" + "- actual value   : \"Johnson\"%n" + "- expected value : \"Ginobili\"%n" + "%n" + "The recursive comparison was performed with this configuration:%n%s", CONFIGURATION_PROVIDER.representation().toStringOf(recursiveComparisonConfiguration)));
}
