@Test
public // UT uses Reflection to avoid removing null-validation from static method
void testSafeGetThrowsException() throws Exception {
    final AttributesImpl attr = new AttributesImpl() {

        @Override
        public String getValue(int index) {
            return null;
        }
    };
    try {
        final Class<?> clazz = ImportControlLoader.class;
        final Method privateMethod = clazz.getDeclaredMethod("safeGet", Attributes.class, String.class);
        privateMethod.setAccessible(true);
        privateMethod.invoke(null, attr, "you_cannot_find_me");
        fail("exception expected");
    } catch (InvocationTargetException ex) {
        assertSame(SAXException.class, ex.getCause().getClass(), "Invalid exception class");
        assertEquals("missing attribute you_cannot_find_me", ex.getCause().getMessage(), "Invalid exception message");
    }
}
