@Test
public void partitionedReset() {
    AtomicInteger maxBatchSize = new AtomicInteger(0);
    DocumentStore store = new DocumentStoreWrapper(new MemoryDocumentStore()) {

        @Override
        public <T extends Document> List<T> createOrUpdate(Collection<T> collection, List<UpdateOp> updateOps) {
            maxBatchSize.set(Math.max(maxBatchSize.get(), updateOps.size()));
            return super.createOrUpdate(collection, updateOps);
        }
    };
    // set batch size to half the update limit
    int batchSize = DocumentNodeStoreBuilder.UPDATE_LIMIT / 2;
    System.setProperty("oak.documentMK.createOrUpdateBatchSize", String.valueOf(batchSize));
    try {
        DocumentNodeStore ns = builderProvider.newBuilder().setAsyncDelay(0).setDocumentStore(store).build();
        DocumentNodeStoreBranch branch = ns.createBranch(ns.getRoot());
        NodeBuilder builder = branch.getBase().builder();
        for (int i = 0; i < DocumentNodeStoreBuilder.UPDATE_LIMIT * 2; i++) {
            builder.child("c-" + i).setProperty("p", "a");
        }
        branch.setRoot(builder.getNodeState());
        branch.persist();
        maxBatchSize.set(0);
        ns.reset(asDocumentNodeState(branch.getHead()).getRootRevision(), asDocumentNodeState(branch.getBase()).getRootRevision().asBranchRevision(ns.getClusterId()));
        assertThat(maxBatchSize.get(), greaterThan(0));
        assertThat(maxBatchSize.get(), lessThanOrEqualTo(batchSize));
    } finally {
        System.clearProperty("oak.documentMK.createOrUpdateBatchSize");
    }
}
