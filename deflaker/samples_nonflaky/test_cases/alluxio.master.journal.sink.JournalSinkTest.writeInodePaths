@Test
public void writeInodePaths() throws Exception {
    String path = "/file";
    createFile(path);
    final long createId1 = findFile("file", path);
    assertNotEquals(INVALID_ID, createId1);
    assertNotEquals(INVALID_ID, findCompleteFile(createId1, path));
    path = "/for_nested_file/nested_file";
    createFile(path);
    assertNotEquals(INVALID_ID, findDir("for_nested_file", new AlluxioURI(path).getParent().getPath()));
    final long createId2 = findFile("nested_file", path);
    assertNotEquals(INVALID_ID, createId2);
    assertNotEquals(INVALID_ID, findCompleteFile(createId2, path));
    path = "/dir";
    createDir(path);
    assertNotEquals(INVALID_ID, findDir("dir", path));
    path = "/for_nested_dir/nested_dir";
    createDir(path);
    assertNotEquals(INVALID_ID, findDir("for_nested_dir", new AlluxioURI(path).getParent().getPath()));
    assertNotEquals(INVALID_ID, findDir("nested_dir", path));
    path = "/for_nested_dir/nested_dir/nested_dir_2";
    createDir(path);
    assertNotEquals(INVALID_ID, findDir("nested_dir_2", path));
    path = "/for_nested_dir/nested_dir_3/nested_dir_4";
    createDir(path);
    assertNotEquals(INVALID_ID, findDir("nested_dir_3", new AlluxioURI(path).getParent().getPath()));
    assertNotEquals(INVALID_ID, findDir("nested_dir_4", path));
    path = "/rename_src";
    String newPath = "/rename_dst";
    createFile(path);
    mFileSystemMaster.rename(new AlluxioURI(path), new AlluxioURI(newPath), RenameContext.defaults());
    final long renameId = findFile("rename_src", path);
    assertNotEquals(INVALID_ID, renameId);
    assertNotEquals(INVALID_ID, findCompleteFile(renameId, path));
    assertNotEquals(INVALID_ID, findRename("rename_dst", path, newPath));
    path = "/deleted_file";
    createFile(path);
    mFileSystemMaster.delete(new AlluxioURI(path), DeleteContext.defaults());
    final long deleteId = findFile("deleted_file", path);
    assertNotEquals(INVALID_ID, deleteId);
    assertNotEquals(INVALID_ID, findCompleteFile(deleteId, path));
    assertNotEquals(INVALID_ID, findDelete(deleteId, path));
    path = "/deleted_dir/file1";
    createFile(path);
    mFileSystemMaster.delete(new AlluxioURI("/deleted_dir"), DeleteContext.create(DeletePOptions.newBuilder().setRecursive(true)));
    final long deleteId1 = findFile("file1", path);
    assertNotEquals(INVALID_ID, deleteId1);
    assertNotEquals(INVALID_ID, findCompleteFile(deleteId1, path));
    assertNotEquals(INVALID_ID, findDelete(deleteId1, path));
}
