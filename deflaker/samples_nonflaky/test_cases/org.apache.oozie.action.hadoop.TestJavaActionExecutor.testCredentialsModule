public void testCredentialsModule() throws Exception {
    String actionXml = "<workflow-app xmlns='uri:oozie:workflow:0.2.5' name='pig-wf'>" + "<credentials>" + "<credential name='abcname' type='abc'>" + "<property>" + "<name>property1</name>" + "<value>value1</value>" + "</property>" + "<property>" + "<name>property2</name>" + "<value>value2</value>" + "</property>" + "<property>" + "<name>${property3}</name>" + "<value>${value3}</value>" + "</property>" + "</credential>" + "</credentials>" + "<start to='pig1' />" + "<action name='pig1' cred='abcname'>" + "<pig>" + "</pig>" + "<ok to='end' />" + "<error to='fail' />" + "</action>" + "<kill name='fail'>" + "<message>Pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>" + "</kill>" + "<end name='end' />" + "</workflow-app>";
    JavaActionExecutor ae = new JavaActionExecutor();
    WorkflowJobBean wfBean = addRecordToWfJobTable("test1", actionXml);
    WorkflowActionBean action = (WorkflowActionBean) wfBean.getActions().get(0);
    action.setType(ae.getType());
    action.setCred("abcname");
    String actionxml = "<pig>" + "<job-tracker>${jobTracker}</job-tracker>" + "<name-node>${nameNode}</name-node>" + "<prepare>" + "<delete path='outputdir' />" + "</prepare>" + "<configuration>" + "<property>" + "<name>mapred.compress.map.output</name>" + "<value>true</value>" + "</property>" + "<property>" + "<name>mapred.job.queue.name</name>" + "<value>${queueName}</value>" + "</property>" + "</configuration>" + "<script>org/apache/oozie/examples/pig/id.pig</script>" + "<param>INPUT=${inputDir}</param>" + "<param>OUTPUT=${outputDir}/pig-output</param>" + "</pig>";
    action.setConf(actionxml);
    Context context = new Context(wfBean, action);
    Element actionXmlconf = XmlUtils.parseXml(action.getConf());
    // action job configuration
    Configuration actionConf = ae.createBaseHadoopConf(context, actionXmlconf);
    // Setting the credential properties in launcher conf
    Map<String, CredentialsProperties> credProperties = ae.setCredentialPropertyToActionConf(context, action, actionConf);
    assertNotNull(credProperties);
    CredentialsProperties prop = credProperties.get("abcname");
    assertEquals("value1", prop.getProperties().get("property1"));
    assertEquals("value2", prop.getProperties().get("property2"));
    assertEquals("val3", prop.getProperties().get("prop3"));
    // Try to load the token without it being defined in oozie-site; should get an exception
    CredentialsProviderFactory.destroy();
    JobConf credentialsConf = new JobConf();
    Credentials credentials = new Credentials();
    Configuration launcherConf = ae.createBaseHadoopConf(context, actionXmlconf);
    XConfiguration.copy(launcherConf, credentialsConf);
    try {
        ae.setCredentialTokens(credentials, credentialsConf, context, action, credProperties);
        fail("Should have gotten an exception but did not");
    } catch (ActionExecutorException aee) {
        assertEquals("JA020", aee.getErrorCode());
        assertTrue(aee.getMessage().contains("type [abc]"));
        assertTrue(aee.getMessage().contains("name [abcname]"));
    }
    CredentialsProviderFactory.destroy();
    // Define 'abc' token type in oozie-site
    ConfigurationService.set("oozie.credentials.credentialclasses", "abc=org.apache.oozie.action.hadoop.InsertTestToken");
    // Try to load the token after being defined in oozie-site; should work correctly
    credentialsConf = new JobConf();
    credentials = new Credentials();
    launcherConf = ae.createBaseHadoopConf(context, actionXmlconf);
    XConfiguration.copy(launcherConf, credentialsConf);
    ae.setCredentialTokens(credentials, credentialsConf, context, action, credProperties);
    Token<? extends TokenIdentifier> tk = credentials.getToken(new Text("ABC Token"));
    assertNotNull(tk);
    byte[] secKey = credentials.getSecretKey(new Text(InsertTestToken.DUMMY_SECRET_KEY));
    assertNotNull(secKey);
    assertEquals(InsertTestToken.DUMMY_SECRET_KEY, new String(secKey, StandardCharsets.UTF_8));
}
