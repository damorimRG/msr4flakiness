@Test
public void testMultithreadingReadStreamAbort() throws Exception {
    final SharedInputBuffer inputBuffer = new SharedInputBuffer(10);
    final CapacityChannel capacityChannel = Mockito.mock(CapacityChannel.class);
    inputBuffer.updateCapacity(capacityChannel);
    Mockito.verify(capacityChannel).update(10);
    Mockito.reset(capacityChannel);
    final ExecutorService executorService = Executors.newFixedThreadPool(2);
    final Future<Boolean> task1 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            Thread.sleep(1000);
            inputBuffer.abort();
            return Boolean.TRUE;
        }
    });
    final Future<Integer> task2 = executorService.submit(new Callable<Integer>() {

        @Override
        public Integer call() throws Exception {
            return inputBuffer.read();
        }
    });
    Assert.assertEquals(Boolean.TRUE, task1.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Assert.assertEquals(Integer.valueOf(-1), task2.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Mockito.verify(capacityChannel, Mockito.never()).update(10);
}
