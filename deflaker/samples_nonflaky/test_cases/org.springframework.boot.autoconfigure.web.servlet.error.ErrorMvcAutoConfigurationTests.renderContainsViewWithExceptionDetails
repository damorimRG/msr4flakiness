@Test
void renderContainsViewWithExceptionDetails() throws Exception {
    this.contextRunner.run((context) -> {
        View errorView = context.getBean("error", View.class);
        ErrorAttributes errorAttributes = context.getBean(ErrorAttributes.class);
        DispatcherServletWebRequest webRequest = createWebRequest(new IllegalStateException("Exception message"), false);
        errorView.render(errorAttributes.getErrorAttributes(webRequest, true), webRequest.getRequest(), webRequest.getResponse());
        assertThat(webRequest.getResponse().getContentType()).isEqualTo("text/html;charset=UTF-8");
        String responseString = ((MockHttpServletResponse) webRequest.getResponse()).getContentAsString();
        assertThat(responseString).contains("<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>").contains("<div>Exception message</div>").contains("<div style='white-space:pre-wrap;'>java.lang.IllegalStateException");
    });
}
