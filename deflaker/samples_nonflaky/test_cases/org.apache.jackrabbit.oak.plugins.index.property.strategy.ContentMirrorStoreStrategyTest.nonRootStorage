@Test
public void nonRootStorage() throws Exception {
    IndexStoreStrategy store = new ContentMirrorStoreStrategy(INDEX_CONTENT_NODE_NAME, "/content", false);
    NodeState root = EMPTY_NODE;
    NodeBuilder builder = root.builder();
    Supplier<NodeBuilder> index = () -> builder;
    for (String path : asList("a", "a/c", "b")) {
        store.update(index, path, null, null, EMPTY, KEY);
    }
    FilterImpl filter = FilterImpl.newTestInstance();
    filter.restrictPath("/content", Filter.PathRestriction.ALL_CHILDREN);
    NodeBuilder indexMeta = EMPTY_NODE.builder();
    indexMeta.setChildNode(INDEX_CONTENT_NODE_NAME, builder.getNodeState());
    Iterable<String> paths = store.query(filter, null, indexMeta.getNodeState(), KEY);
    assertThat(copyOf(paths), containsInAnyOrder("a", "a/c", "b"));
    FilterImpl filter2 = FilterImpl.newTestInstance();
    filter2.restrictPath("/content/a", Filter.PathRestriction.ALL_CHILDREN);
    paths = store.query(filter2, null, indexMeta.getNodeState(), KEY);
    assertThat(copyOf(paths), containsInAnyOrder("a", "a/c"));
    store = new ContentMirrorStoreStrategy(INDEX_CONTENT_NODE_NAME, "/content", true);
    paths = store.query(filter, null, indexMeta.getNodeState(), KEY);
    assertThat(copyOf(paths), containsInAnyOrder("/content/a", "/content/a/c", "/content/b"));
    paths = store.query(filter2, null, indexMeta.getNodeState(), KEY);
    assertThat(copyOf(paths), containsInAnyOrder("/content/a", "/content/a/c"));
}
