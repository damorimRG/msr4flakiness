@Test
public void addInodeModeFromJournalWithEmptyOwnership() throws Exception {
    createPath(mTree, NESTED_FILE_URI, sNestedFileContext);
    MutableInode<?> root = getInodeByPath("/");
    MutableInode<?> nested = getInodeByPath("/nested");
    MutableInode<?> test = getInodeByPath("/nested/test");
    MutableInode<?> file = getInodeByPath("/nested/test/file");
    MutableInode<?>[] inodeChildren = { nested, test, file };
    for (MutableInode<?> child : inodeChildren) {
        child.setOwner("");
        child.setGroup("");
        child.setMode((short) 0600);
    }
    // reset the tree
    mTree.processJournalEntry(root.toJournalEntry());
    // re-init the root since the tree was reset above
    mTree.getRoot();
    try (LockedInodePath inodePath = mTree.lockFullInodePath(new AlluxioURI("/"), LockPattern.WRITE_INODE)) {
        assertEquals(0, mTree.getDescendants(inodePath).getInodePathList().size());
        mTree.processJournalEntry(nested.toJournalEntry());
        mTree.processJournalEntry(test.toJournalEntry());
        mTree.processJournalEntry(file.toJournalEntry());
        List<LockedInodePath> descendants = mTree.getDescendants(inodePath).getInodePathList();
        assertEquals(inodeChildren.length, descendants.size());
        for (LockedInodePath childPath : descendants) {
            Inode child = childPath.getInodeOrNull();
            Assert.assertNotNull(child);
            Assert.assertEquals("", child.getOwner());
            Assert.assertEquals("", child.getGroup());
            Assert.assertEquals((short) 0600, child.getMode());
        }
    }
}
