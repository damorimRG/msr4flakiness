@Test
public void sufficientWriteConcern() throws Exception {
    sufficientWriteConcernReplicaSet(WriteConcern.ACKNOWLEDGED, false);
    sufficientWriteConcernReplicaSet(WriteConcern.JOURNALED, false);
    sufficientWriteConcernReplicaSet(WriteConcern.MAJORITY, true);
    sufficientWriteConcernReplicaSet(WriteConcern.FSYNC_SAFE, false);
    sufficientWriteConcernReplicaSet(WriteConcern.FSYNCED, false);
    sufficientWriteConcernReplicaSet(WriteConcern.JOURNAL_SAFE, false);
    sufficientWriteConcernReplicaSet(WriteConcern.NORMAL, false);
    sufficientWriteConcernReplicaSet(WriteConcern.REPLICA_ACKNOWLEDGED, true);
    sufficientWriteConcernReplicaSet(WriteConcern.REPLICAS_SAFE, true);
    sufficientWriteConcernReplicaSet(WriteConcern.SAFE, false);
    sufficientWriteConcernReplicaSet(WriteConcern.UNACKNOWLEDGED, false);
    sufficientWriteConcernSingleNode(WriteConcern.ACKNOWLEDGED, true);
    sufficientWriteConcernSingleNode(WriteConcern.JOURNALED, true);
    sufficientWriteConcernSingleNode(WriteConcern.MAJORITY, true);
    sufficientWriteConcernSingleNode(WriteConcern.FSYNC_SAFE, true);
    sufficientWriteConcernSingleNode(WriteConcern.FSYNCED, true);
    sufficientWriteConcernSingleNode(WriteConcern.JOURNAL_SAFE, true);
    sufficientWriteConcernSingleNode(WriteConcern.NORMAL, false);
    sufficientWriteConcernSingleNode(WriteConcern.REPLICA_ACKNOWLEDGED, true);
    sufficientWriteConcernSingleNode(WriteConcern.REPLICAS_SAFE, true);
    sufficientWriteConcernSingleNode(WriteConcern.SAFE, true);
    sufficientWriteConcernSingleNode(WriteConcern.UNACKNOWLEDGED, false);
}
private void sufficientWriteConcern(WriteConcern w, boolean replicaSet, boolean sufficient) {
    MongoClient mongo = mockMongoClient(replicaSet);
    assertEquals(sufficient, MongoConnection.isSufficientWriteConcern(mongo, w));
}
