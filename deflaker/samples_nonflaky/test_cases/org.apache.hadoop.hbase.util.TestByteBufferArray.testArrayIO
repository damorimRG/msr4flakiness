@Test
public void testArrayIO() throws IOException {
    int cap = 9 * 1024 * 1024, bufferSize = ByteBufferArray.getBufferSize(cap);
    ByteBufferArray array = new ByteBufferArray(cap, ALLOC);
    testReadAndWrite(array, 0, 512, (byte) 2);
    testReadAndWrite(array, cap - 512, 512, (byte) 3);
    testReadAndWrite(array, 4 * 1024 * 1024, 5 * 1024 * 1024, (byte) 4);
    testReadAndWrite(array, 256, 256, (byte) 5);
    testReadAndWrite(array, 257, 513, (byte) 6);
    testReadAndWrite(array, 0, cap, (byte) 7);
    testReadAndWrite(array, cap, 0, (byte) 8);
    testReadAndWrite(array, cap - 1, 1, (byte) 9);
    testReadAndWrite(array, cap - 2, 2, (byte) 10);
    expectedAssert(() -> testReadAndWrite(array, cap - 2, 3, (byte) 11));
    expectedAssert(() -> testReadAndWrite(array, cap + 1, 0, (byte) 12));
    expectedAssert(() -> testReadAndWrite(array, 0, cap + 1, (byte) 12));
    expectedAssert(() -> testReadAndWrite(array, -1, 0, (byte) 13));
    expectedAssert(() -> testReadAndWrite(array, 0, -23, (byte) 14));
    expectedAssert(() -> testReadAndWrite(array, 0, 0, (byte) 15));
    expectedAssert(() -> testReadAndWrite(array, 4096, cap - 4096 + 1, (byte) 16));
    testAsSubByteBuff(array, 0, cap, true);
    testAsSubByteBuff(array, 0, 0, false);
    testAsSubByteBuff(array, 0, 1, false);
    testAsSubByteBuff(array, 0, bufferSize - 1, false);
    testAsSubByteBuff(array, 0, bufferSize, false);
    testAsSubByteBuff(array, 0, bufferSize + 1, true);
    testAsSubByteBuff(array, 0, 2 * bufferSize, true);
    testAsSubByteBuff(array, 0, 5 * bufferSize, true);
    testAsSubByteBuff(array, cap - bufferSize - 1, bufferSize, true);
    testAsSubByteBuff(array, cap - bufferSize, bufferSize, false);
    testAsSubByteBuff(array, cap - bufferSize, 0, false);
    testAsSubByteBuff(array, cap - bufferSize, 1, false);
    testAsSubByteBuff(array, cap - bufferSize, bufferSize - 1, false);
    testAsSubByteBuff(array, cap - 2 * bufferSize, 2 * bufferSize, true);
    testAsSubByteBuff(array, cap - 2 * bufferSize, bufferSize + 1, true);
    testAsSubByteBuff(array, cap - 2 * bufferSize, bufferSize - 1, false);
    testAsSubByteBuff(array, cap - 2 * bufferSize, 0, false);
    expectedAssert(() -> testAsSubByteBuff(array, 0, cap + 1, false));
    expectedAssert(() -> testAsSubByteBuff(array, 0, -1, false));
    expectedAssert(() -> testAsSubByteBuff(array, -1, -1, false));
    expectedAssert(() -> testAsSubByteBuff(array, cap - bufferSize, bufferSize + 1, false));
    expectedAssert(() -> testAsSubByteBuff(array, 2 * bufferSize, cap - 2 * bufferSize + 1, false));
}
