@Test
public void concurrentOperations() throws Exception {
    final StreamCache streamCache = new StreamCache(Constants.HOUR_MS);
    class CacheTest<T> implements Runnable {

        private T mStream;

        CacheTest(T stream) {
            mStream = stream;
        }

        @Override
        public void run() {
            int cacheID = 0;
            if (mStream instanceof FileInStream) {
                cacheID = streamCache.put((FileInStream) mStream);
                Assert.assertSame(mStream, streamCache.getInStream(cacheID));
            }
            if (mStream instanceof FileOutStream) {
                cacheID = streamCache.put((FileOutStream) mStream);
                Assert.assertSame(mStream, streamCache.getOutStream(cacheID));
            }
            Assert.assertSame(mStream, streamCache.invalidate(cacheID));
        }
    }
    final int numOps = 100;
    final List<Thread> threads = new ArrayList<>();
    for (int i = 0; i < numOps; i++) {
        threads.add(new Thread(new CacheTest<>(mock(FileInStream.class))));
        threads.add(new Thread(new CacheTest<>(mock(FileOutStream.class))));
    }
    for (Thread thread : threads) {
        thread.start();
    }
    for (Thread thread : threads) {
        thread.join();
    }
    Assert.assertEquals(0, streamCache.size());
}
