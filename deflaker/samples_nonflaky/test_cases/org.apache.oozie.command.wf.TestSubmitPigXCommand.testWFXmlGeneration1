public void testWFXmlGeneration1() throws Exception {
    Configuration conf = new Configuration();
    conf.set(XOozieClient.RM, "jobtracker");
    conf.set(XOozieClient.NN, "namenode");
    conf.set(OozieClient.LIBPATH, "libpath");
    conf.set(XOozieClient.FILES, "/user/oozie/input1.txt,/user/oozie/input2.txt#my.txt");
    conf.set(XOozieClient.ARCHIVES, "/user/oozie/udf1.jar,/user/oozie/udf2.jar#my.jar");
    String pigArgsStr = "-a aaa -b bbb -c ccc -M -Da=aaa -Db=bbb -param input=abc";
    String[] args = pigArgsStr.split(" ");
    ActionUtils.setStrings(conf, XOozieClient.PIG_OPTIONS, args);
    String[] params = new String[] { "INPUT=/some/path", "OUTPUT=/some/other/path", "abc=xyz" };
    ActionUtils.setStrings(conf, XOozieClient.PIG_SCRIPT_PARAMS, params);
    SubmitPigXCommand submitPigCmd = new SubmitPigXCommand(conf);
    String xml = submitPigCmd.getWorkflowXml(conf);
    XLog.getLog(getClass()).info("xml = " + xml);
    StringBuilder sb = new StringBuilder();
    sb.append("<workflow-app xmlns=\"uri:oozie:workflow:0.2\" name=\"oozie-pig\">");
    sb.append("<start to=\"pig1\" />");
    sb.append("<action name=\"pig1\">");
    sb.append("<pig>");
    sb.append("<job-tracker>jobtracker</job-tracker>");
    sb.append("<name-node>namenode</name-node>");
    sb.append("<configuration>");
    sb.append("<property>");
    sb.append("<name>a</name>");
    sb.append("<value>aaa</value>");
    sb.append("</property>");
    sb.append("<property>");
    sb.append("<name>b</name>");
    sb.append("<value>bbb</value>");
    sb.append("</property>");
    sb.append("</configuration>");
    sb.append("<script>dummy.pig</script>");
    sb.append("<param>INPUT=/some/path</param>");
    sb.append("<param>OUTPUT=/some/other/path</param>");
    sb.append("<param>abc=xyz</param>");
    sb.append("<argument>-a</argument>");
    sb.append("<argument>aaa</argument>");
    sb.append("<argument>-b</argument>");
    sb.append("<argument>bbb</argument>");
    sb.append("<argument>-c</argument>");
    sb.append("<argument>ccc</argument>");
    sb.append("<argument>-M</argument>");
    sb.append("<argument>-param</argument>");
    sb.append("<argument>input=abc</argument>");
    sb.append("<file>/user/oozie/input1.txt#input1.txt</file>");
    sb.append("<file>/user/oozie/input2.txt#my.txt</file>");
    sb.append("<archive>/user/oozie/udf1.jar#udf1.jar</archive>");
    sb.append("<archive>/user/oozie/udf2.jar#my.jar</archive>");
    sb.append("</pig>");
    sb.append("<ok to=\"end\" />");
    sb.append("<error to=\"fail\" />");
    sb.append("</action>");
    sb.append("<kill name=\"fail\">");
    sb.append("<message>pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>");
    sb.append("</kill>");
    sb.append("<end name=\"end\" />");
    sb.append("</workflow-app>");
    Element root = XmlUtils.parseXml(sb.toString());
    String reference = XmlUtils.prettyPrint(root).toString();
    XLog.getLog(getClass()).info("reference xml = " + reference);
    assertTrue(xml.equals(reference));
}
