@SuppressWarnings("unchecked")
@Test
public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException {
    // create tokenStorage Object
    Credentials ts = new Credentials();
    Token<T> token1 = new Token();
    Token<T> token2 = new Token();
    Text service1 = new Text("service1");
    Text service2 = new Text("service2");
    Text alias1 = new Text("sometoken1");
    Text alias2 = new Text("sometoken2");
    Collection<Text> services = new ArrayList<Text>();
    services.add(service1);
    services.add(service2);
    token1.setService(service1);
    token2.setService(service2);
    ts.addToken(alias1, token1);
    ts.addToken(alias2, token2);
    // create keys and put it in
    final KeyGenerator kg = KeyGenerator.getInstance(DEFAULT_HMAC_ALGORITHM);
    String alias = "alias";
    Map<Text, byte[]> m = new HashMap<Text, byte[]>(10);
    for (int i = 0; i < 10; i++) {
        Key key = kg.generateKey();
        m.put(new Text(alias + i), key.getEncoded());
        ts.addSecretKey(new Text(alias + i), key.getEncoded());
    }
    // create file to store
    File tmpFileName = new File(tmpDir, "tokenStorageTest");
    DataOutputStream dos = new DataOutputStream(new FileOutputStream(tmpFileName));
    ts.write(dos);
    dos.close();
    // open and read it back
    DataInputStream dis = new DataInputStream(new FileInputStream(tmpFileName));
    ts = new Credentials();
    ts.readFields(dis);
    dis.close();
    // get the tokens and compare the services
    Map<Text, Token<? extends TokenIdentifier>> tokenMap = ts.getTokenMap();
    assertEquals("getTokenMap should return collection of size 2", 2, tokenMap.size());
    assertTrue("Token for alias " + alias1 + " must be present", tokenMap.containsKey(alias1));
    assertTrue("Token for alias " + alias2 + " must be present", tokenMap.containsKey(alias2));
    assertEquals("Token for service " + service1 + " must be present", service1, tokenMap.get(alias1).getService());
    assertEquals("Token for service " + service2 + " must be present", service2, tokenMap.get(alias2).getService());
    // compare secret keys
    Map<Text, byte[]> secretKeyMap = ts.getSecretKeyMap();
    assertEquals("wrong number of keys in the Storage", m.size(), ts.numberOfSecretKeys());
    for (Map.Entry<Text, byte[]> entry : m.entrySet()) {
        byte[] key = secretKeyMap.get(entry.getKey());
        assertNotNull("Secret key for alias " + entry.getKey() + " not found", key);
        assertTrue("Keys don't match for alias " + entry.getKey(), Arrays.equals(key, entry.getValue()));
    }
    tmpFileName.delete();
}
