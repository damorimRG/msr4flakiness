@Test
public void testLoaderBlock() throws Exception {
    // access to the same segment should not be blocked while loading an entry
    // only access to this entry is blocked
    final CacheLIRS<Integer, Integer> cache = new CacheLIRS.Builder<Integer, Integer>().maximumWeight(100).averageWeight(10).build();
    final Exception[] ex = new Exception[1];
    int threadCount = 10;
    Thread[] threads = new Thread[threadCount];
    final AtomicBoolean stop = new AtomicBoolean();
    final AtomicInteger nextKey = new AtomicInteger();
    final AtomicLong additionalWait = new AtomicLong();
    for (int i = 0; i < threadCount; i++) {
        Thread t = new Thread() {

            @Override
            public void run() {
                while (!stop.get()) {
                    final int key = nextKey.getAndIncrement();
                    final int wait = Math.min(key, 100);
                    Callable<Integer> callable = new Callable<Integer>() {

                        @Override
                        public Integer call() throws ExecutionException {
                            try {
                                Thread.sleep(wait);
                            } catch (InterruptedException e) {
                            // ignore
                            }
                            cache.get(key * 10);
                            return 1;
                        }
                    };
                    long start = System.currentTimeMillis();
                    try {
                        cache.get(key, callable);
                    } catch (Exception e) {
                        ex[0] = e;
                    }
                    long time = System.currentTimeMillis() - start;
                    additionalWait.addAndGet(time - wait);
                    cache.remove(key);
                }
            }
        };
        t.start();
        threads[i] = t;
    }
    // test for 1000 ms
    Thread.sleep(1000);
    stop.set(true);
    for (Thread t : threads) {
        t.join(30000);
        // if the thread is still alive after 30 seconds, we assume
        // there is a deadlock - we just let the threads alive,
        // but report a failure (what else could we do?)
        if (t.isAlive()) {
            assertFalse("Deadlock detected!", t.isAlive());
        }
    }
    if (ex[0] != null) {
        throw ex[0];
    }
    long add = additionalWait.get();
    assertTrue("Had to wait unexpectedly long for other threads: " + add, add < 30000);
}
