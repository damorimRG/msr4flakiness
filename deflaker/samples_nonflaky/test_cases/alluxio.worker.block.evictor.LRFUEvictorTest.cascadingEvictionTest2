/**
 * Tests the cascading eviction with the first and second tier filled resulting in blocks in the
 * second tier are evicted.
 */
@Test
public void cascadingEvictionTest2() throws Exception {
    // Two tiers, the second tier has more dirs than the first tier and each dir in the second tier
    // has more space than any dir in the first tier. Fill in all dirs and request space from the
    // first tier, blocks should be moved from the first to the second tier, and some blocks in the
    // second tier should be evicted to hold blocks moved from the first tier.
    long blockId = BLOCK_ID;
    long totalBlocks = 0;
    for (int tierOrdinal : TieredBlockStoreTestUtils.TIER_ORDINAL) {
        totalBlocks += TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[tierOrdinal].length;
    }
    Map<Long, Double> blockIdToCRF = new HashMap<>();
    for (int tierOrdinal : TieredBlockStoreTestUtils.TIER_ORDINAL) {
        long[] tierCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[tierOrdinal];
        for (int dirIdx = 0; dirIdx < tierCapacity.length; dirIdx++) {
            cache(SESSION_ID, blockId, tierCapacity[dirIdx], tierOrdinal, dirIdx);
            // update CRF of blocks when blocks are committed
            blockIdToCRF.put(blockId, calculateAccessWeight(totalBlocks - 1 - (blockId - BLOCK_ID)));
            blockId++;
        }
    }
    // access blocks in the order: 10, 10, 11, 10, 11, 12, 10, 11, 12, 13, 10, 11, 12, 13, 14
    // Update CRF of all blocks during each access
    for (int i = 0; i < totalBlocks; i++) {
        for (int j = 0; j <= i; j++) {
            access(BLOCK_ID + j);
            for (int k = 0; k < totalBlocks; k++) {
                if (k == j) {
                    blockIdToCRF.put(BLOCK_ID + k, blockIdToCRF.get(BLOCK_ID + k) * calculateAccessWeight(1L) + 1.0);
                } else {
                    blockIdToCRF.put(BLOCK_ID + k, blockIdToCRF.get(BLOCK_ID + k) * calculateAccessWeight(1L));
                }
            }
        }
    }
    List<Map.Entry<Long, Double>> blockCRF = getSortedCRF(blockIdToCRF);
    // sorted blocks in the first tier
    List<Long> blocksInFirstTier = new ArrayList<>();
    // sorted blocks in the second tier
    List<Long> blocksInSecondTier = new ArrayList<>();
    for (int i = 0; i < blockCRF.size(); i++) {
        long block = blockCRF.get(i).getKey();
        if (block - BLOCK_ID < TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0].length) {
            blocksInFirstTier.add(block);
        } else if (block - BLOCK_ID < TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0].length + TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[1].length) {
            blocksInSecondTier.add(block);
        }
    }
    BlockStoreLocation anyDirInFirstTier = BlockStoreLocation.anyDirInTier(TieredBlockStoreTestUtils.TIER_ALIAS[0]);
    int nDirInFirstTier = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0].length;
    long smallestCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[0][0];
    for (int i = 0; i < nDirInFirstTier; i++) {
        EvictionPlan plan = mEvictor.freeSpaceWithView(smallestCapacity, anyDirInFirstTier, mMetadataView);
        assertTrue(EvictorTestUtils.validCascadingPlan(smallestCapacity, plan, mMetaManager));
        // block with minimum CRF in the first tier needs to be moved to the second tier
        assertEquals(1, plan.toMove().size());
        long blockIdMovedInFirstTier = plan.toMove().get(0).getBlockId();
        long objectBlockIdInFirstTier = blocksInFirstTier.get(i);
        assertEquals(objectBlockIdInFirstTier, blockIdMovedInFirstTier);
        // cached block with minimum CRF in the second tier will be evicted to hold blocks moved
        // from first tier
        assertEquals(1, plan.toEvict().size());
        long blockIdEvictedInSecondTier = plan.toEvict().get(0).getFirst();
        long objectBlockIdInSecondTier = blocksInSecondTier.get(i);
        assertEquals(objectBlockIdInSecondTier, blockIdEvictedInSecondTier);
        // update CRF of the chosen blocks in case that they are chosen again
        for (int j = 0; j < totalBlocks; j++) {
            access(blockIdMovedInFirstTier);
        }
        for (int j = 0; j < totalBlocks; j++) {
            access(blockIdEvictedInSecondTier);
        }
    }
}
