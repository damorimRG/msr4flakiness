@Test
public void testFromExistingActionMapReduceSpecific() {
    final Streaming streaming = new StreamingBuilder().withMapper("mapper.sh").withReducer("reducer.sh").build();
    final Pipes pipes = new PipesBuilder().withMap("map").withReduce("reduce").build();
    final MapReduceActionBuilder builder = getBuilderInstance();
    builder.withName(NAME).withNameNode(NAME_NODE).withStreaming(streaming).withPipes(pipes).withConfigProperty(MAPRED_JOB_QUEUE_NAME, DEFAULT).withFile(FILES[0]).withFile(FILES[1]);
    final MapReduceAction mrAction = builder.build();
    final MapReduceActionBuilder fromExistingBuilder = getBuilderInstance(mrAction);
    final String newName = "fromExisting_" + NAME;
    fromExistingBuilder.withName(newName).withoutFile(FILES[1]).withFile(FILES[2]);
    final MapReduceAction modifiedMrAction = fromExistingBuilder.build();
    assertEquals(newName, modifiedMrAction.getName());
    assertEquals(mrAction.getNameNode(), modifiedMrAction.getNameNode());
    assertEquals(streaming, modifiedMrAction.getStreaming());
    assertEquals(pipes, modifiedMrAction.getPipes());
    final Map<String, String> expectedConfiguration = new LinkedHashMap<>();
    expectedConfiguration.put(MAPRED_JOB_QUEUE_NAME, DEFAULT);
    assertEquals(expectedConfiguration, modifiedMrAction.getConfiguration());
    assertEquals(Arrays.asList(FILES[0], FILES[2]), modifiedMrAction.getFiles());
}
