/**
 * Tests invoking {@link FileUtils#createBlockPath} method concurrently. This simulates the case
 * when multiple blocks belonging to the same storage dir get created concurrently.
 */
@Test
public void concurrentCreateStorageDirPath() throws Exception {
    /**
     * A class provides multiple concurrent threads to invoke {@link FileUtils#createBlockPath}.
     */
    class ConcurrentCreator implements Callable<Void> {

        private final String mPath;

        private final CyclicBarrier mBarrier;

        ConcurrentCreator(String path, CyclicBarrier barrier) {
            mPath = path;
            mBarrier = barrier;
        }

        @Override
        @Nullable
        public Void call() throws Exception {
            // Await until all threads submitted
            mBarrier.await();
            FileUtils.createBlockPath(mPath, mWorkerDataFolderPerms);
            return null;
        }
    }
    final int numCreators = 5;
    List<Future<Void>> futures = new ArrayList<>(numCreators);
    for (int iteration = 0; iteration < 5; iteration++) {
        final ExecutorService executor = Executors.newFixedThreadPool(numCreators);
        final CyclicBarrier barrier = new CyclicBarrier(numCreators);
        try {
            File storageDir = new File(mTestFolder.getRoot(), "tmp" + iteration);
            for (int i = 0; i < numCreators; i++) {
                File blockFile = new File(storageDir, String.valueOf(i));
                futures.add(executor.submit(new ConcurrentCreator(blockFile.getAbsolutePath(), barrier)));
            }
            for (Future<Void> f : futures) {
                f.get();
            }
            assertTrue(FileUtils.exists(storageDir.getAbsolutePath()));
        } finally {
            executor.shutdown();
        }
    }
}
