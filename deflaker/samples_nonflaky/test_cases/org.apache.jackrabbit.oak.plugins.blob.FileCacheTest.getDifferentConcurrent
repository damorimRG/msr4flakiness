/**
 * Retrieves different files concurrently.
 * @throws Exception
 */
@Test
public void getDifferentConcurrent() throws Exception {
    LOG.info("Started getDifferentConcurrent");
    File f = createFile(0, loader, cache, folder);
    File f2 = createFile(1, loader, cache, folder);
    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(2));
    closer.register(new ExecutorCloser(executorService, 5, TimeUnit.MILLISECONDS));
    CountDownLatch thread1Start = new CountDownLatch(1);
    SettableFuture<File> future1 = retrieveThread(executorService, ID_PREFIX + 0, cache, thread1Start);
    CountDownLatch thread2Start = new CountDownLatch(1);
    SettableFuture<File> future2 = retrieveThread(executorService, ID_PREFIX + 1, cache, thread2Start);
    thread1Start.countDown();
    thread2Start.countDown();
    future1.get();
    future2.get();
    LOG.info("Async tasks finished");
    assertCacheIfPresent(0, cache, f);
    assertCacheIfPresent(1, cache, f2);
    assertCacheStats(cache, 2, 8 * 1024, 2, 2);
    LOG.info("Finished getDifferentConcurrent");
}
