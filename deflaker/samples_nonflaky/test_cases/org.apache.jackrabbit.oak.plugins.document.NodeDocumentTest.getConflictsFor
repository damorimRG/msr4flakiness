@Test
public void getConflictsFor() {
    MemoryDocumentStore docStore = new MemoryDocumentStore();
    String id = Utils.getPathFromId("/");
    NodeDocument doc = new NodeDocument(docStore);
    doc.put(Document.ID, id);
    Iterable<Revision> branchCommits = Collections.emptyList();
    Set<Revision> conflicts = doc.getConflictsFor(branchCommits);
    assertTrue(conflicts.isEmpty());
    // add some collisions
    UpdateOp op = new UpdateOp(id, false);
    Revision r0 = Revision.newRevision(1);
    Revision r1 = Revision.newRevision(1);
    Revision c1 = Revision.newRevision(1);
    Revision r2 = Revision.newRevision(1);
    Revision c2 = Revision.newRevision(1);
    // backward compatibility test
    op.setMapEntry(COLLISIONS, r0, String.valueOf(true));
    // regular collision entries
    NodeDocument.addCollision(op, r1, c1);
    NodeDocument.addCollision(op, r2, c2);
    UpdateUtils.applyChanges(doc, op);
    branchCommits = Collections.singleton(r0);
    conflicts = doc.getConflictsFor(branchCommits);
    assertTrue(conflicts.isEmpty());
    branchCommits = Collections.singleton(r1.asBranchRevision());
    conflicts = doc.getConflictsFor(branchCommits);
    assertEquals(newHashSet(c1), conflicts);
    branchCommits = Collections.singleton(r2.asBranchRevision());
    conflicts = doc.getConflictsFor(branchCommits);
    assertEquals(newHashSet(c2), conflicts);
    branchCommits = Lists.newArrayList(r1.asBranchRevision(), r2.asBranchRevision());
    conflicts = doc.getConflictsFor(branchCommits);
    assertEquals(newHashSet(c1, c2), conflicts);
    branchCommits = Lists.newArrayList(r2.asBranchRevision(), r1.asBranchRevision());
    conflicts = doc.getConflictsFor(branchCommits);
    assertEquals(newHashSet(c1, c2), conflicts);
}
