public void testActionSharelibResolution() throws Exception {
    JavaActionExecutor ae = new JavaActionExecutor() {

        @Override
        protected String getDefaultShareLibName(Element actionXml) {
            return "java-action-executor";
        }
    };
    WorkflowJobBean wfBean = new WorkflowJobBean();
    String jobConf = "<configuration/>";
    wfBean.setConf(jobConf);
    WorkflowActionBean action = new WorkflowActionBean();
    Context context = new Context(wfBean, action);
    Configuration actionConf = new XConfiguration();
    Assert.assertArrayEquals(new String[] { "java-action-executor" }, ae.getShareLibNames(context, new Element("java"), actionConf));
    ConfigurationService.set("oozie.action.sharelib.for.java", "java-oozie-conf");
    Assert.assertArrayEquals(new String[] { "java-oozie-conf" }, ae.getShareLibNames(context, new Element("java"), actionConf));
    jobConf = "<configuration>" + "<property>" + "<name>oozie.action.sharelib.for.java</name>" + "<value>java-job-conf</value>" + "</property>" + "</configuration>";
    wfBean.setConf(jobConf);
    ae = new JavaActionExecutor() {

        @Override
        protected String getDefaultShareLibName(Element actionXml) {
            return "java-action-executor";
        }
    };
    Assert.assertArrayEquals(new String[] { "java-job-conf" }, ae.getShareLibNames(context, new Element("java"), actionConf));
    actionConf.set("oozie.action.sharelib.for.java", "java-action-conf");
    Assert.assertArrayEquals(new String[] { "java-action-conf" }, ae.getShareLibNames(context, new Element("java"), actionConf));
}
