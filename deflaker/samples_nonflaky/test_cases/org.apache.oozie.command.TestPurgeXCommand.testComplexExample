/**
 * Test : Test purging a lot of jobs (with different parent-child relationships and purge-eligibility) in one go
 *
 * @throws Exception if cannot insert records to the database
 */
public void testComplexExample() throws Exception {
    assertNotNull(jpaService);
    /* Job relationships:
        bundleJobA              yes     yes
            coordJobA           yes     ^
                wfJobA          yes     ^
                    subwfJobA   yes     ^
        bundleJobB              no      no
            coordJobB           yes     ^
                wfJobB          no      ^
        coordJobC               no      no
            wfJobC              no      ^
                subwfJobC       yes     ^
        coordJobD               yes     no
            wfJobD              no      ^
        wfJobE                  yes     yes
        wfJobF                  yes     no
            subwfJobF           no      ^
        */
    BundleJobBean bundleJobA = addRecordToBundleJobTable(Job.Status.SUCCEEDED, DateUtils.parseDateOozieTZ("2011-05-01T01:00Z"));
    BundleJobBean bundleJobB = addRecordToBundleJobTable(Job.Status.SUCCEEDED, DateUtils.parseDateOozieTZ("2011-06-01T01:00Z"));
    CoordinatorJobBean coordJobA = addRecordToCoordJobTable(CoordinatorJob.Status.SUCCEEDED, false, false);
    setLastModifiedTime(coordJobA, "2011-03-01T01:00Z");
    CoordinatorJobBean coordJobB = addRecordToCoordJobTable(CoordinatorJob.Status.SUCCEEDED, false, false);
    setLastModifiedTime(coordJobB, "2011-03-01T01:00Z");
    CoordinatorJobBean coordJobC = addRecordToCoordJobTable(CoordinatorJob.Status.SUCCEEDED, false, false);
    setLastModifiedTime(coordJobC, "2011-07-01T01:00Z");
    CoordinatorJobBean coordJobD = addRecordToCoordJobTable(CoordinatorJob.Status.SUCCEEDED, false, false);
    setLastModifiedTime(coordJobD, "2011-06-01T01:00Z");
    WorkflowJobBean wfJobA = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobA, "2011-02-01T01:00Z");
    WorkflowJobBean wfJobB = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobB, "2011-03-01T01:00Z");
    WorkflowJobBean wfJobC = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobC, "2011-06-01T01:00Z");
    WorkflowJobBean wfJobD = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobD, "2011-06-01T01:00Z");
    WorkflowJobBean wfJobE = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobE, "2011-01-01T01:00Z");
    WorkflowJobBean wfJobF = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    setEndTime(wfJobF, "2011-01-01T01:00Z");
    WorkflowActionBean wfActionA = addRecordToWfActionTable(wfJobA.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean wfActionB = addRecordToWfActionTable(wfJobB.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean wfActionC = addRecordToWfActionTable(wfJobC.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean wfActionD = addRecordToWfActionTable(wfJobD.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean wfActionE = addRecordToWfActionTable(wfJobE.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean wfActionF = addRecordToWfActionTable(wfJobF.getId(), "1", WorkflowAction.Status.OK);
    WorkflowJobBean subwfJobA = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED, wfJobA.getId());
    setEndTime(subwfJobA, "2011-01-01T01:00Z");
    WorkflowJobBean subwfJobC = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED, wfJobC.getId());
    setEndTime(subwfJobC, "2011-01-01T01:00Z");
    WorkflowJobBean subwfJobF = addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED, wfJobF.getId());
    setEndTime(subwfJobF, "2011-04-01T01:00Z");
    WorkflowActionBean subwfActionA = addRecordToWfActionTable(subwfJobA.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean subwfActionC = addRecordToWfActionTable(subwfJobC.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean subwfActionF = addRecordToWfActionTable(subwfJobF.getId(), "1", WorkflowAction.Status.OK);
    CoordinatorActionBean coordActionA = addRecordToCoordActionTable(coordJobA.getId(), 1, CoordinatorAction.Status.SUCCEEDED, "coord-action-get.xml", wfJobA.getId(), "SUCCEEDED", 0);
    CoordinatorActionBean coordActionB = addRecordToCoordActionTable(coordJobB.getId(), 1, CoordinatorAction.Status.SUCCEEDED, "coord-action-get.xml", wfJobB.getId(), "SUCCEEDED", 0);
    CoordinatorActionBean coordActionC = addRecordToCoordActionTable(coordJobC.getId(), 1, CoordinatorAction.Status.SUCCEEDED, "coord-action-get.xml", wfJobC.getId(), "SUCCEEDED", 0);
    CoordinatorActionBean coordActionD = addRecordToCoordActionTable(coordJobD.getId(), 1, CoordinatorAction.Status.SUCCEEDED, "coord-action-get.xml", wfJobD.getId(), "SUCCEEDED", 0);
    BundleActionBean bundleActionA = addRecordToBundleActionTable(bundleJobA.getId(), coordJobA.getId(), coordJobA.getAppName(), 0, Job.Status.SUCCEEDED);
    BundleActionBean bundleActionB = addRecordToBundleActionTable(bundleJobB.getId(), coordJobB.getId(), coordJobB.getAppName(), 0, Job.Status.SUCCEEDED);
    purgeWithSpecialParameters(wfJobB, coordJobC, bundleJobB);
    assertBundleJobPurged(bundleJobA);
    assertBundleActionPurged(bundleActionA);
    assertBundleJobNotPurged(bundleJobB);
    assertBundleActionNotPurged(bundleActionB);
    assertCoordinatorJobPurged(coordJobA);
    assertCoordinatorActionPurged(coordActionA);
    assertCoordinatorJobNotPurged(coordJobB);
    assertCoordinatorActionNotPurged(coordActionB);
    assertCoordinatorJobNotPurged(coordJobC);
    assertCoordinatorActionNotPurged(coordActionC);
    assertCoordinatorJobNotPurged(coordJobD);
    assertCoordinatorActionNotPurged(coordActionD);
    assertWorkflowJobPurged(wfJobA);
    assertWorkflowActionPurged(wfActionA);
    assertWorkflowJobNotPurged(wfJobB);
    assertWorkflowActionNotPurged(wfActionB);
    assertWorkflowJobNotPurged(wfJobC);
    assertWorkflowActionNotPurged(wfActionC);
    assertWorkflowJobNotPurged(wfJobD);
    assertWorkflowActionNotPurged(wfActionD);
    assertWorkflowJobPurged(wfJobE);
    assertWorkflowActionPurged(wfActionE);
    assertWorkflowJobNotPurged(wfJobF);
    assertWorkflowActionNotPurged(wfActionF);
    assertWorkflowJobPurged(subwfJobA);
    assertWorkflowActionPurged(subwfActionA);
    assertWorkflowJobNotPurged(subwfJobC);
    assertWorkflowActionNotPurged(subwfActionC);
    assertWorkflowJobNotPurged(subwfJobF);
    assertWorkflowActionNotPurged(subwfActionF);
}
