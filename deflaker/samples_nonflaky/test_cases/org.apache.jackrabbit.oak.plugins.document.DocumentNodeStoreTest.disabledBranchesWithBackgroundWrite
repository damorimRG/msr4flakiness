// OAK-6392
@Test
public void disabledBranchesWithBackgroundWrite() throws Exception {
    final Thread current = Thread.currentThread();
    final Set<Integer> updates = Sets.newHashSet();
    DocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> List<T> createOrUpdate(Collection<T> collection, List<UpdateOp> updateOps) {
            if (Thread.currentThread() != current) {
                updates.add(updateOps.size());
            }
            return super.createOrUpdate(collection, updateOps);
        }
    };
    final DocumentNodeStore ns = builderProvider.newBuilder().disableBranches().setDocumentStore(store).setUpdateLimit(20).setAsyncDelay(0).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    for (int i = 0; i < 30; i++) {
        builder.child("node-" + i).child("test");
    }
    merge(ns, builder);
    ns.runBackgroundOperations();
    final AtomicBoolean running = new AtomicBoolean(true);
    Thread bgThread = new Thread(new Runnable() {

        @Override
        public void run() {
            while (running.get()) {
                ns.runBackgroundOperations();
                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                // ignore
                }
            }
        }
    });
    bgThread.start();
    // perform up to 200 merges
    for (int j = 0; j < 200; j++) {
        builder = ns.getRoot().builder();
        for (int i = 0; i < 30; i++) {
            builder.child("node-" + i).child("test").setProperty("p", j);
        }
        merge(ns, builder);
        // break out after 20 when there are updates
        if (j > 20 && !updates.isEmpty()) {
            break;
        }
    }
    running.set(false);
    bgThread.join();
    // background thread must always update _lastRev from an entire
    // branch commit and never partially
    assertThat(updates, everyItem(is(30)));
    assertEquals(1, updates.size());
}
