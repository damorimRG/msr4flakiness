@Test
public void testMultithreadingWriteStreamAbort() throws Exception {
    final Charset charset = StandardCharsets.US_ASCII;
    final SharedOutputBuffer outputBuffer = new SharedOutputBuffer(20);
    final ExecutorService executorService = Executors.newFixedThreadPool(2);
    final Future<Boolean> task1 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            final byte[] tmp = "1234567890".getBytes(charset);
            for (int i = 0; i < 20; i++) {
                outputBuffer.write(tmp, 0, tmp.length);
            }
            outputBuffer.writeCompleted();
            return Boolean.TRUE;
        }
    });
    final Future<Boolean> task2 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            Thread.sleep(200);
            outputBuffer.abort();
            return Boolean.TRUE;
        }
    });
    Assert.assertEquals(Boolean.TRUE, task2.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    try {
        task1.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit());
    } catch (final ExecutionException ex) {
        Assert.assertTrue(ex.getCause() instanceof InterruptedIOException);
    }
}
