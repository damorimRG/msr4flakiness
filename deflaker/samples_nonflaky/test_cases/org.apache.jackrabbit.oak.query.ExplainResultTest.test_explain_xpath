@Test
public void test_explain_xpath() throws Exception {
    test("explain_result.txt");
    final String xpath = "/jcr:root/test//*";
    Result result = executeQuery(xpath, "xpath", Collections.emptyMap());
    int count = 0;
    for (Iterator<? extends ResultRow> rows = result.getRows().iterator(); rows.hasNext(); ) {
        rows.next();
        count = count + 1;
    }
    assertEquals("should exist 2 nodes", 2, count);
    Result explainResult = executeQuery("explain " + xpath, "xpath", Collections.emptyMap());
    int explainCount = 0;
    ResultRow explainRow = null;
    for (ResultRow row : explainResult.getRows()) {
        if (explainCount == 0) {
            explainRow = row;
        }
        explainCount = explainCount + 1;
    }
    assertEquals("should exist 1 result", 1, explainCount);
    assertNotNull("explain row should not be null", explainRow);
    assertTrue("result should have 'plan' column", Arrays.asList(explainResult.getColumnNames()).contains("plan"));
    assertTrue("result should have 'statement' column", Arrays.asList(explainResult.getColumnNames()).contains("statement"));
    final String explainedStatement = explainRow.getValue("statement").getValue(Type.STRING);
    assertTrue("'statement' should begin with 'select'", explainedStatement.startsWith("select"));
    assertTrue("statement should contain original xpath with prefix 'xpath: '", explainedStatement.contains("xpath: " + xpath));
}
