@Test
public void importIndex_newIndex() throws Exception {
    NodeBuilder builder = store.getRoot().builder();
    builder.child("oak:index");
    builder.child("a").setProperty("foo", "abc");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    String json = "{\"/oak:index/fooIndex\": {\n" + "    \"reindexCount\": 1,\n" + "    \"reindex\": false,\n" + "    \"type\": \"property\",\n" + "    \"async\" : \"async\",\n" + "    \"propertyNames\": [\"foo\"],\n" + "    \"jcr:primaryType\": \"oak:QueryIndexDefinition\"\n" + "  }\n" + "}";
    File indexFolder = temporaryFolder.getRoot();
    // Create checkpoint file
    String checkpoint = store.checkpoint(1000000);
    IndexerInfo info = new IndexerInfo(indexFolder, checkpoint);
    info.save();
    // Create index definitions json
    Files.write(json, new File(indexFolder, INDEX_DEFINITIONS_JSON), UTF_8);
    createIndexFolder(indexFolder, "/oak:index/fooIndex");
    // Prepare importer
    IndexImporterProvider importerProvider = new IndexImporterProvider() {

        @Override
        public void importIndex(NodeState root, NodeBuilder defn, File indexDir) throws CommitFailedException {
            NodeState fooIndex = getFooIndexNodeState();
            defn.setChildNode(IndexConstants.INDEX_CONTENT_NODE_NAME, fooIndex.getChildNode(":index"));
        }

        @Override
        public String getType() {
            return "property";
        }
    };
    IndexImporter importer = new IndexImporter(store, indexFolder, provider, NOOP_LOCK);
    importer.addImporterProvider(importerProvider);
    // Add some more indexable data
    builder = store.getRoot().builder();
    builder.child("c").setProperty("foo", "abc");
    builder.child("d").setProperty("foo", "abc");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    new AsyncIndexUpdate("async", store, provider).run();
    // Now perform import
    importer.importIndex();
    FilterImpl f = createFilter(store.getRoot(), NT_BASE);
    PropertyIndexLookup lookup = new PropertyIndexLookup(store.getRoot());
    assertEquals(of("a", "c", "d"), find(lookup, "foo", "abc", f));
    NodeState idx = store.getRoot().getChildNode("oak:index").getChildNode("fooIndex");
    assertEquals(2, idx.getLong("reindexCount"));
}
