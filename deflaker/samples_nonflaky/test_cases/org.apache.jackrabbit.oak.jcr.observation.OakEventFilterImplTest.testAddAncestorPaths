@Test
public void testAddAncestorPaths() throws Exception {
    // parent of / doesnt exist, hence no ancestor path. "" will anyway resolve to "/" in FilterBuilder.getSubTrees()
    assertMatches(new String[] {}, "/");
    assertMatches(new String[] { "/*" }, "/*");
    assertMatches(new String[] { "/**" }, "/**");
    assertMatches(new String[] { "/a" }, "/a");
    assertMatches(new String[] { "/a", "/a/b" }, "/a/b");
    assertMatches(new String[] { "/a", "/a/*" }, "/a/*");
    assertMatches(new String[] { "/a", "/a/**" }, "/a/**");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/c" }, "/a/b/c");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/*" }, "/a/b/*");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/**" }, "/a/b/**");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/**" }, "/a/b/**/d");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/**" }, "/a/b/**/d/**");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/**" }, "/a/b/**/d/**/f");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/c", "/a/b/c/d" }, "/a/b/c/d");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/c", "/a/b/c/*" }, "/a/b/c/*");
    assertMatches(new String[] { "/a", "/a/b", "/a/b/c", "/a/b/c/**" }, "/a/b/c/**");
}
