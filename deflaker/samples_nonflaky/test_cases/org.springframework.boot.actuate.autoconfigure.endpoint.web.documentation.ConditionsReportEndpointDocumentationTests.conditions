@Test
void conditions() throws Exception {
    List<FieldDescriptor> positiveMatchFields = Arrays.asList(fieldWithPath("").description("Classes and methods with conditions that were matched."), fieldWithPath(".*.[].condition").description("Name of the condition."), fieldWithPath(".*.[].message").description("Details of why the condition was matched."));
    List<FieldDescriptor> negativeMatchFields = Arrays.asList(fieldWithPath("").description("Classes and methods with conditions that were not matched."), fieldWithPath(".*.notMatched").description("Conditions that were matched."), fieldWithPath(".*.notMatched.[].condition").description("Name of the condition."), fieldWithPath(".*.notMatched.[].message").description("Details of why the condition was not matched."), fieldWithPath(".*.matched").description("Conditions that were matched."), fieldWithPath(".*.matched.[].condition").description("Name of the condition.").type(JsonFieldType.STRING).optional(), fieldWithPath(".*.matched.[].message").description("Details of why the condition was matched.").type(JsonFieldType.STRING).optional());
    FieldDescriptor unconditionalClassesField = fieldWithPath("contexts.*.unconditionalClasses").description("Names of unconditional auto-configuration classes if any.");
    this.mockMvc.perform(get("/actuator/conditions")).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document("conditions", preprocessResponse(limit("contexts", getApplicationContext().getId(), "positiveMatches"), limit("contexts", getApplicationContext().getId(), "negativeMatches")), responseFields(fieldWithPath("contexts").description("Application contexts keyed by id.")).andWithPrefix("contexts.*.positiveMatches", positiveMatchFields).andWithPrefix("contexts.*.negativeMatches", negativeMatchFields).and(unconditionalClassesField, parentIdField())));
}
