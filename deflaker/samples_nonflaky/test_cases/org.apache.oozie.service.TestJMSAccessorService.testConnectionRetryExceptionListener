@Test
public void testConnectionRetryExceptionListener() throws Exception {
    BrokerService broker = null;
    try {
        services.destroy();
        services = super.setupServicesForHCatalog();
        int randomPort = 30000 + random.nextInt(10000);
        String brokerURL = "tcp://localhost:" + randomPort;
        String jndiPropertiesString = "java.naming.factory.initial#" + ActiveMQConnFactory + ";" + "java.naming.provider.url#" + brokerURL + ";" + "connectionFactoryNames#" + "ConnectionFactory";
        Configuration servicesConf = services.getConf();
        servicesConf.set(JMSAccessorService.CONF_RETRY_INITIAL_DELAY, "1");
        servicesConf.set(JMSAccessorService.CONF_RETRY_MAX_ATTEMPTS, "3");
        servicesConf.set(HCatAccessorService.JMS_CONNECTIONS_PROPERTIES, "default=" + jndiPropertiesString);
        services.init();
        HCatAccessorService hcatService = Services.get().get(HCatAccessorService.class);
        JMSAccessorService jmsService = Services.get().get(JMSAccessorService.class);
        String publisherAuthority = "hcat.server.com:5080";
        String topic = "topic.topic1";
        // Start the broker
        broker = new BrokerService();
        broker.addConnector(brokerURL);
        broker.setDataDirectory(getTestCaseDir());
        broker.setUseJmx(false);
        broker.start();
        JMSConnectionInfo connInfo = hcatService.getJMSConnectionInfo(new URI("hcat://hcat.server.com:8020"));
        jmsService.registerForNotification(connInfo, topic, new HCatMessageHandler(publisherAuthority));
        assertTrue(jmsService.isListeningToTopic(connInfo, topic));
        assertFalse(jmsService.isConnectionInRetryList(connInfo));
        assertFalse(jmsService.isTopicInRetryList(connInfo, topic));
        ConnectionContext connCtxt = jmsService.createConnectionContext(connInfo);
        broker.stop();
        try {
            connCtxt.createSession(Session.AUTO_ACKNOWLEDGE);
            fail("Exception expected");
        } catch (Exception e) {
            waitFor(JMS_TIMEOUT_MS, new Predicate() {

                @Override
                public boolean evaluate() throws Exception {
                    return !jmsService.isListeningToTopic(connInfo, topic) && jmsService.isConnectionInRetryList(connInfo) && jmsService.isTopicInRetryList(connInfo, topic);
                }
            });
            assertFalse(jmsService.isListeningToTopic(connInfo, topic));
            assertTrue(jmsService.isConnectionInRetryList(connInfo));
            assertTrue(jmsService.isTopicInRetryList(connInfo, topic));
        }
        broker = new BrokerService();
        broker.addConnector(brokerURL);
        broker.setDataDirectory(getTestCaseDir());
        broker.setUseJmx(false);
        broker.start();
        waitFor(JMS_TIMEOUT_MS, new Predicate() {

            @Override
            public boolean evaluate() throws Exception {
                return jmsService.isListeningToTopic(connInfo, topic) && !jmsService.isConnectionInRetryList(connInfo) && !jmsService.isTopicInRetryList(connInfo, topic);
            }
        });
        assertTrue(jmsService.isListeningToTopic(connInfo, topic));
        assertFalse(jmsService.isConnectionInRetryList(connInfo));
        assertFalse(jmsService.isTopicInRetryList(connInfo, topic));
        broker.stop();
    } finally {
        if (broker != null) {
            broker.stop();
        }
    }
}
