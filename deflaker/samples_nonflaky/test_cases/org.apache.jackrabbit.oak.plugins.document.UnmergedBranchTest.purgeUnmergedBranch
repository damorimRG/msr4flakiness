@Test
public void purgeUnmergedBranch() throws Exception {
    DocumentStore testStore = new MemoryDocumentStore();
    DocumentMK mk1 = create(testStore, 1);
    int cId1 = mk1.getNodeStore().getClusterId();
    DocumentMK mk2 = create(testStore, 2);
    int cId2 = mk2.getNodeStore().getClusterId();
    // 1. Create branch commits on both cluster nodes
    String rev1 = mk1.commit("", "+\"/child1\":{}", null, "");
    String branchRev1 = mk1.branch(rev1);
    String brev1 = mk1.commit("/child1", "^\"foo\":1", branchRev1, "");
    String rev2 = mk2.commit("", "+\"/child2\":{}", null, "");
    String branchRev2 = mk2.branch(rev2);
    String brev2 = mk2.commit("/child2", "^\"foo\":1", branchRev2, "");
    Map<Revision, RevisionVector> revs1 = getUncommittedRevisions(mk1);
    Map<Revision, RevisionVector> revs2 = getUncommittedRevisions(mk2);
    // 2. Assert that branch rev are uncommited
    assertTrue(revs1.containsKey(RevisionVector.fromString(brev1).asTrunkRevision().getRevision(cId1)));
    assertTrue(revs2.containsKey(RevisionVector.fromString(brev2).asTrunkRevision().getRevision(cId2)));
    // 3. Restart cluster 1 so that purge happens but only for cluster 1
    mk1.dispose();
    mk1 = create(testStore, 1);
    revs1 = getUncommittedRevisions(mk1);
    revs2 = getUncommittedRevisions(mk2);
    // 4. Assert that post restart unmerged branch rev for c1 are purged
    assertFalse(revs1.containsKey(RevisionVector.fromString(brev1).asTrunkRevision().getRevision(cId1)));
    assertTrue(revs2.containsKey(RevisionVector.fromString(brev2).asTrunkRevision().getRevision(cId2)));
}
