@Test
public void testMappingSparkAction() {
    final String resourceManager = "${resourceManager}";
    final String nameNode = "${nameNode}";
    final List<String> args = Arrays.asList("arg1", "arg2");
    final SparkActionBuilder builder = SparkActionBuilder.create();
    builder.withResourceManager(resourceManager).withNameNode(nameNode).withPrepare(new PrepareBuilder().withDelete("/path/to/delete").withMkdir("/path/to/mkdir").build()).withLauncher(new LauncherBuilder().withMemoryMb(1024).withVCores(2).withQueue(DEFAULT).withSharelib(DEFAULT).withViewAcl(DEFAULT).withModifyAcl(DEFAULT).build()).withMaster(DEFAULT).withMode(DEFAULT).withActionName(DEFAULT).withActionClass(DEFAULT).withJar(DEFAULT).withSparkOpts(DEFAULT);
    for (final String arg : args) {
        builder.withArg(arg);
    }
    builder.withConfigProperty("propertyName1", "propertyValue1").withConfigProperty("propertyName2", "propertyValue2");
    final SparkAction action = builder.build();
    final ACTION spark = DozerBeanMapperSingleton.instance().map(action, ACTION.class);
    assertEquals(resourceManager, spark.getResourceManager());
    assertEquals(nameNode, spark.getNameNode());
    assertNotNull(spark.getPrepare());
    assertEquals("/path/to/delete", spark.getPrepare().getDelete().get(0).getPath());
    assertEquals("/path/to/mkdir", spark.getPrepare().getMkdir().get(0).getPath());
    assertNotNull(spark.getConfiguration());
    assertEquals(args, spark.getArg());
    assertEquals(1024L, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(0).getValue());
    assertEquals(2L, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(1).getValue());
    assertEquals(DEFAULT, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(2).getValue());
    assertEquals(DEFAULT, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(3).getValue());
    assertEquals(DEFAULT, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(4).getValue());
    assertEquals(DEFAULT, spark.getLauncher().getMemoryMbOrVcoresOrJavaOpts().get(5).getValue());
    assertEquals(DEFAULT, spark.getMaster());
    assertEquals(DEFAULT, spark.getMode());
    assertEquals(DEFAULT, spark.getName());
    assertEquals(DEFAULT, spark.getClazz());
    assertEquals(DEFAULT, spark.getJar());
    assertEquals(DEFAULT, spark.getSparkOpts());
}
