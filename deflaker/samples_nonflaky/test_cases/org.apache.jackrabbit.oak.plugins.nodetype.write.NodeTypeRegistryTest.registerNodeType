static void registerNodeType(@NotNull Root root, @NotNull String resourceName) throws IOException {
    checkArgument(!Strings.isNullOrEmpty(resourceName));
    checkNotNull(root);
    InputStream stream = null;
    try {
        stream = NodeTypeRegistryTest.class.getResourceAsStream(resourceName);
        NodeTypeRegistry.register(root, stream, NodeTypeRegistryTest.class.getName());
    } finally {
        if (stream != null) {
            stream.close();
        }
    }
}
@Test
public void registerNodeType() throws Exception {
    registerNodeType(root, "oak6440-1.cnd");
    NodeTypeManager readOnlyNtMgr = new ReadOnlyNodeTypeManager() {

        private Root r = session.getLatestRoot();

        @NotNull
        @Override
        protected Tree getTypes() {
            return r.getTree(NODE_TYPES_PATH);
        }
    };
    NodeTypeManager ntMgr = new ReadWriteNodeTypeManager() {

        @NotNull
        @Override
        protected Tree getTypes() {
            return root.getTree(NODE_TYPES_PATH);
        }

        @NotNull
        @Override
        protected Root getWriteRoot() {
            return root;
        }
    };
    ValueFactory valueFactory = new ValueFactoryImpl(root, new NamePathMapperImpl(new GlobalNameMapper(root)));
    NamespaceRegistry nsRegistry = new ReadOnlyNamespaceRegistry(root);
    DefinitionBuilderFactory<NodeTypeTemplate, NamespaceRegistry> factory = new TemplateBuilderFactory(ntMgr, valueFactory, nsRegistry);
    InputStream in = NodeTypeRegistryTest.class.getResourceAsStream("oak6440-2.cnd");
    List<NodeTypeTemplate> templates;
    try {
        CompactNodeTypeDefReader<NodeTypeTemplate, NamespaceRegistry> reader = new CompactNodeTypeDefReader<NodeTypeTemplate, NamespaceRegistry>(new InputStreamReader(in, UTF_8), "oak6440-2.cnd", factory);
        templates = reader.getNodeTypeDefinitions();
    } finally {
        in.close();
    }
    for (NodeTypeTemplate t : templates) {
        NodeTypeTemplateImpl template;
        if (t instanceof NodeTypeTemplateImpl) {
            template = (NodeTypeTemplateImpl) t;
        } else {
            template = new NodeTypeTemplateImpl(new GlobalNameMapper(root), t);
        }
        template.writeTo(root.getTree(NODE_TYPES_PATH), true);
    }
    NodeTypeDefinition beforeDef = readOnlyNtMgr.getNodeType("foo");
    NodeTypeDefinition afterDef = ntMgr.getNodeType("foo");
    NodeTypeDefDiff diff = NodeTypeDefDiff.create(beforeDef, afterDef);
    assertFalse(diff.isMajor());
}
