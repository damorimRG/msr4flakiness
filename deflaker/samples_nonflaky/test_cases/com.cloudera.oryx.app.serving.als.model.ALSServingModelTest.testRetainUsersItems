@Test
public void testRetainUsersItems() {
    ALSServingModel model = new ALSServingModel(2, true, 1.0, null);
    model.setUserVector("U0", new float[] { 1.0f, 1.0f });
    model.retainRecentAndUserIDs(Collections.emptyList());
    // Protected because of recent user/items
    assertNotNull(model.getUserVector("U0"));
    model.retainRecentAndUserIDs(Collections.emptyList());
    assertNull(model.getUserVector("U0"));
    model.setUserVector("U0", new float[] { 1.0f, 1.0f });
    model.retainRecentAndUserIDs(Arrays.asList("U0"));
    assertNotNull(model.getUserVector("U0"));
    model.retainRecentAndUserIDs(Arrays.asList("U0"));
    assertNotNull(model.getUserVector("U0"));
    model.setItemVector("I0", new float[] { 1.0f, 1.0f });
    model.retainRecentAndItemIDs(Collections.emptyList());
    // Protected because of recent user/items
    assertNotNull(model.getItemVector("I0"));
    model.retainRecentAndItemIDs(Collections.emptyList());
    assertNull(model.getItemVector("I0"));
    model.setItemVector("I0", new float[] { 1.0f, 1.0f });
    model.retainRecentAndItemIDs(Arrays.asList("I0"));
    assertNotNull(model.getItemVector("I0"));
    model.retainRecentAndItemIDs(Arrays.asList("I0"));
    assertNotNull(model.getItemVector("I0"));
}
