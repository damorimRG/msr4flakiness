// OAK-3825
@Test
public void nodeNameViaPropDefinition() throws Exception {
    // make index
    Tree idx = createIndex("test1", Collections.EMPTY_SET);
    useV2(idx);
    Tree rules = idx.addChild(FulltextIndexConstants.INDEX_RULES);
    rules.setOrderableChildren(true);
    Tree rule = rules.addChild("nt:base");
    Tree propDef = rule.addChild(PROP_NODE).addChild("nodeName");
    propDef.setProperty(PROP_NAME, PROPDEF_PROP_NODE_NAME);
    propDef.setProperty(PROP_PROPERTY_INDEX, true);
    root.commit();
    // add content
    Tree test = root.getTree("/");
    test.addChild("foo");
    test.addChild("camelCase");
    test.addChild("test").addChild("bar");
    root.commit();
    // test
    String propabQuery = "select [jcr:path] from [nt:base] where LOCALNAME() = 'foo'";
    assertThat(explain(propabQuery), containsString("lucene:test1(/oak:index/test1) :nodeName:foo"));
    assertQuery(propabQuery, asList("/foo"));
    assertQuery("select [jcr:path] from [nt:base] where LOCALNAME() = 'bar'", asList("/test/bar"));
    assertQuery("select [jcr:path] from [nt:base] where LOCALNAME() LIKE 'foo'", asList("/foo"));
    assertQuery("select [jcr:path] from [nt:base] where LOCALNAME() LIKE 'camel%'", asList("/camelCase"));
    assertQuery("select [jcr:path] from [nt:base] where NAME() = 'bar'", asList("/test/bar"));
    assertQuery("select [jcr:path] from [nt:base] where NAME() LIKE 'foo'", asList("/foo"));
    assertQuery("select [jcr:path] from [nt:base] where NAME() LIKE 'camel%'", asList("/camelCase"));
}
