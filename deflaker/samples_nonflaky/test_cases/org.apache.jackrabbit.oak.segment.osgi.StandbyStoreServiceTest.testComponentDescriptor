@Test
public void testComponentDescriptor() throws Exception {
    ComponentDescriptor cd = ComponentDescriptor.open(getClass().getResourceAsStream("/OSGI-INF/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService.xml"));
    assertTrue(cd.hasName("org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"));
    assertTrue(cd.hasRequireConfigurationPolicy());
    assertTrue(cd.hasActivateMethod("activate"));
    assertTrue(cd.hasDeactivateMethod("deactivate"));
    assertTrue(cd.hasImplementationClass("org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"));
    assertTrue(cd.hasProperty("org.apache.sling.installer.configuration.persist").withBooleanType().withValue("false").check());
    assertTrue(cd.hasProperty("mode").withValue("primary").check());
    assertTrue(cd.hasProperty("port").withIntegerType().withValue("8023").check());
    assertTrue(cd.hasProperty("primary.host").withValue("127.0.0.1").check());
    assertTrue(cd.hasProperty("interval").withIntegerType().withValue("5").check());
    assertTrue(cd.hasProperty("secure").withBooleanType().withValue("false").check());
    assertTrue(cd.hasProperty("standby.readtimeout").withIntegerType().withValue("60000").check());
    assertTrue(cd.hasProperty("standby.autoclean").withBooleanType().withValue("true").check());
    assertTrue(cd.hasReference("storeProvider").withInterface("org.apache.jackrabbit.oak.segment.SegmentStoreProvider").withMandatoryUnaryCardinality().withStaticPolicy().withGreedyPolicyOption().withField("storeProvider").check());
}
