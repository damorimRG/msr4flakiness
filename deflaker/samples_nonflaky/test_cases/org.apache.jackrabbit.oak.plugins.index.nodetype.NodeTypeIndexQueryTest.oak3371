@Test
public void oak3371() throws Exception {
    setTraversalEnabled(false);
    Tree t, t1;
    Tree n = root.getTree("/oak:index");
    createIndexDefinition(n, "nodeType", false, new String[] { JCR_PRIMARYTYPE }, new String[] { NT_UNSTRUCTURED });
    root.commit();
    t = root.getTree("/");
    t = child(t, "test", NT_UNSTRUCTURED);
    t1 = child(t, "a", NT_UNSTRUCTURED);
    t1.setProperty("foo", "bar");
    child(t, "b", NT_UNSTRUCTURED);
    root.commit();
    List<String> plan;
    plan = executeQuery("explain SELECT * FROM [nt:unstructured] " + "WHERE ISDESCENDANTNODE([/test]) " + "AND CONTAINS(foo, 'bar')", Query.JCR_SQL2, false);
    assertEquals(1, plan.size());
    assertTrue(plan.get(0).contains("no-index"));
    assertEquals("[nt:unstructured] as [nt:unstructured] /* no-index\n" + "  where (isdescendantnode([nt:unstructured], [/test]))\n" + "  and (contains([nt:unstructured].[foo], 'bar')) */", plan.get(0));
    plan = executeQuery("explain SELECT * FROM [nt:unstructured] " + "WHERE ISDESCENDANTNODE([/test]) " + "AND NOT CONTAINS(foo, 'bar')", Query.JCR_SQL2, false);
    assertEquals(1, plan.size());
    assertTrue(plan.get(0).contains("no-index"));
    assertEquals("[nt:unstructured] as [nt:unstructured] /* no-index\n" + "  where (isdescendantnode([nt:unstructured], [/test]))\n" + "  and (not contains([nt:unstructured].[foo], 'bar')) */", plan.get(0));
    plan = executeQuery("explain SELECT * FROM [nt:unstructured] " + "WHERE ISDESCENDANTNODE([/test]) " + "AND NOT NOT CONTAINS(foo, 'bar')", Query.JCR_SQL2, false);
    assertEquals(1, plan.size());
    assertTrue(plan.get(0).contains("no-index"));
    assertEquals("[nt:unstructured] as [nt:unstructured] /* no-index\n" + "  where (isdescendantnode([nt:unstructured], [/test]))\n" + "  and (contains([nt:unstructured].[foo], 'bar')) */", plan.get(0));
    setTraversalEnabled(true);
}
