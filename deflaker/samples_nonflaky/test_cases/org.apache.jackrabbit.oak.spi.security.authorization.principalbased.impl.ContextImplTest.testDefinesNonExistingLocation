@Test
public void testDefinesNonExistingLocation() {
    assertTrue(CTX.definesLocation(TreeLocation.create(mockTree(REP_PRINCIPAL_POLICY, NT_REP_PRINCIPAL_POLICY, false))));
    assertTrue(CTX.definesLocation(TreeLocation.create(mockTree(REP_RESTRICTIONS, NT_REP_RESTRICTIONS, false))));
    Tree t = mockTree(REP_RESTRICTIONS, NT_REP_RESTRICTIONS, false, "anyResidualProperty");
    assertTrue(CTX.definesLocation(TreeLocation.create(t).getChild("anyResidualProperty")));
    t = mockTree(REP_PRINCIPAL_POLICY, NT_REP_PRINCIPAL_POLICY, false, "anyResidualAceName");
    assertTrue(CTX.definesLocation(TreeLocation.create(t).getChild("anyResidualAceName")));
    String[] propNames = new String[] { REP_EFFECTIVE_PATH, REP_PRINCIPAL_NAME, REP_PRIVILEGES };
    t = mockTree("anyEntry", "anyNt", false, propNames);
    for (String propName : propNames) {
        assertTrue(CTX.definesLocation(TreeLocation.create(t).getChild(propName)));
    }
    String[] nodeNames = new String[] { REP_PRINCIPAL_POLICY, REP_RESTRICTIONS };
    for (String nodeName : nodeNames) {
        assertTrue(CTX.definesLocation(TreeLocation.create(mockTree(nodeName, "anyNt", false))));
    }
}
