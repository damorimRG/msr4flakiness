@Test
public void unauthorized() {
    MongoTestClient testClient = new MongoTestClient(MongoUtils.URL) {

        private final AtomicReference<String> noException = new AtomicReference<>();

        @Override
        @NotNull
        public MongoDatabase getDatabase(String databaseName) {
            return new MongoTestDatabase(super.getDatabase(databaseName), noException, noException, noException) {

                @Override
                @NotNull
                public Document runCommand(@NotNull Bson command) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(command);
                }

                @Override
                @NotNull
                public Document runCommand(@NotNull Bson command, @NotNull ReadPreference readPreference) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(command, readPreference);
                }

                @Override
                @NotNull
                public <TResult> TResult runCommand(@NotNull Bson command, @NotNull Class<TResult> tResultClass) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(command, tResultClass);
                }

                @Override
                @NotNull
                public <TResult> TResult runCommand(@NotNull Bson command, @NotNull ReadPreference readPreference, @NotNull Class<TResult> tResultClass) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(command, readPreference, tResultClass);
                }

                @Override
                @NotNull
                public Document runCommand(@NotNull ClientSession clientSession, @NotNull Bson command) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(clientSession, command);
                }

                @Override
                @NotNull
                public Document runCommand(@NotNull ClientSession clientSession, @NotNull Bson command, @NotNull ReadPreference readPreference) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(clientSession, command, readPreference);
                }

                @Override
                @NotNull
                public <TResult> TResult runCommand(@NotNull ClientSession clientSession, @NotNull Bson command, @NotNull Class<TResult> tResultClass) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(clientSession, command, tResultClass);
                }

                @Override
                @NotNull
                public <TResult> TResult runCommand(@NotNull ClientSession clientSession, @NotNull Bson command, @NotNull ReadPreference readPreference, @NotNull Class<TResult> tResultClass) {
                    unauthorizedIfServerStatus(command);
                    return super.runCommand(clientSession, command, readPreference, tResultClass);
                }
            };
        }

        private void unauthorizedIfServerStatus(Bson command) {
            if (command.toBsonDocument(BasicDBObject.class, getDefaultCodecRegistry()).containsKey("serverStatus")) {
                BsonDocument response = new BsonDocument("ok", new BsonDouble(0.0));
                response.put("errmsg", new BsonString("command serverStatus requires authentication"));
                response.put("code", new BsonInt32(13));
                response.put("codeName", new BsonString("Unauthorized"));
                ServerAddress address = getAddress();
                if (address == null) {
                    // OAK-8459: use dummy/default address instead
                    address = new ServerAddress();
                }
                throw new MongoCommandException(response, address);
            }
        }
    };
    MongoStatus status = new MongoStatus(testClient, MongoUtils.DB);
    assertNotNull(status.getVersion());
}
