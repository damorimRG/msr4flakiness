@Test
public void streamDiscardingIsTimely() throws Exception {
    // This response takes at least a full second to serve: 10,000 bytes served 100 bytes at a time.
    server.enqueue(new MockResponse().setBody(new Buffer().write(new byte[10000])).throttleBody(100, 10, MILLISECONDS));
    server.enqueue(new MockResponse().setBody("A"));
    long startNanos = System.nanoTime();
    Response connection1 = getResponse(newRequest("/"));
    InputStream in = connection1.body().byteStream();
    in.close();
    long elapsedNanos = System.nanoTime() - startNanos;
    long elapsedMillis = NANOSECONDS.toMillis(elapsedNanos);
    // If we're working correctly, this should be greater than 100ms, but less than double that.
    // Previously we had a bug where we would download the entire response body as long as no
    // individual read took longer than 100ms.
    assertThat(elapsedMillis).isLessThan(500L);
    // Do another request to confirm that the discarded connection was not pooled.
    assertContent("A", getResponse(newRequest("/")));
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);
    // Connection is not pooled.
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);
}
