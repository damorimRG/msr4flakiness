@Test
public void testWithCacheWithNoViolation() throws Exception {
    final Checker checker = new Checker();
    final PackageObjectFactory factory = new PackageObjectFactory(new HashSet<>(), Thread.currentThread().getContextClassLoader());
    checker.setModuleFactory(factory);
    checker.configure(createModuleConfig(TranslationCheck.class));
    final File cacheFile = File.createTempFile("junit", null, temporaryFolder);
    checker.setCacheFile(cacheFile.getPath());
    checker.setupChild(createModuleConfig(TranslationCheck.class));
    final File tmpFile = File.createTempFile("file", ".java", temporaryFolder);
    final List<File> files = new ArrayList<>(1);
    files.add(tmpFile);
    checker.process(files);
    // invoke destroy to persist cache
    checker.destroy();
    final Properties cache = new Properties();
    try (BufferedReader reader = Files.newBufferedReader(cacheFile.toPath())) {
        cache.load(reader);
    }
    // There should 2 objects in cache: processed file (file.java) and checker configuration.
    final int expectedNumberOfObjectsInCache = 2;
    assertEquals(expectedNumberOfObjectsInCache, cache.size(), "Cache has unexpected size");
    final String expectedConfigHash = "B8535A811CA90BE8B7A14D40BCA62B4FC2447B46";
    assertEquals(expectedConfigHash, cache.getProperty(PropertyCacheFile.CONFIG_HASH_KEY), "Cache has unexpected hash");
    assertNotNull(cache.getProperty(tmpFile.getPath()), "Cache file has null path");
}
