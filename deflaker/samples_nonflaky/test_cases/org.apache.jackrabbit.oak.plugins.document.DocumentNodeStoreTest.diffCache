@Test
public void diffCache() throws Exception {
    final AtomicInteger numQueries = new AtomicInteger();
    MemoryDocumentStore store = new MemoryDocumentStore() {

        @NotNull
        @Override
        public <T extends Document> List<T> query(Collection<T> collection, String fromKey, String toKey, int limit) {
            numQueries.incrementAndGet();
            return super.query(collection, fromKey, toKey, limit);
        }
    };
    DocumentNodeStore ns = builderProvider.newBuilder().setDocumentStore(store).setAsyncDelay(0).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    builder.child("foo").child("child");
    merge(ns, builder);
    builder = ns.getRoot().builder();
    builder.child("bar");
    merge(ns, builder);
    DocumentNodeState before = ns.getRoot();
    builder = ns.getRoot().builder();
    builder.child("foo").child("child").child("node");
    merge(ns, builder);
    DocumentNodeState after = ns.getRoot();
    numQueries.set(0);
    final List<String> added = Lists.newArrayList();
    ns.compare(asDocumentNodeState(after.getChildNode("foo").getChildNode("child")), asDocumentNodeState(before.getChildNode("foo").getChildNode("child")), new DefaultNodeStateDiff() {

        @Override
        public boolean childNodeAdded(String name, NodeState after) {
            added.add(name);
            return super.childNodeAdded(name, after);
        }
    });
    assertEquals(1, added.size());
    assertEquals("node", added.get(0));
    assertEquals("must not run queries", 0, numQueries.get());
}
