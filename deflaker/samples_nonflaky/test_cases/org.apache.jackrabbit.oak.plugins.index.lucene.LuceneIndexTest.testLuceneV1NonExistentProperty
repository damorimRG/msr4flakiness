@Test
public void testLuceneV1NonExistentProperty() throws Exception {
    NodeBuilder index = builder.child(INDEX_DEFINITIONS_NAME);
    NodeBuilder defn = newLuceneIndexDefinition(index, "lucene", ImmutableSet.of("String"));
    defn.setProperty(FulltextIndexConstants.COMPAT_MODE, IndexFormatVersion.V1.getVersion());
    NodeState before = builder.getNodeState();
    builder.setProperty("foo", "value-with-dash");
    NodeState after = builder.getNodeState();
    NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);
    tracker = new IndexTracker();
    tracker.update(indexed);
    AdvancedQueryIndex queryIndex = new LuceneIndex(tracker, null);
    FilterImpl filter = createFilter(NT_BASE);
    filter.restrictPath("/", Filter.PathRestriction.EXACT);
    filter.setFullTextConstraint(FullTextParser.parse("foo", "value-with*"));
    List<IndexPlan> plans = queryIndex.getPlans(filter, null, builder.getNodeState());
    Cursor cursor = queryIndex.query(plans.get(0), indexed);
    assertTrue(cursor.hasNext());
    assertEquals("/", cursor.next().getPath());
    assertFalse(cursor.hasNext());
    // Now perform a query against a field which does not exist
    FilterImpl filter2 = createFilter(NT_BASE);
    filter2.restrictPath("/", Filter.PathRestriction.EXACT);
    filter2.setFullTextConstraint(FullTextParser.parse("baz", "value-with*"));
    List<IndexPlan> plans2 = queryIndex.getPlans(filter2, null, builder.getNodeState());
    Cursor cursor2 = queryIndex.query(plans2.get(0), indexed);
    assertFalse(cursor2.hasNext());
}
