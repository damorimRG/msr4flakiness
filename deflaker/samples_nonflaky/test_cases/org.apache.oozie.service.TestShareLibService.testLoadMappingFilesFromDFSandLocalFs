@Test
public void testLoadMappingFilesFromDFSandLocalFs() throws IOException, ServiceException {
    final String testUserHome = Files.createTempDir().toString() + Path.SEPARATOR;
    final String testPath = testUserHome + SHARELIB_PATH;
    final Path basePath = new Path(testPath + "testPath");
    final Path somethingNew = new Path(testPath + "something_new");
    final Path directHdfsJarDir = new Path(TEST_HDFS_HOME + SHARELIB_PATH + "directJarDir");
    final String directHdfsJarPath = directHdfsJarDir.toString() + Path.SEPARATOR + "direct.jar";
    final String directjarShareLibName = "directjar";
    final FileSystem localFs = newLocalFileSystem();
    final FileSystem hdFs = getFileSystem();
    final TestShareLibMappingFileInput[] testShareLibMappingFileInputs = { new TestShareLibMappingFileInput(localFs, "pig", basePath.toString() + Path.SEPARATOR + "pig" + Path.SEPARATOR + "pig.jar"), new TestShareLibMappingFileInput(localFs, "something_new", somethingNew.toString() + Path.SEPARATOR + "something_new.jar"), new TestShareLibMappingFileInput(hdFs, directjarShareLibName, directHdfsJarPath), new TestShareLibMappingSymlinkInput(hdFs, "linkFile", TEST_HDFS_HOME + "symlinkTargetDir" + Path.SEPARATOR + "targetOfLinkFile.xml", TEST_HDFS_HOME + "linkFile.xml") };
    final Properties mappingFileConfig = new Properties();
    for (final TestShareLibMappingFileInput shmfInput : testShareLibMappingFileInputs) {
        shmfInput.materialize();
        mappingFileConfig.put(shmfInput.sharelibNameWithMappingFilePrefix, shmfInput.getFullShareLibPathDir());
    }
    createTestShareLibMappingFile(testUserHome + TEST_MAPPING_FILENAME, localFs, mappingFileConfig);
    setShipLauncherInOozieConfig();
    final Configuration oozieConfig = getOozieConfig();
    oozieConfig.set(ShareLibService.SHARELIB_MAPPING_FILE, localFs.getUri() + testUserHome + TEST_MAPPING_FILENAME);
    try {
        services.init();
        final ShareLibService shareLibService = Services.get().get(ShareLibService.class);
        for (final TestShareLibMappingFileInput sh : testShareLibMappingFileInputs) {
            final String firstShareLibPath = shareLibService.getShareLibJars(sh.sharelibName).get(0).toString();
            assertTrue(firstShareLibPath.endsWith(sh.baseName));
        }
        final List<Path> listOfPaths = shareLibService.getShareLibJars(directjarShareLibName);
        for (final Path p : listOfPaths) {
            assertTrue(p.toString().startsWith(HDFS_SCHEME_PREFIX));
        }
    } finally {
        hdFs.delete(new Path(SHARELIB_PATH), true);
        hdFs.delete(new Path("linkFile.xml"), true);
        localFs.delete(new Path(testUserHome), true);
    }
}
