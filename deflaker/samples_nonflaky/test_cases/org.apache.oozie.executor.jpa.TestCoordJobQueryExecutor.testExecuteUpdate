public void testExecuteUpdate() throws Exception {
    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, false, false);
    CoordJobQueryExecutor.getInstance().executeUpdate(CoordJobQuery.UPDATE_COORD_JOB_STATUS, job);
    CoordinatorJobBean job1 = CoordJobQueryExecutor.getInstance().get(CoordJobQuery.GET_COORD_JOB, job.getId());
    assertEquals(job1.getStatus(), CoordinatorJob.Status.RUNNING);
    job1.setStatus(CoordinatorJob.Status.SUCCEEDED);
    CoordJobQueryExecutor.getInstance().executeUpdate(CoordJobQuery.UPDATE_COORD_JOB_STATUS_PENDING, job1);
    CoordinatorJobBean job2 = CoordJobQueryExecutor.getInstance().get(CoordJobQuery.GET_COORD_JOB, job1.getId());
    assertEquals(job2.getStatus(), CoordinatorJob.Status.SUCCEEDED);
    CoordinatorJobBean job3 = addRecordToCoordJobTable(CoordinatorJob.Status.RUNNING, false, false);
    Date initialLMT = job3.getLastModifiedTime();
    // similar to what's done by e.g. the change command
    job3.setLastModifiedTime(new Date());
    CoordJobQueryExecutor.getInstance().executeUpdate(CoordJobQuery.UPDATE_COORD_JOB_CHANGE, job3);
    job3 = CoordJobQueryExecutor.getInstance().get(CoordJobQuery.GET_COORD_JOB, job3.getId());
    Date afterChangeLMT = job3.getLastModifiedTime();
    assertNotNull(job3.getLastModifiedTimestamp());
    assertTrue(afterChangeLMT.after(initialLMT));
}
