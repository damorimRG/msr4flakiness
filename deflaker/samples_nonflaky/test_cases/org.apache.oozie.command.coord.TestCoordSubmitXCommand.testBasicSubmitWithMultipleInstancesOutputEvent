/**
 * Testing for when user tries to submit a coordinator application having data-out events
 * that erroneously specify multiple output data instances inside a single <instance> tag.
 * Job gives submission error and indicates appropriate correction
 * Testing negative(error) cases as well as Positive(success) cases.
 */
public void testBasicSubmitWithMultipleInstancesOutputEvent() throws Exception {
    Configuration conf = new XConfiguration();
    File appPathFile = new File(getTestCaseDir(), "coordinator.xml");
    // CASE 1: Failure case i.e. multiple data-out instances
    Reader reader = IOUtils.getResourceAsReader("coord-multiple-output-instance1.xml", -1);
    Writer writer = new OutputStreamWriter(new FileOutputStream(new File(getTestCaseDir(), "coordinator.xml")), StandardCharsets.UTF_8);
    IOUtils.copyCharStream(reader, writer);
    conf.set(OozieClient.COORDINATOR_APP_PATH, appPathFile.toURI().toString());
    conf.set(OozieClient.USER_NAME, getTestUser());
    CoordSubmitXCommand sc = new CoordSubmitXCommand(conf);
    try {
        sc.call();
        fail("Expected to catch errors due to incorrectly specified output data set instances");
    } catch (CommandException e) {
        assertEquals(sc.getJob().getStatus(), Job.Status.FAILED);
        assertEquals(e.getErrorCode(), ErrorCode.E1021);
        assertTrue(e.getMessage().contains(sc.COORD_OUTPUT_EVENTS) && e.getMessage().contains("per data-out instance"));
    }
    // CASE 2: Data-out instance tag is empty. Check works for whitespace in the tag too
    reader = IOUtils.getResourceAsReader("coord-multiple-output-instance2.xml", -1);
    writer = new OutputStreamWriter(new FileOutputStream(appPathFile), StandardCharsets.UTF_8);
    IOUtils.copyCharStream(reader, writer);
    sc = new CoordSubmitXCommand(conf);
    try {
        sc.call();
        fail("Expected to catch errors due to incorrectly specified output data set instances");
    } catch (CommandException e) {
        assertEquals(sc.getJob().getStatus(), Job.Status.FAILED);
        assertEquals(e.getErrorCode(), ErrorCode.E1021);
        assertTrue(e.getMessage().contains(sc.COORD_OUTPUT_EVENTS) && e.getMessage().contains("is empty"));
    }
    // CASE 3: Multiple <instance> tags within data-out should fail coordinator schema validation -
    // different error than above is expected
    reader = IOUtils.getResourceAsReader("coord-multiple-output-instance3.xml", -1);
    writer = new OutputStreamWriter(new FileOutputStream(appPathFile), StandardCharsets.UTF_8);
    IOUtils.copyCharStream(reader, writer);
    sc = new CoordSubmitXCommand(conf);
    try {
        sc.call();
        fail("Expected to catch errors due to incorrectly specified output data set instances");
    } catch (CommandException e) {
        assertEquals(sc.getJob().getStatus(), Job.Status.FAILED);
        assertEquals(e.getErrorCode(), ErrorCode.E0701);
        assertTrue(e.getMessage().contains("No child element is expected at this point"));
    }
    // CASE 4: Success case, where only one instance is configured, but expression has a ","
    reader = IOUtils.getResourceAsReader("coord-multiple-output-instance4.xml", -1);
    writer = new OutputStreamWriter(new FileOutputStream(appPathFile), StandardCharsets.UTF_8);
    IOUtils.copyCharStream(reader, writer);
    sc = new CoordSubmitXCommand(conf);
    try {
        sc.call();
    } catch (CommandException e) {
        fail("Not expected to fail here");
    }
}
