@Test
public void nodeNameIndex() throws Exception {
    NodeBuilder index = newLucenePropertyIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "lucene", ImmutableSet.of("foo"), null);
    NodeBuilder rules = index.child(INDEX_RULES);
    NodeBuilder ruleNode = rules.child(NT_FILE);
    ruleNode.setProperty(FulltextIndexConstants.INDEX_NODE_NAME, true);
    NodeState before = builder.getNodeState();
    createNodeWithType(builder, "foo", NT_FILE);
    createNodeWithType(builder, "camelCase", NT_FILE);
    NodeState after = builder.getNodeState();
    NodeState indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);
    tracker = new IndexTracker();
    tracker.update(indexed);
    AdvancedQueryIndex queryIndex = new LucenePropertyIndex(tracker);
    FilterImpl filter = createFilter(NT_FILE);
    filter.restrictProperty(QueryConstants.RESTRICTION_LOCAL_NAME, Operator.EQUAL, PropertyValues.newString("foo"));
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/foo"));
    filter = createFilter(NT_FILE);
    filter.restrictProperty(QueryConstants.RESTRICTION_LOCAL_NAME, Operator.LIKE, PropertyValues.newString("camelCase"));
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/camelCase"));
    filter = createFilter(NT_FILE);
    filter.restrictProperty(QueryConstants.RESTRICTION_LOCAL_NAME, Operator.LIKE, PropertyValues.newString("camel%"));
    assertFilter(filter, queryIndex, indexed, ImmutableList.of("/camelCase"));
}
