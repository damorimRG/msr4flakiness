/**
 * Concurrently retrieve after stage but before upload.
 * @throws Exception
 */
@Test
public void testConcurrentGetDelete() throws Exception {
    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(2));
    closer.register(new ExecutorCloser(executorService));
    // Add load
    List<ListenableFuture<Integer>> futures = put(folder);
    // Get a handle to the file and open stream
    File file = stagingCache.getIfPresent(ID_PREFIX + 0);
    final InputStream fStream = Files.asByteSource(file).openStream();
    // task to copy the steam to a file simulating read from the stream
    File temp = folder.newFile();
    CountDownLatch copyThreadLatch = new CountDownLatch(1);
    SettableFuture<File> future1 = copyStreamThread(executorService, fStream, temp, copyThreadLatch);
    // start
    taskLatch.countDown();
    callbackLatch.countDown();
    waitFinish(futures);
    // trying copying now
    copyThreadLatch.countDown();
    future1.get();
    assertTrue(Files.equal(temp, uploader.read(ID_PREFIX + 0)));
}
