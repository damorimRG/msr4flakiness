public void testAddShareLibSchemeAndAuthority() throws Exception {
    JavaActionExecutor ae = new JavaActionExecutor() {

        @Override
        public String getDefaultShareLibName(Element actionXml) {
            return "java-action-executor";
        }
    };
    String actionXml = "<java>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNode2Uri() + "</name-node>" + "<main-class>" + LauncherMainTester.class.getName() + "</main-class>" + "</java>";
    Element eActionXml = XmlUtils.parseXml(actionXml);
    Context context = createContext(actionXml, null);
    // Set sharelib to a relative path (i.e. no scheme nor authority)
    Services.get().destroy();
    setSystemProperty(WorkflowAppService.SYSTEM_LIB_PATH, "/user/" + getTestUser() + "/share/");
    new Services().init();
    // Create the dir
    WorkflowAppService wps = Services.get().get(WorkflowAppService.class);
    Path systemLibPath = getNewSystemLibPath();
    Path javaShareLibPath = new Path(systemLibPath, "java-action-executor");
    getFileSystem().mkdirs(javaShareLibPath);
    Services.get().setService(ShareLibService.class);
    Configuration conf = ae.createBaseHadoopConf(context, eActionXml);
    // Despite systemLibPath is not fully qualified and the action refers to the
    // second namenode the next line won't throw exception because default fs is used
    ae.addShareLib(conf, new String[] { "java-action-executor" });
    // Set sharelib to a full path (i.e. include scheme and authority)
    Services.get().destroy();
    setSystemProperty(WorkflowAppService.SYSTEM_LIB_PATH, getNameNodeUri() + "/user/" + getTestUser() + "/share/");
    new Services().init();
    Services.get().setService(ShareLibService.class);
    conf = ae.createBaseHadoopConf(context, eActionXml);
    // The next line should not throw an Exception because it will get the scheme and authority from the sharelib path
    ae.addShareLib(conf, new String[] { "java-action-executor" });
}
