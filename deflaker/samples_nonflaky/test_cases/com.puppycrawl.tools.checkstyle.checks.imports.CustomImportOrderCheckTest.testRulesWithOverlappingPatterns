@Test
public void testRulesWithOverlappingPatterns() throws Exception {
    final DefaultConfiguration checkConfig = createModuleConfig(CustomImportOrderCheck.class);
    checkConfig.addAttribute("customImportOrderRules", "THIRD_PARTY_PACKAGE###SAME_PACKAGE(6)###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS");
    checkConfig.addAttribute("standardPackageRegExp", "com.puppycrawl.tools.*Check$");
    checkConfig.addAttribute("specialImportsRegExp", "com.puppycrawl.tools.*Tag*");
    checkConfig.addAttribute("thirdPartyPackageRegExp", "com.puppycrawl.tools.checkstyle.checks.javadoc.*Javadoc*");
    final String[] expected = { "9: " + getCheckMessage(MSG_ORDER, THIRD, STD, "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl"), "13: " + getCheckMessage(MSG_LINE_SEPARATOR, "com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck"), "19: " + getCheckMessage(MSG_LINE_SEPARATOR, "com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag"), "21: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck"), "25: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SPECIAL, "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag"), "26: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck"), "27: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck") };
    createChecker(checkConfig);
    verify(checkConfig, getPath("InputCustomImportOrder_OverlappingPatterns.java"), expected);
}
