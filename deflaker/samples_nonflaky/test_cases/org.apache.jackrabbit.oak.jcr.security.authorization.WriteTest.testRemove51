@Test
public void testRemove51() throws Exception {
    Node subtree = superuser.getNode(childNPath).addNode(nodeName3);
    superuser.save();
    // add 'remove_node' privilege at 'childNPath'
    Privilege[] rmNode = privilegesFromName(Privilege.JCR_REMOVE_NODE);
    allow(childNPath, rmNode);
    /*
         expected result:
         - node at subtree path can't be removed since REMOVE_CHILD_NODES is missing.
         */
    String subtreePath = subtree.getPath();
    assertFalse(testSession.hasPermission(subtreePath, Session.ACTION_REMOVE));
    try {
        testSession.getNode(subtreePath).remove();
        testSession.save();
        fail("Removal must fail");
    } catch (AccessDeniedException e) {
    // success
    }
}
