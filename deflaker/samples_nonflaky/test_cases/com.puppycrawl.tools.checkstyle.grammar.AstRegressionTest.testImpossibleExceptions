@Test
public void testImpossibleExceptions() throws Exception {
    AssertGeneratedJavaLexer.verifyFail("mSTD_ESC", 'a');
    AssertGeneratedJavaLexer.verifyFail("mSTD_ESC", '0', (char) 0xFFFF);
    AssertGeneratedJavaLexer.verifyFail("mSTD_ESC", '4', (char) 0xFFFF);
    AssertGeneratedJavaLexer.verifyFail("mCHAR_LITERAL", '\'', '\'');
    AssertGeneratedJavaLexer.verifyFail("mHEX_DIGIT", ';');
    AssertGeneratedJavaLexer.verifyFail("mEXPONENT", ';');
    AssertGeneratedJavaLexer.verifyFail("mBINARY_DIGIT", '2');
    AssertGeneratedJavaLexer.verifyFail("mSIGNED_INTEGER", 'a');
    AssertGeneratedJavaLexer.verifyFail("mID_START", '%');
    AssertGeneratedJavaLexer.verifyFail("mID_START", (char) 0xBF);
    AssertGeneratedJavaLexer.verifyFailNoGuessing("mID_START", (char) 0xBF);
    AssertGeneratedJavaLexer.verifyFail("mID_PART", '%');
    AssertGeneratedJavaLexer.verifyFail("mID_PART", (char) 0xBF);
    AssertGeneratedJavaLexer.verifyFailNoGuessing("mID_PART", (char) 0xBF);
    AssertGeneratedJavaLexer.verifyFail("mESC", '\\', 'a');
    AssertGeneratedJavaLexer.verifyFail("mLONG_LITERAL", '0', ';');
    AssertGeneratedJavaLexer.verifyFail("mLONG_LITERAL", '1', ';');
    AssertGeneratedJavaLexer.verifyFail("mLONG_LITERAL", ';');
    AssertGeneratedJavaLexer.verifyFail("mINT_LITERAL", ';');
    AssertGeneratedJavaLexer.verifyFail("mHEX_DOUBLE_LITERAL", '0', 'a');
    AssertGeneratedJavaLexer.verifyFail("mHEX_FLOAT_LITERAL", '0', 'a');
}
