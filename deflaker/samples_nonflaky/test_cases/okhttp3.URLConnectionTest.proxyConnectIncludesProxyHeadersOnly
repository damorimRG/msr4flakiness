/**
 * Test which headers are sent unencrypted to the HTTP proxy.
 */
@Test
public void proxyConnectIncludesProxyHeadersOnly() throws Exception {
    RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
    server.useHttps(handshakeCertificates.sslSocketFactory(), true);
    server.enqueue(new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
    server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
    client = client.newBuilder().proxy(server.toProxyAddress()).sslSocketFactory(handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()).hostnameVerifier(hostnameVerifier).build();
    Response response = getResponse(new Request.Builder().url(HttpUrl.get("https://android.com/foo")).header("Private", "Secret").header("Proxy-Authorization", "bar").header("User-Agent", "baz").build());
    assertContent("encrypted response from the origin server", response);
    RecordedRequest connect = server.takeRequest();
    assertThat(connect.getHeader("Private")).isNull();
    assertThat(connect.getHeader("Proxy-Authorization")).isNull();
    assertThat(connect.getHeader("User-Agent")).isEqualTo(Version.userAgent);
    assertThat(connect.getHeader("Host")).isEqualTo("android.com:443");
    assertThat(connect.getHeader("Proxy-Connection")).isEqualTo("Keep-Alive");
    RecordedRequest get = server.takeRequest();
    assertThat(get.getHeader("Private")).isEqualTo("Secret");
    assertThat(hostnameVerifier.calls).isEqualTo(asList("verify android.com"));
}
