/**
 * Test that if one thread is blocking in a read or write operation, another
 * thread can close the socket and stop the accept.
 *
 * @throws IOException
 */
@Test(timeout = 180000)
public void testSocketAcceptAndClose() throws Exception {
    final String TEST_PATH = new File(sockDir.getDir(), "test_sock_accept_and_close").getAbsolutePath();
    final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH);
    ExecutorService exeServ = Executors.newSingleThreadExecutor();
    Callable<Void> callable = new Callable<Void>() {

        public Void call() {
            try {
                serv.accept();
                throw new RuntimeException("expected the accept() to be " + "interrupted and fail");
            } catch (AsynchronousCloseException e) {
                return null;
            } catch (IOException e) {
                throw new RuntimeException("unexpected IOException", e);
            }
        }
    };
    Future<Void> future = exeServ.submit(callable);
    Thread.sleep(500);
    serv.close();
    future.get(2, TimeUnit.MINUTES);
}
