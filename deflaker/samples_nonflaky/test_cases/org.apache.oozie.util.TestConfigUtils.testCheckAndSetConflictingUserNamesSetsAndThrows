public void testCheckAndSetConflictingUserNamesSetsAndThrows() {
    final Configuration base = new Configuration();
    base.set(OozieClient.USER_NAME, getTestUser());
    base.set(MRJobConfig.USER_NAME, getTestUser());
    ConfigurationService.setBoolean("oozie.configuration.check-and-set." + OozieClient.USER_NAME, true);
    ConfigurationService.setBoolean("oozie.configuration.check-and-set." + MRJobConfig.USER_NAME, false);
    try {
        ConfigUtils.checkAndSetDisallowedProperties(base, getTestUser2(), new Exception("test message"), false);
        fail("Exception should have been thrown");
    } catch (final Exception e) {
        assertTrue("message mismatch", e.getMessage().contains("test message"));
    }
    assertEquals("user.name should be preserved as no write will be performed", getTestUser(), base.get(OozieClient.USER_NAME));
    try {
        ConfigUtils.checkAndSetDisallowedProperties(base, getTestUser2(), new Exception("test message"), true);
    } catch (final Exception e) {
        fail("Exception should not have been thrown");
    }
    assertEquals("user.name should be set as one write operation will be performed", getTestUser2(), base.get(OozieClient.USER_NAME));
    assertEquals("mapreduce.job.user.name should be set implicitly by Configuration#set(user.name)", getTestUser2(), base.get(MRJobConfig.USER_NAME));
}
