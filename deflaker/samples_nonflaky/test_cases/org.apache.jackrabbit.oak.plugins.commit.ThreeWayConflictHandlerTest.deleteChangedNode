@Override
public Resolution deleteChangedNode(NodeBuilder parent, String name, NodeState theirs, NodeState base) {
    called.set(true);
    assertTrue(theirs.hasProperty("p"));
    assertTrue(base.hasProperty("p"));
    assertEquals("theirs", theirs.getProperty("p").getValue(STRING));
    assertEquals("base", base.getProperty("p").getValue(STRING));
    return Resolution.IGNORED;
}
@Test
public void deleteChangedNode() throws Exception {
    AtomicBoolean called = new AtomicBoolean(false);
    ThreeWayConflictHandler handler = new ErrorThreeWayConflictHandler() {

        @Override
        public Resolution deleteChangedNode(NodeBuilder parent, String name, NodeState theirs, NodeState base) {
            called.set(true);
            assertTrue(theirs.hasProperty("p"));
            assertTrue(base.hasProperty("p"));
            assertEquals("theirs", theirs.getProperty("p").getValue(STRING));
            assertEquals("base", base.getProperty("p").getValue(STRING));
            return Resolution.IGNORED;
        }
    };
    ContentRepository repo = newRepo(handler);
    Root root = login(repo);
    setup(root);
    Root ourRoot = login(repo);
    Root theirRoot = login(repo);
    theirRoot.getTree("/c").setProperty("p", "theirs");
    ourRoot.getTree("/c").remove();
    theirRoot.commit();
    ourRoot.commit();
    assertTrue(called.get());
}
@Override
public Resolution deleteChangedNode(NodeBuilder parent, String name, NodeState theirs, NodeState base) {
    Assert.fail("method should not be called");
    return Resolution.IGNORED;
}
