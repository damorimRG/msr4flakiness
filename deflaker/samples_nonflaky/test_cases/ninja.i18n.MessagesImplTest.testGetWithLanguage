@Test
public void testGetWithLanguage() {
    when(ninjaProperties.getStringArray(NinjaConstant.applicationLanguages)).thenReturn(new String[] { "en", "de", "fr-FR" });
    Lang lang = new LangImpl(ninjaProperties);
    Messages messages = new MessagesImpl(ninjaProperties, lang);
    // that will refer to messages_en.properties:
    assertEquals("english", messages.get("language", Optional.of("en-US")).get());
    assertEquals("english", messages.get("language", Optional.of("en-CA")).get());
    assertEquals("english", messages.get("language", Optional.of("en-UK")).get());
    // that will refer to messages_de.properties:
    assertEquals("deutsch", messages.get("language", Optional.of("de")).get());
    assertEquals("deutsch", messages.get("language", Optional.of("de-DE")).get());
    // that will refer to messages_fr-FR.properties:
    assertEquals("français", messages.get("language", Optional.of("fr-FR")).get());
    // that will refer to messages_fr-FR.properties:
    assertEquals("français", messages.get("language", Optional.of("da,fr-FR;q=0.8")).get());
    assertEquals("français", messages.get("language", Optional.of("da;q=0.9, fr-FR; q=0.8")).get());
    // that will refer to messages_de.properties:
    assertEquals("deutsch", messages.get("language", Optional.of("de,fr-FR;q=0.8")).get());
    assertEquals("deutsch", messages.get("language", Optional.of("de;q=0.9, fr-FR; q=0.8")).get());
    assertEquals("defaultlanguage", messages.get("language", Optional.of("fr")).get());
    assertEquals(Optional.empty(), messages.get("a_non_existing_key", Optional.of("fr")));
}
