public void testSingleAddUpdateRemoveInstrumentedCorrectly() throws Exception {
    SLACalculatorMemory slaCalcMemory = new SLACalculatorMemory();
    slaCalcMemory.init(Services.get().get(ConfigurationService.class).getConf());
    WorkflowJobBean job1 = addRecordToWfJobTable(WorkflowJob.Status.PREP, WorkflowInstance.Status.PREP);
    SLARegistrationBean slaRegBean = _createSLARegistration(job1.getId(), AppType.WORKFLOW_JOB);
    Date startTime = new Date(System.currentTimeMillis() - 1 * 1 * 3600 * 1000);
    // 1 hour back
    slaRegBean.setExpectedStart(startTime);
    slaRegBean.setExpectedDuration(1000);
    slaRegBean.setExpectedEnd(new Date(System.currentTimeMillis() - 1 * 1 * 3600 * 1000));
    String jobId = slaRegBean.getId();
    slaCalcMemory.addRegistration(slaRegBean.getId(), slaRegBean);
    long slaMapSize = instrumentation.getCounters().get(SLACalculatorMemory.INSTRUMENTATION_GROUP).get(SLACalculatorMemory.SLA_MAP).getValue();
    assertEquals("SLA map size after add should be 1", 1, slaMapSize);
    slaCalcMemory.updateJobSla(jobId);
    slaMapSize = instrumentation.getCounters().get(SLACalculatorMemory.INSTRUMENTATION_GROUP).get(SLACalculatorMemory.SLA_MAP).getValue();
    assertEquals("SLA map size after update should be 1", 1, slaMapSize);
    slaCalcMemory.removeRegistration(jobId);
    slaMapSize = instrumentation.getCounters().get(SLACalculatorMemory.INSTRUMENTATION_GROUP).get(SLACalculatorMemory.SLA_MAP).getValue();
    assertEquals("SLA map size after remove should be 0", 0, slaMapSize);
}
