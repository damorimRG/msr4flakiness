@Test
public void simplePropertyIndexCleaning() throws Exception {
    IndexDefinitionBuilder defnb = new IndexDefinitionBuilder();
    defnb.indexRule("nt:base").property("foo").propertyIndex().sync();
    String indexPath = "/oak:index/foo";
    addIndex(indexPath, defnb);
    PropertyIndexCleaner cleaner = new PropertyIndexCleaner(nodeStore, () -> asList("/oak:index/uuid", indexPath), asyncService, StatisticsProvider.NOOP);
    NodeBuilder builder = nodeStore.getRoot().builder();
    PropertyIndexUpdateCallback cb = newCallback(builder, indexPath);
    propertyUpdated(cb, indexPath, "/a", "foo", "bar");
    merge(builder);
    assertThat(query(indexPath, "foo", "bar"), containsInAnyOrder("/a"));
    // ------------------------ Run 1
    asyncService.addInfo("async", 1000);
    assertCleanUpPerformed(cleaner.performCleanup(false), true);
    assertThat(query(indexPath, "foo", "bar"), containsInAnyOrder("/a"));
    builder = nodeStore.getRoot().builder();
    cb = newCallback(builder, indexPath);
    propertyUpdated(cb, indexPath, "/b", "foo", "bar");
    merge(builder);
    assertThat(query(indexPath, "foo", "bar"), containsInAnyOrder("/a", "/b"));
    // ------------------------ Run 2
    asyncService.addInfo("async", 2000);
    assertCleanUpPerformed(cleaner.performCleanup(false), true);
    // Now /a would be part of removed bucket
    assertThat(query(indexPath, "foo", "bar"), containsInAnyOrder("/b"));
    // ------------------------ Run 3
    asyncService.addInfo("async", 3000);
    assertCleanUpPerformed(cleaner.performCleanup(false), true);
    // With another run /b would also be removed
    assertThat(query(indexPath, "foo", "bar"), empty());
}
