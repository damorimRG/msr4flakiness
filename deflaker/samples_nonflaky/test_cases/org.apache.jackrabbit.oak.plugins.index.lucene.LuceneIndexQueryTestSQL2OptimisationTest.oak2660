@Test
public void oak2660() throws Exception {
    final String name = "name";
    final String surname = "surname";
    final String description = "description";
    final String added = "added";
    final String yes = "yes";
    Tree t;
    // re-define the lucene index
    t = root.getTree("/oak:index/" + TEST_INDEX_NAME);
    assertTrue(t.exists());
    t.remove();
    root.commit();
    assertFalse(root.getTree("/oak:index/" + TEST_INDEX_NAME).exists());
    t = root.getTree("/");
    Tree indexDefn = createTestIndexNode(t, LuceneIndexConstants.TYPE_LUCENE);
    useV2(indexDefn);
    indexDefn.setProperty(LuceneIndexConstants.TEST_MODE, true);
    Tree props = TestUtil.newRulePropTree(indexDefn, NT_UNSTRUCTURED);
    TestUtil.enablePropertyIndex(props, name, false);
    TestUtil.enableForFullText(props, surname, false);
    TestUtil.enableForFullText(props, description, false);
    TestUtil.enableForOrdered(props, added);
    root.commit();
    // creating the dataset
    List<String> expected = Lists.newArrayList();
    Tree content = root.getTree("/").addChild("content");
    t = content.addChild("test1");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, yes);
    t.setProperty(surname, yes);
    t.setProperty(description, yes);
    t.setProperty(added, Calendar.getInstance());
    expected.add(t.getPath());
    t = content.addChild("test2");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, yes);
    t.setProperty(surname, yes);
    t.setProperty(description, "no");
    t.setProperty(added, Calendar.getInstance());
    expected.add(t.getPath());
    t = content.addChild("test3");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, yes);
    t.setProperty(surname, "no");
    t.setProperty(description, "no");
    t.setProperty(added, Calendar.getInstance());
    expected.add(t.getPath());
    t = content.addChild("test4");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, "no");
    t.setProperty(surname, yes);
    t.setProperty(description, "no");
    t.setProperty(added, Calendar.getInstance());
    expected.add(t.getPath());
    t = content.addChild("test5");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, "no");
    t.setProperty(surname, "no");
    t.setProperty(description, yes);
    t.setProperty(added, Calendar.getInstance());
    expected.add(t.getPath());
    t = content.addChild("test6");
    t.setProperty(JCR_PRIMARYTYPE, NT_UNSTRUCTURED, NAME);
    t.setProperty(name, "no");
    t.setProperty(surname, "no");
    t.setProperty(description, "no");
    t.setProperty(added, Calendar.getInstance());
    root.commit();
    // asserting the initial state
    for (String s : expected) {
        assertTrue("wrong initial state", root.getTree(s).exists());
    }
    final String statement = "SELECT * " + "FROM [" + NT_UNSTRUCTURED + "] AS c " + "WHERE " + "( " + "c.[" + name + "] = '" + yes + "' " + "OR CONTAINS(c.[" + surname + "], '" + yes + "') " + "OR CONTAINS(c.[" + description + "], '" + yes + "') " + ") " + "AND ISDESCENDANTNODE(c, '" + content.getPath() + "') " + "ORDER BY " + added + " DESC ";
    assertQuery(statement, SQL2, expected);
}
