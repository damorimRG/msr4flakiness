/**
 * This method is for testing the case of an exception caught inside
 * {@code PackageObjectFactory.generateThirdPartyNameToFullModuleName}, a private method used
 * to initialize private field {@code PackageObjectFactory.thirdPartyNameToFullModuleNames}.
 * Since the method and the field both are private, the {@link Whitebox} is required to ensure
 * that the field is changed. Also, the expected exception should be thrown from the static
 * method {@link ModuleReflectionUtil#getCheckstyleModules}, so {@link PowerMockito#mockStatic}
 * is required to mock this exception.
 *
 * @throws Exception when the code tested throws an exception
 */
@Test
public void testGenerateThirdPartyNameToFullModuleNameWithException() throws Exception {
    final String name = "String";
    final String packageName = "java.lang";
    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    final Set<String> packages = Collections.singleton(packageName);
    final PackageObjectFactory objectFactory = new PackageObjectFactory(packages, classLoader, TRY_IN_ALL_REGISTERED_PACKAGES);
    mockStatic(ModuleReflectionUtil.class);
    doThrow(new IOException("mock exception")).when(ModuleReflectionUtil.class);
    ModuleReflectionUtil.getCheckstyleModules(packages, classLoader);
    final String internalFieldName = "thirdPartyNameToFullModuleNames";
    final Map<String, String> nullMap = Whitebox.getInternalState(objectFactory, internalFieldName);
    assertNull("Expected uninitialized field", nullMap);
    final Object instance = objectFactory.createModule(name);
    assertEquals("Expected empty string", "", instance);
    final Map<String, String> emptyMap = Whitebox.getInternalState(objectFactory, internalFieldName);
    assertEquals("Expected empty map", Collections.emptyMap(), emptyMap);
}
