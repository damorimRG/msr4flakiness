/**
 * tests range queries, long comparisons and relative properties
 * @throws CommitFailedException
 */
// OAK-2062
@Test
public void testRangeRelativeProperties() throws CommitFailedException {
    final List<String> emptyList = new ArrayList<String>();
    final String property = "prop";
    Tree contentNodes, t;
    contentNodes = root.getTree("/").addChild("content").addChild("nodes");
    /* creating content structure
         * content : {
         *   nodes : {
         *     a9 {
         *       b : {
         *         c : {
         *           d9 : {
         *             prop : 9
         *           }
         *         }
         *       }
         *     },
         *     a10 {
         *       b : {
         *         c : {
         *           d10 : {
         *             prop : 10
         *           }
         *         }
         *       }
         *     },
         *     a20 {
         *       b : {
         *         c : {
         *           d20 : {
         *             prop : 20
         *           }
         *         }
         *       }
         *     },
         *     a30 {
         *       b : {
         *         c : {
         *           d30 : {
         *             prop : 30
         *           }
         *         }
         *       }
         *     },
         *   }
         * }
         * 
         */
    t = addNtUnstructuredChild(contentNodes, "a9", null, null);
    t = addNtUnstructuredChild(t, "b", null, null);
    t = addNtUnstructuredChild(t, "c", null, null);
    t = addNtUnstructuredChild(t, "d9", property, 9L);
    t = addNtUnstructuredChild(contentNodes, "a10", null, null);
    t = addNtUnstructuredChild(t, "b", null, null);
    t = addNtUnstructuredChild(t, "c", null, null);
    t = addNtUnstructuredChild(t, "d10", property, 10L);
    t = addNtUnstructuredChild(contentNodes, "a20", null, null);
    t = addNtUnstructuredChild(t, "b", null, null);
    t = addNtUnstructuredChild(t, "c", null, null);
    t = addNtUnstructuredChild(t, "d20", property, 20L);
    t = addNtUnstructuredChild(contentNodes, "a30", null, null);
    t = addNtUnstructuredChild(t, "b", null, null);
    t = addNtUnstructuredChild(t, "c", null, null);
    t = addNtUnstructuredChild(t, "d30", property, 30L);
    root.commit();
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop >= 9)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop >= 10)]", "xpath", of("/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop >= 20)]", "xpath", of("/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop >= 30)]", "xpath", of("/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop >= 40)]", "xpath", emptyList);
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop <= 8)]", "xpath", emptyList);
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop <= 9)]", "xpath", of("/content/nodes/a9"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop <= 10)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop <= 20)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20"));
    assertQuery("/jcr:root/content/nodes//*[(*/*/*/@prop <= 30)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop >= 9)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop >= 10)]", "xpath", of("/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop >= 20)]", "xpath", of("/content/nodes/a20", "/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop >= 30)]", "xpath", of("/content/nodes/a30"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop >= 40)]", "xpath", emptyList);
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop <= 8)]", "xpath", emptyList);
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop <= 9)]", "xpath", of("/content/nodes/a9"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop <= 10)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop <= 20)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20"));
    assertQuery("/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop <= 30)]", "xpath", of("/content/nodes/a9", "/content/nodes/a10", "/content/nodes/a20", "/content/nodes/a30"));
}
