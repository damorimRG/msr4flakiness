@Test
public void updateAndReadAtReadRev() throws Exception {
    SecondaryStoreCache cache = createCache(new PathFilter(of("/a"), empty));
    NodeBuilder nb = primary.getRoot().builder();
    create(nb, "/a/b", "/a/c", "/x/y/z");
    AbstractDocumentNodeState r1 = merge(nb);
    // Update some other part of tree i.e. which does not change lastRev for /a/c
    nb = primary.getRoot().builder();
    create(nb, "/a/e/d");
    AbstractDocumentNodeState r2 = merge(nb);
    // Lookup should work fine
    AbstractDocumentNodeState a_r2 = documentState(r2, "/a/c");
    AbstractDocumentNodeState result = cache.getDocumentNodeState(Path.fromString("/a/c"), r2.getRootRevision(), a_r2.getLastRevision());
    assertTrue(EqualsDiff.equals(a_r2, result));
    // Child docs should only have lastRev and not root rev
    assertTrue(result.hasProperty(DelegatingDocumentNodeState.PROP_LAST_REV));
    assertFalse(result.hasProperty(DelegatingDocumentNodeState.PROP_REVISION));
    // Root doc would have both meta props
    assertTrue(secondary.getRoot().hasProperty(DelegatingDocumentNodeState.PROP_LAST_REV));
    assertTrue(secondary.getRoot().hasProperty(DelegatingDocumentNodeState.PROP_REVISION));
    nb = primary.getRoot().builder();
    nb.child("a").child("c").remove();
    AbstractDocumentNodeState r3 = merge(nb);
    // Now look from older revision
    result = cache.getDocumentNodeState(Path.fromString("/a/c"), r3.getRootRevision(), a_r2.getLastRevision());
    // now as its not visible from head it would not be visible
    assertNull(result);
}
