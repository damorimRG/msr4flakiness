@Test
public void testNotEqual() {
    List<Restriction> rs = new ArrayList<>();
    // - different type
    rs.add(new RestrictionImpl(PropertyStates.createProperty(name, value, Type.STRING), isMandatory));
    // - different multi-value status
    rs.add(new RestrictionImpl(PropertyStates.createProperty(name, ImmutableList.of(value), Type.NAMES), isMandatory));
    // - different name
    rs.add(new RestrictionImpl(createProperty("otherName", value, type), isMandatory));
    // - different value
    rs.add(new RestrictionImpl(createProperty(name, "otherValue", type), isMandatory));
    // - different mandatory flag
    rs.add(new RestrictionImpl(createProperty(name, value, type), !isMandatory));
    // - different impl
    rs.add(new Restriction() {

        @NotNull
        @Override
        public RestrictionDefinition getDefinition() {
            return new RestrictionDefinitionImpl(name, type, isMandatory);
        }

        @NotNull
        @Override
        public PropertyState getProperty() {
            return createProperty(name, value, type);
        }
    });
    for (Restriction r : rs) {
        assertNotEquals(restriction, r);
    }
}
