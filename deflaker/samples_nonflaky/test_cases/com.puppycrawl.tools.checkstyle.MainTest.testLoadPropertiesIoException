@Test
public void testLoadPropertiesIoException() throws Exception {
    final Class<?>[] param = new Class<?>[1];
    param[0] = File.class;
    final Class<?> cliOptionsClass = Class.forName(Main.class.getName());
    final Method method = cliOptionsClass.getDeclaredMethod("loadProperties", param);
    method.setAccessible(true);
    try {
        method.invoke(null, new File("."));
        fail("Exception was expected");
    } catch (InvocationTargetException ex) {
        assertTrue(ex.getCause() instanceof CheckstyleException, "Invalid error cause");
        // We do separate validation for message as in Windows
        // disk drive letter appear in message,
        // so we skip that drive letter for compatibility issues
        final LocalizedMessage loadPropertiesMessage = new LocalizedMessage(1, Definitions.CHECKSTYLE_BUNDLE, Main.LOAD_PROPERTIES_EXCEPTION, new String[] { "" }, null, getClass(), null);
        final String causeMessage = ex.getCause().getLocalizedMessage();
        final String localizedMessage = loadPropertiesMessage.getMessage();
        final boolean samePrefix = causeMessage.substring(0, causeMessage.indexOf(' ')).equals(localizedMessage.substring(0, localizedMessage.indexOf(' ')));
        final boolean sameSuffix = causeMessage.substring(causeMessage.lastIndexOf(' ')).equals(localizedMessage.substring(localizedMessage.lastIndexOf(' ')));
        assertTrue(samePrefix || sameSuffix, "Invalid error message");
        assertTrue(causeMessage.contains(".'"), "Invalid error message");
    }
}
