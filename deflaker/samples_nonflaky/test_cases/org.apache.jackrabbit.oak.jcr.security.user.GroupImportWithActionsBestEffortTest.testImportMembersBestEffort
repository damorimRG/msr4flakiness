@Test
public void testImportMembersBestEffort() throws Exception {
    User user1 = getUserManager().createUser("user1", "");
    String uuid1 = getImportSession().getNode(user1.getPath()).getUUID();
    User user2 = getUserManager().createUser("user2", "");
    String uuid2 = getImportSession().getNode(user2.getPath()).getUUID();
    String nonExistingUUID = UUID.randomUUID().toString();
    String failedUUID = uuid1;
    String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<sv:node sv:name=\"gFolder\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">" + "   <sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\">" + "      <sv:value>rep:AuthorizableFolder</sv:value>" + "   </sv:property>" + "   <sv:node sv:name=\"g1\">" + "      <sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:Group</sv:value></sv:property>" + "      <sv:property sv:name=\"jcr:uuid\" sv:type=\"String\"><sv:value>0120a4f9-196a-3f9e-b9f5-23f31f914da7</sv:value></sv:property>" + "      <sv:property sv:name=\"rep:principalName\" sv:type=\"String\"><sv:value>g1</sv:value></sv:property>" + "      <sv:property sv:name=\"rep:members\" sv:multiple=\"true\" sv:type=\"WeakReference\">" + "         <sv:value>" + uuid1 + "</sv:value>" + "         <sv:value>" + uuid2 + "</sv:value>" + "         <sv:value>" + nonExistingUUID + "</sv:value>" + "         <sv:value>" + failedUUID + "</sv:value>" + "      </sv:property>" + "   </sv:node>" + "</sv:node>";
    doImport(getTargetPath(), xml);
    Group g1 = (Group) getUserManager().getAuthorizable("g1");
    assertTrue(groupAction.onMembersAddedCalled);
    assertTrue(groupAction.onMembersAddedContentIdCalled);
    assertEquals(g1.getID(), groupAction.group.getID());
    assertEquals(ImmutableSet.of(user1.getID(), user2.getID()), groupAction.memberIds);
    assertEquals(ImmutableSet.of(nonExistingUUID), groupAction.memberContentIds);
    // duplicate uuids are swallowed by the set in userImporter: nonExisting#add
    assertFalse(groupAction.failedIds.iterator().hasNext());
}
