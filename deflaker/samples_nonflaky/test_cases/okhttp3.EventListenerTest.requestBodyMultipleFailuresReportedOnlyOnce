@Test
public void requestBodyMultipleFailuresReportedOnlyOnce() {
    RequestBody requestBody = new RequestBody() {

        @Override
        public MediaType contentType() {
            return MediaType.get("text/plain");
        }

        @Override
        public long contentLength() {
            return 1024 * 1024 * 256;
        }

        @Override
        public void writeTo(BufferedSink sink) throws IOException {
            int failureCount = 0;
            for (int i = 0; i < 1024; i++) {
                try {
                    sink.write(new byte[1024 * 256]);
                    sink.flush();
                } catch (IOException e) {
                    failureCount++;
                    if (failureCount == 3)
                        throw e;
                }
            }
        }
    };
    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));
    Call call = client.newCall(new Request.Builder().url(server.url("/")).post(requestBody).build());
    try {
        call.execute();
        fail();
    } catch (IOException expected) {
    }
    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "RequestFailed", "ConnectionReleased", "CallFailed");
}
