@Test
public void propertyRestriction() {
    PropertyValue one = PropertyValues.newString("1");
    PropertyValue two = PropertyValues.newString("2");
    FilterImpl f = FilterImpl.newTestInstance();
    assertTrue(null == f.getPropertyRestriction("x"));
    f.restrictProperty("x", Operator.LESS_OR_EQUAL, two);
    assertEquals("Filter(, path=*, property=[x=[..2]]])", f.toString());
    f.restrictProperty("x", Operator.GREATER_OR_EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[..2], [1..]])", f.toString());
    // no change, as the same restrictions already were added
    f.restrictProperty("x", Operator.LESS_OR_EQUAL, two);
    assertEquals("Filter(, path=*, property=[x=[..2], [1..]])", f.toString());
    f.restrictProperty("x", Operator.GREATER_OR_EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[..2], [1..]])", f.toString());
    f.restrictProperty("x", Operator.GREATER_THAN, one);
    assertEquals("Filter(, path=*, property=[x=[..2], [1.., (1..]])", f.toString());
    f.restrictProperty("x", Operator.LESS_THAN, two);
    assertEquals("Filter(, path=*, property=[x=[..2], [1.., (1.., ..2)]])", f.toString());
    // TODO could replace / remove the old range conditions,
    // if there is an overlap
    f.restrictProperty("x", Operator.EQUAL, two);
    assertEquals("Filter(, path=*, property=[x=[..2], [1.., (1.., ..2), 2]])", f.toString());
    f = FilterImpl.newTestInstance();
    f.restrictProperty("x", Operator.EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[1]])", f.toString());
    f.restrictProperty("x", Operator.EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[1]])", f.toString());
    // TODO could replace / remove the old range conditions,
    // if there is an overlap
    f.restrictProperty("x", Operator.GREATER_OR_EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[1, [1..]])", f.toString());
    f.restrictProperty("x", Operator.LESS_OR_EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[1, [1.., ..1]]])", f.toString());
    // TODO could replace / remove the old range conditions,
    // if there is an overlap
    f.restrictProperty("x", Operator.GREATER_THAN, one);
    assertEquals("Filter(, path=*, property=[x=[1, [1.., ..1], (1..]])", f.toString());
    f = FilterImpl.newTestInstance();
    f.restrictProperty("x", Operator.EQUAL, one);
    assertEquals("Filter(, path=*, property=[x=[1]])", f.toString());
    // TODO could replace / remove the old range conditions,
    // if there is an overlap
    f.restrictProperty("x", Operator.LESS_THAN, one);
    assertEquals("Filter(, path=*, property=[x=[1, ..1)]])", f.toString());
    f = FilterImpl.newTestInstance();
    f.restrictProperty("x", Operator.NOT_EQUAL, null);
    assertEquals("Filter(, path=*, property=[x=[is not null]])", f.toString());
    f.restrictProperty("x", Operator.LESS_THAN, one);
    assertEquals("Filter(, path=*, property=[x=[is not null, ..1)]])", f.toString());
    // this should replace the range with an equality
    // (which is faster, and correct even when using multi-valued properties)
    f.restrictProperty("x", Operator.EQUAL, two);
    assertEquals("Filter(, path=*, property=[x=[is not null, ..1), 2]])", f.toString());
}
