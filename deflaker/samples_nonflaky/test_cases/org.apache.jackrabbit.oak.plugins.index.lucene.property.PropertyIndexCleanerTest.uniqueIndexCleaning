@Test
public void uniqueIndexCleaning() throws Exception {
    IndexDefinitionBuilder defnb = new IndexDefinitionBuilder();
    defnb.indexRule("nt:base").property("foo").propertyIndex().unique();
    String indexPath = "/oak:index/foo";
    addIndex(indexPath, defnb);
    PropertyIndexCleaner cleaner = new PropertyIndexCleaner(nodeStore, () -> asList("/oak:index/uuid", indexPath), asyncService, StatisticsProvider.NOOP);
    cleaner.setCreatedTimeThreshold(TimeUnit.MILLISECONDS, 100);
    clock.waitUntil(1000);
    NodeBuilder builder = nodeStore.getRoot().builder();
    builder.child("a").setProperty("foo", "bar");
    PropertyIndexUpdateCallback cb = newCallback(builder, indexPath);
    propertyUpdated(cb, indexPath, "/a", "foo", "bar");
    cb.done();
    merge(builder);
    clock.waitUntil(1150);
    builder = nodeStore.getRoot().builder();
    builder.child("b").setProperty("foo", "bar2");
    cb = newCallback(builder, indexPath);
    propertyUpdated(cb, indexPath, "/b", "foo", "bar2");
    cb.done();
    merge(builder);
    assertThat(query(indexPath, "foo", "bar"), containsInAnyOrder("/a"));
    assertThat(query(indexPath, "foo", "bar2"), containsInAnyOrder("/b"));
    // ------------------------ Run 1
    asyncService.addInfo("async", 1200);
    assertCleanUpPerformed(cleaner.performCleanup(false), true);
    assertJsonInfo(indexPath, "{\n" + "  \"foo\": {\n" + "    \"entryCount\": 1,\n" + "    \"unique\": true\n" + "  }\n" + "}");
    // /a would be purged, /b would be retained as its created time 1150 is not older than 100 wrt
    // indexer time of 1200
    assertThat(query(indexPath, "foo", "bar"), empty());
    assertThat(query(indexPath, "foo", "bar2"), containsInAnyOrder("/b"));
    builder = nodeStore.getRoot().builder();
    builder.child("c").setProperty("foo", "bar2");
    cb = newCallback(builder, indexPath);
    propertyUpdated(cb, indexPath, "/c", "foo", "bar2");
    try {
        cb.done();
        fail();
    } catch (CommitFailedException e) {
        assertEquals(CONSTRAINT, e.getType());
    }
    // ------------------------ Run 2
    asyncService.addInfo("async", 1400);
    assertCleanUpPerformed(cleaner.performCleanup(false), true);
    // Both entries would have been purged
    assertThat(query(indexPath, "foo", "bar"), empty());
    assertThat(query(indexPath, "foo", "bar2"), empty());
}
