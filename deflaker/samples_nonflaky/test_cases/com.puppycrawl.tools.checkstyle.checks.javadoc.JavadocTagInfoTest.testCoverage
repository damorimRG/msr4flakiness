@Test
public void testCoverage() {
    assertEquals(JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType(), "Invalid type");
    assertEquals("text [@version] name [version] type [BLOCK]", JavadocTagInfo.VERSION.toString(), "Invalid toString result");
    try {
        JavadocTagInfo.fromName(null);
        fail("IllegalArgumentException is expected");
    } catch (IllegalArgumentException ex) {
        assertEquals("the name is null", ex.getMessage(), "Invalid exception message");
    }
    try {
        JavadocTagInfo.fromName("myname");
        fail("IllegalArgumentException is expected");
    } catch (IllegalArgumentException ex) {
        assertEquals("the name [myname] is not a valid Javadoc tag name", ex.getMessage(), "Invalid exception message");
    }
    try {
        JavadocTagInfo.fromText(null);
        fail("IllegalArgumentException is expected");
    } catch (IllegalArgumentException ex) {
        assertEquals("the text is null", ex.getMessage(), "Invalid exception message");
    }
    try {
        JavadocTagInfo.fromText("myname");
        fail("IllegalArgumentException is expected");
    } catch (IllegalArgumentException ex) {
        assertEquals("the text [myname] is not a valid Javadoc tag text", ex.getMessage(), "Invalid exception message");
    }
    assertEquals(JavadocTagInfo.VERSION, JavadocTagInfo.fromText("@version"), "Invalid fromText result");
}
