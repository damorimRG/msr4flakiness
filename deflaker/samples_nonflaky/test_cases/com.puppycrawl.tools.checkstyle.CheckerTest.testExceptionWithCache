@Test
public void testExceptionWithCache() throws Exception {
    final File cacheFile = File.createTempFile("junit", null, temporaryFolder);
    final DefaultConfiguration checkConfig = createModuleConfig(CheckWhichThrowsError.class);
    final DefaultConfiguration treewalkerConfig = createModuleConfig(TreeWalker.class);
    treewalkerConfig.addChild(checkConfig);
    final DefaultConfiguration checkerConfig = createRootConfig(treewalkerConfig);
    checkerConfig.addAttribute("charset", StandardCharsets.UTF_8.name());
    checkerConfig.addAttribute("cacheFile", cacheFile.getPath());
    checkerConfig.addChild(treewalkerConfig);
    final Checker checker = createChecker(checkerConfig);
    final String filePath = getPath("InputChecker.java");
    try {
        checker.process(Collections.singletonList(new File(filePath)));
        fail("Exception is expected");
    } catch (CheckstyleException ex) {
        assertEquals("Exception was thrown while processing " + filePath, ex.getMessage(), "Error message is not expected");
        // destroy is called by Main
        checker.destroy();
        final Properties cache = new Properties();
        try (BufferedReader reader = Files.newBufferedReader(cacheFile.toPath())) {
            cache.load(reader);
        }
        assertEquals(1, cache.size(), "Cache has unexpected size");
        assertNull(cache.getProperty(filePath), "testFile is not in cache");
    }
}
