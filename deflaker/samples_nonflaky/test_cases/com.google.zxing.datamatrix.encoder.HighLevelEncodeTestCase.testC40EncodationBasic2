@Test
public void testC40EncodationBasic2() {
    String visualized = encodeHighLevel("AIMAIAB");
    assertEquals("230 91 11 90 255 254 67 129", visualized);
    // "B" is normally encoded as "15" (one C40 value)
    // "else" case: "B" is encoded as ASCII
    visualized = encodeHighLevel("AIMAIAb");
    // Encoded as ASCII
    assertEquals("66 74 78 66 74 66 99 129", visualized);
    // Alternative solution:
    // assertEquals("230 91 11 90 255 254 99 129", visualized);
    // "b" is normally encoded as "Shift 3, 2" (two C40 values)
    // "else" case: "b" is encoded as ASCII
    visualized = encodeHighLevel("AIMAIMAIMË");
    assertEquals("230 91 11 91 11 91 11 254 235 76", visualized);
    // Alternative solution:
    // assertEquals("230 91 11 91 11 91 11 11 9 254", visualized);
    // Expl: 230 = shift to C40, "91 11" = "AIM",
    // "11 9" = "�" = "Shift 2, UpperShift, <char>
    // "else" case
    visualized = encodeHighLevel("AIMAIMAIMë");
    // Activate when additional rectangulars are available
    assertEquals("230 91 11 91 11 91 11 254 235 108", visualized);
// Expl: 230 = shift to C40, "91 11" = "AIM",
// "�" in C40 encodes to: 1 30 2 11 which doesn't fit into a triplet
// "10 243" =
// 254 = unlatch, 235 = Upper Shift, 108 = � = 0xEB/235 - 128 + 1
// "else" case
}
