// OAK-3019
@Test
public void versionablePathHook() throws CommitFailedException {
    TestStore store = new TestStore();
    DocumentNodeStore ns = new DocumentMK.Builder().setDocumentStore(store).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    builder.child(":hidden");
    ns.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    builder = ns.getRoot().builder();
    NodeBuilder hidden = builder.child(":hidden");
    for (int i = 0; i <= DocumentMK.MANY_CHILDREN_THRESHOLD; i++) {
        hidden.child("child-" + i);
    }
    // add more changes until a branch is created
    NodeBuilder foo = builder.child("foo");
    int numRevs = getRevisionsSize(store, "/");
    while (numRevs == getRevisionsSize(store, "/")) {
        foo.setProperty("p", "v");
        foo.removeProperty("p");
        persistToBranch(builder);
    }
    store.paths.clear();
    VersionablePathHook hook = new VersionablePathHook("default", new ProviderCtx() {

        @NotNull
        @Override
        public SecurityProvider getSecurityProvider() {
            throw new UnsupportedOperationException();
        }

        @NotNull
        @Override
        public TreeProvider getTreeProvider() {
            return new TreeProviderService();
        }

        @NotNull
        @Override
        public RootProvider getRootProvider() {
            return new RootProviderService();
        }

        @NotNull
        @Override
        public MountInfoProvider getMountInfoProvider() {
            throw new UnsupportedOperationException();
        }
    });
    hook.processCommit(ns.getRoot(), builder.getNodeState(), CommitInfo.EMPTY);
    assertEquals("Must not query for hidden paths: " + store.paths.toString(), 0, store.paths.size());
    ns.dispose();
}
