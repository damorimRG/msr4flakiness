@Test
public void testNegativeGroupCaching() throws Exception {
    final String user = "negcache";
    final String failMessage = "Did not throw IOException: ";
    conf.setLong(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS, 2);
    FakeTimer timer = new FakeTimer();
    Groups groups = new Groups(conf, timer);
    groups.cacheGroupsAdd(Arrays.asList(myGroups));
    groups.refresh();
    FakeGroupMapping.addToBlackList(user);
    // In the first attempt, the user will be put in the negative cache.
    try {
        groups.getGroups(user);
        fail(failMessage + "Failed to obtain groups from FakeGroupMapping.");
    } catch (IOException e) {
        // Expects to raise exception for the first time. But the user will be
        // put into the negative cache
        GenericTestUtils.assertExceptionContains("No groups found for user", e);
    }
    // The second time, the user is in the negative cache.
    try {
        groups.getGroups(user);
        fail(failMessage + "The user is in the negative cache.");
    } catch (IOException e) {
        GenericTestUtils.assertExceptionContains("No groups found for user", e);
    }
    // Brings back the backend user-group mapping service.
    FakeGroupMapping.clearBlackList();
    // It should still get groups from the negative cache.
    try {
        groups.getGroups(user);
        fail(failMessage + "The user is still in the negative cache, even " + "FakeGroupMapping has resumed.");
    } catch (IOException e) {
        GenericTestUtils.assertExceptionContains("No groups found for user", e);
    }
    // Let the elements in the negative cache expire.
    timer.advance(4 * 1000);
    // The groups for the user is expired in the negative cache, a new copy of
    // groups for the user is fetched.
    assertEquals(Arrays.asList(myGroups), groups.getGroups(user));
}
