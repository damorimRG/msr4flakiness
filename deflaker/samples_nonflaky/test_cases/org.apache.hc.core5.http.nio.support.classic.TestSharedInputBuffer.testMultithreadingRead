@Test
public void testMultithreadingRead() throws Exception {
    final SharedInputBuffer inputBuffer = new SharedInputBuffer(10);
    final CapacityChannel capacityChannel = Mockito.mock(CapacityChannel.class);
    inputBuffer.updateCapacity(capacityChannel);
    Mockito.verify(capacityChannel).update(10);
    Mockito.reset(capacityChannel);
    final ExecutorService executorService = Executors.newFixedThreadPool(2);
    final Future<Boolean> task1 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            final Charset charset = StandardCharsets.US_ASCII;
            inputBuffer.fill(charset.encode("1234567890"));
            return Boolean.TRUE;
        }
    });
    final Future<Integer> task2 = executorService.submit(new Callable<Integer>() {

        @Override
        public Integer call() throws Exception {
            final byte[] tmp = new byte[20];
            return inputBuffer.read(tmp, 0, tmp.length);
        }
    });
    Assert.assertEquals(Boolean.TRUE, task1.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Assert.assertEquals(Integer.valueOf(10), task2.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Mockito.verify(capacityChannel).update(10);
}
