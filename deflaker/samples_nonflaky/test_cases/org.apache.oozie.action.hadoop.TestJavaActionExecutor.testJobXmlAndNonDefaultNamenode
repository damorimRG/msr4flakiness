public void testJobXmlAndNonDefaultNamenode() throws Exception {
    // By default the job.xml file is taken from the workflow application
    // namenode, regadless the namenode specified for the action. To specify
    // a job.xml on another namenode use a fully qualified file path.
    Path appPath = new Path(getFsTestCaseDir(), "app");
    getFileSystem().mkdirs(appPath);
    Path jobXmlAbsolutePath = new Path(getFsTestCaseDir().toUri().getPath(), "jobxmlpath/job.xml");
    assertTrue(jobXmlAbsolutePath.isAbsolute() && jobXmlAbsolutePath.toUri().getAuthority() == null);
    Path jobXmlAbsolutePath2 = new Path(getFsTestCaseDir().toUri().getPath(), "jobxmlpath/job3.xml");
    assertTrue(jobXmlAbsolutePath2.isAbsolute() && jobXmlAbsolutePath2.toUri().getAuthority() == null);
    Path jobXmlQualifiedPath = new Path(getFs2TestCaseDir(), "jobxmlpath/job4.xml");
    assertTrue(jobXmlQualifiedPath.toUri().getAuthority() != null);
    // Use non-default name node (second filesystem) and three job-xml configurations:
    // 1. Absolute (but not fully qualified) path located in the first filesystem
    // 2. Without path (fist filesystem)
    // 3. Absolute (but not fully qualified) path located in the both filesystems
    // (first should be used)
    // 4. Fully qualified path located in the second filesystem
    String str = "<java>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNode2Uri() + "</name-node>" + "<job-xml>" + jobXmlAbsolutePath.toString() + "</job-xml>" + "<job-xml>job2.xml</job-xml>" + "<job-xml>" + jobXmlAbsolutePath2.toString() + "</job-xml>" + "<job-xml>" + jobXmlQualifiedPath.toString() + "</job-xml>" + "<configuration>" + "<property><name>p1</name><value>v1a</value></property>" + "<property><name>p2</name><value>v2</value></property>" + "</configuration>" + "</java>";
    Element xml = XmlUtils.parseXml(str);
    XConfiguration jConf = new XConfiguration();
    jConf.set("p1", "v1b");
    jConf.set("p3", "v3a");
    OutputStream os = getFileSystem().create(jobXmlAbsolutePath);
    jConf.writeXml(os);
    os.close();
    jConf = new XConfiguration();
    jConf.set("p4", "v4");
    jConf.set("p3", "v3b");
    os = getFileSystem().create(new Path(appPath, "job2.xml"));
    jConf.writeXml(os);
    os.close();
    // This configuration is expected to be used
    jConf = new XConfiguration();
    jConf.set("p5", "v5a");
    jConf.set("p6", "v6a");
    os = getFileSystem().create(jobXmlAbsolutePath2);
    jConf.writeXml(os);
    os.close();
    // This configuration is expected to be ignored
    jConf = new XConfiguration();
    jConf.set("p5", "v5b");
    jConf.set("p6", "v6b");
    os = getFileSystem2().create(new Path(jobXmlAbsolutePath2.toUri().getPath()));
    jConf.writeXml(os);
    os.close();
    jConf = new XConfiguration();
    jConf.set("p7", "v7a");
    jConf.set("p8", "v8a");
    os = getFileSystem2().create(jobXmlQualifiedPath);
    jConf.writeXml(os);
    os.close();
    Context context = createContext("<java/>", null);
    Configuration conf = new JavaActionExecutor().createBaseHadoopConf(context, xml);
    int confSize0 = conf.size();
    JavaActionExecutor.parseJobXmlAndConfiguration(context, xml, appPath, conf);
    assertEquals(confSize0 + 8, conf.size());
    assertEquals("v1a", conf.get("p1"));
    assertEquals("v2", conf.get("p2"));
    assertEquals("v3b", conf.get("p3"));
    assertEquals("v4", conf.get("p4"));
    assertEquals("v5a", conf.get("p5"));
    assertEquals("v6a", conf.get("p6"));
    assertEquals("v7a", conf.get("p7"));
    assertEquals("v8a", conf.get("p8"));
}
