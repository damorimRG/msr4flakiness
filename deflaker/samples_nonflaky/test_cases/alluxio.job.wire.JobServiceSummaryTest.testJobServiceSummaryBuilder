@Test
public void testJobServiceSummaryBuilder() {
    Collection<StatusSummary> summaryPerStatus = mSummary.getSummaryPerStatus();
    Assert.assertEquals("Unexpected length of summaryPerStatus", Status.values().length, summaryPerStatus.size());
    Map<Status, Long> groupByStatus = Maps.newHashMap();
    for (StatusSummary statusSummary : summaryPerStatus) {
        groupByStatus.put(statusSummary.getStatus(), statusSummary.getCount());
    }
    Assert.assertEquals("Unexpected length after grouping by status, " + "perhaps there were duplicate status in StatusSummary", Status.values().length, summaryPerStatus.size());
    for (Status status : groupByStatus.keySet()) {
        long count = groupByStatus.get(status);
        switch(status) {
            case COMPLETED:
                Assert.assertEquals("COMPLETED count unexpected", 3L, count);
                break;
            case FAILED:
                Assert.assertEquals("FAILED count unexpected", 3L, count);
                break;
            case RUNNING:
                Assert.assertEquals("RUNNING count unexpected", 1L, count);
                break;
            default:
                Assert.assertEquals("Unexpected status having count value: " + status, 0L, count);
        }
    }
}
