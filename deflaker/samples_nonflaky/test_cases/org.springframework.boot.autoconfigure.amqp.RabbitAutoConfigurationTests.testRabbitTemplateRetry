@Test
void testRabbitTemplateRetry() {
    this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.retry.enabled:true", "spring.rabbitmq.template.retry.maxAttempts:4", "spring.rabbitmq.template.retry.initialInterval:2000", "spring.rabbitmq.template.retry.multiplier:1.5", "spring.rabbitmq.template.retry.maxInterval:5000", "spring.rabbitmq.template.receiveTimeout:123", "spring.rabbitmq.template.replyTimeout:456").run((context) -> {
        RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);
        assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("receiveTimeout", 123L);
        assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("replyTimeout", 456L);
        RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(rabbitTemplate, "retryTemplate");
        assertThat(retryTemplate).isNotNull();
        SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) ReflectionTestUtils.getField(retryTemplate, "retryPolicy");
        ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils.getField(retryTemplate, "backOffPolicy");
        assertThat(retryPolicy.getMaxAttempts()).isEqualTo(4);
        assertThat(backOffPolicy.getInitialInterval()).isEqualTo(2000);
        assertThat(backOffPolicy.getMultiplier()).isEqualTo(1.5);
        assertThat(backOffPolicy.getMaxInterval()).isEqualTo(5000);
    });
}
