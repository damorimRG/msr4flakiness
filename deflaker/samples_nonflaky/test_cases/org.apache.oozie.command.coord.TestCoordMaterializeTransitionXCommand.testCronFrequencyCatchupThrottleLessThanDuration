public void testCronFrequencyCatchupThrottleLessThanDuration() throws Exception {
    final String startInThePast = "2013-03-10T08:00Z";
    final String startPlusOneDay = "2013-03-11T08:00Z";
    final Date startTime = DateUtils.parseDateOozieTZ(startInThePast);
    final Date endTime = DateUtils.parseDateOozieTZ(startPlusOneDay);
    CoordinatorJobBean job = addRecordToCoordJobTable(CoordinatorJob.Status.PREP, startTime, endTime, false, false, 0);
    job.setNextMaterializedTime(startTime);
    job.setMatThrottling(3);
    final String everyHour = "0 * * * *";
    job.setFrequency(everyHour);
    job.setTimeUnit(Timeunit.CRON);
    CoordJobQueryExecutor.getInstance().executeUpdate(CoordJobQuery.UPDATE_COORD_JOB, job);
    new CoordMaterializeTransitionXCommand(job.getId(), hoursToSeconds(1)).call();
    final String startPlusOneHour = "2013-03-10T09:00Z";
    final String startPlusTwoHours = "2013-03-10T10:00Z";
    final Date[] nominalTimes = new Date[] { DateUtils.parseDateOozieTZ(startInThePast), DateUtils.parseDateOozieTZ(startPlusOneHour), DateUtils.parseDateOozieTZ(startPlusTwoHours) };
    final int expectedNominalTimeCount = 3;
    checkCoordActionsNominalTime(job.getId(), expectedNominalTimeCount, nominalTimes);
    try {
        job = jpaService.execute(new CoordJobGetJPAExecutor(job.getId()));
        assertFalse("coordinator job shouldn't have yet been materialized", job.isDoneMaterialization());
        assertEquals("coordinator action count mismatch", expectedNominalTimeCount, job.getLastActionNumber());
        final String startPlusThreeHours = "2013-03-10T11:00Z";
        assertEquals("coordinator next materialization time mismatch", DateUtils.parseDateOozieTZ(startPlusThreeHours), job.getNextMaterializedTime());
    } catch (final JPAExecutorException se) {
        se.printStackTrace();
        fail("Job ID " + job.getId() + " was not stored properly in db");
    }
}
