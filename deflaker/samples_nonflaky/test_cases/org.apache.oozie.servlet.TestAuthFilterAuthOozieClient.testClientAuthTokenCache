public void testClientAuthTokenCache() throws Exception {
    Configuration conf = getAuthenticationConf();
    // not using cache
    File cacheFile = runTest(new Callable<Void>() {

        public Void call() throws Exception {
            String oozieUrl = getContextURL();
            String[] args = new String[] { "admin", "-status", "-oozie", oozieUrl };
            assertEquals(0, new OozieCLI().run(args));
            return null;
        }
    }, conf);
    assertFalse(cacheFile.exists());
    // using cache
    setSystemProperty("oozie.auth.token.cache", "true");
    cacheFile.delete();
    assertFalse(cacheFile.exists());
    cacheFile = runTest(new Callable<Void>() {

        public Void call() throws Exception {
            String oozieUrl = getContextURL();
            String[] args = new String[] { "admin", "-status", "-oozie", oozieUrl };
            assertEquals(0, new OozieCLI().run(args));
            return null;
        }
    }, conf);
    assertTrue(cacheFile.exists());
    String currentCache = IOUtils.getReaderAsString(new InputStreamReader(new FileInputStream(cacheFile), StandardCharsets.UTF_8), -1);
    // re-using cache
    setSystemProperty("oozie.auth.token.cache", "true");
    cacheFile = runTest(new Callable<Void>() {

        public Void call() throws Exception {
            String oozieUrl = getContextURL();
            String[] args = new String[] { "admin", "-status", "-oozie", oozieUrl };
            assertEquals(0, new OozieCLI().run(args));
            return null;
        }
    }, conf);
    assertTrue(cacheFile.exists());
    String newCache = IOUtils.getReaderAsString(new InputStreamReader(new FileInputStream(cacheFile), StandardCharsets.UTF_8), -1);
    assertEquals(currentCache, newCache);
    // re-using cache with token that will expire within 5 minutes
    currentCache = writeTokenCache(System.currentTimeMillis() + 300000, cacheFile);
    setSystemProperty("oozie.auth.token.cache", "true");
    cacheFile = runTest(new Callable<Void>() {

        public Void call() throws Exception {
            String oozieUrl = getContextURL();
            String[] args = new String[] { "admin", "-status", "-oozie", oozieUrl };
            assertEquals(0, new OozieCLI().run(args));
            return null;
        }
    }, conf);
    assertTrue(cacheFile.exists());
    newCache = IOUtils.getReaderAsString(new InputStreamReader(new FileInputStream(cacheFile), StandardCharsets.UTF_8), -1);
    assertFalse("Almost expired token should have been updated but was not", currentCache.equals(newCache));
    // re-using cache with expired token
    currentCache = writeTokenCache(System.currentTimeMillis() - 1000, cacheFile);
    setSystemProperty("oozie.auth.token.cache", "true");
    cacheFile = runTest(new Callable<Void>() {

        public Void call() throws Exception {
            String oozieUrl = getContextURL();
            String[] args = new String[] { "admin", "-status", "-oozie", oozieUrl };
            assertEquals(0, new OozieCLI().run(args));
            return null;
        }
    }, conf);
    assertTrue(cacheFile.exists());
    newCache = IOUtils.getReaderAsString(new InputStreamReader(new FileInputStream(cacheFile), StandardCharsets.UTF_8), -1);
    assertFalse("Expired token should have been updated but was not", currentCache.equals(newCache));
    setSystemProperty("oozie.auth.token.cache", "true");
    cacheFile.delete();
    assertFalse(cacheFile.exists());
}
