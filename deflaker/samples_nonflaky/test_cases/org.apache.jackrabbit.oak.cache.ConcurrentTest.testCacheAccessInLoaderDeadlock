@Test
public void testCacheAccessInLoaderDeadlock() throws Exception {
    final Random r = new Random(1);
    final CacheLIRS<Integer, Integer> cache = new CacheLIRS.Builder<Integer, Integer>().maximumWeight(100).averageWeight(10).build();
    final Exception[] ex = new Exception[1];
    final int entryCount = 10;
    int size = 3;
    Thread[] threads = new Thread[size];
    final AtomicBoolean stop = new AtomicBoolean();
    for (int i = 0; i < size; i++) {
        Thread t = new Thread() {

            @Override
            public void run() {
                Callable<Integer> callable = new Callable<Integer>() {

                    @Override
                    public Integer call() throws ExecutionException {
                        if (r.nextBoolean()) {
                            cache.get(r.nextInt(entryCount), this);
                        } else {
                            cache.get(r.nextInt(entryCount));
                        }
                        return 1;
                    }
                };
                while (!stop.get()) {
                    Integer key = r.nextInt(entryCount);
                    try {
                        cache.get(key, callable);
                    } catch (Exception e) {
                        ex[0] = e;
                    }
                    cache.remove(key);
                }
            }
        };
        t.start();
        threads[i] = t;
    }
    // test for 100 ms
    Thread.sleep(100);
    stop.set(true);
    for (Thread t : threads) {
        t.join(1000);
        // if the thread is still alive after 1 second, we assume
        // there is a deadlock - we just let the threads alive,
        // but report a failure (what else could we do?)
        if (t.isAlive()) {
            assertFalse("Deadlock detected!", t.isAlive());
        }
    }
    if (ex[0] != null) {
        throw ex[0];
    }
}
