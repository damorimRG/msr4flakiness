@Test
public void testFindFiltersDuplicateEveryone() throws Exception {
    Group everyoneGroup = null;
    try {
        UserManager userMgr = getUserManager(root);
        everyoneGroup = userMgr.createGroup(EveryonePrincipal.NAME);
        root.commit();
        Iterator<? extends Principal> principals = principalProvider.findPrincipals(null, SEARCH_TYPE_GROUP);
        Iterator filtered = Iterators.filter(principals, (Predicate<Principal>) principal -> EveryonePrincipal.NAME.equals(principal.getName()));
        assertEquals(1, Iterators.size(filtered));
    } finally {
        if (everyoneGroup != null) {
            everyoneGroup.remove();
            root.commit();
        }
    }
    List<String> expected = Arrays.asList(groupId, groupId2, groupId3);
    Collections.sort(expected);
    for (int limit = -1; limit < expected.size() + 2; limit++) {
        Iterator<? extends Principal> i1 = principalProvider.findPrincipals("testGroup", true, SEARCH_TYPE_GROUP, 0, limit);
        Iterator<? extends Principal> i2 = principalProvider.findPrincipals("testGroup*", true, SEARCH_TYPE_GROUP, 0, limit);
        assertTrue(Iterators.elementsEqual(i1, i2));
    }
}
