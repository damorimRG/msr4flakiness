@Test
public void failureInDelete() throws Exception {
    final Set<String> testFiles = new HashSet<String>();
    Directory baseDir = new CloseSafeDir() {

        @Override
        public void deleteFile(String name) throws IOException {
            if (testFiles.contains(name)) {
                throw new IOException("Not allowed to delete " + name);
            }
            super.deleteFile(name);
        }
    };
    LuceneIndexDefinition defn = new LuceneIndexDefinition(root, builder.getNodeState(), "/foo");
    IndexCopier c1 = new RAMIndexCopier(baseDir, sameThreadExecutor(), getWorkDir());
    Directory r1 = new DelayCopyingSimpleFSDirectory();
    byte[] t1 = writeFile(r1, "t1");
    byte[] t2 = writeFile(r1, "t2");
    Directory w1 = c1.wrapForRead("/foo", defn, r1, INDEX_DATA_CHILD_NAME);
    readAndAssert(w1, "t1", t1);
    readAndAssert(w1, "t2", t2);
    // t1 and t2 should now be present in local (base dir which back local)
    assertTrue(baseDir.fileExists("t1"));
    assertTrue(baseDir.fileExists("t2"));
    Directory r2 = new CloseSafeDir();
    copy(r1, r2);
    r2.deleteFile("t1");
    Directory w2 = c1.wrapForRead("/foo", defn, r2, INDEX_DATA_CHILD_NAME);
    // Close would trigger removal of file which are not present in remote
    testFiles.add("t1");
    w2.close();
    assertEquals(1, c1.getFailedToDeleteFiles().size());
    LocalIndexFile testFile = c1.getFailedToDeleteFiles().values().iterator().next();
    assertEquals(1, testFile.getDeleteAttemptCount());
    assertEquals(IOUtils.humanReadableByteCount(t1.length), c1.getGarbageSize());
    assertEquals(1, c1.getGarbageDetails().length);
    Directory w3 = c1.wrapForRead("/foo", defn, r2, INDEX_DATA_CHILD_NAME);
    w3.close();
    assertEquals(2, testFile.getDeleteAttemptCount());
    // Now let the file to be deleted
    testFiles.clear();
    Directory w4 = c1.wrapForRead("/foo", defn, r2, INDEX_DATA_CHILD_NAME);
    w4.close();
    // No pending deletes left
    assertEquals(0, c1.getFailedToDeleteFiles().size());
}
