public void testBundleStatusTransitWithLock() throws Exception {
    setSystemProperty(StatusTransitService.CONF_BACKWARD_SUPPORT_FOR_STATES_WITHOUT_ERROR, "false");
    services = new Services();
    services.init();
    BundleJobBean bundleJob = this.addRecordToBundleJobTable(Job.Status.RUNNING, true);
    final String jobId = bundleJob.getId();
    final String bundleId = bundleJob.getId();
    addRecordToBundleActionTable(bundleId, "action1-C", 0, Job.Status.PREP);
    addRecordToBundleActionTable(bundleId, "action2-C", 0, Job.Status.RUNNING);
    addRecordToBundleActionTable(bundleId, "action3-C", 0, Job.Status.DONEWITHERROR);
    LockerCoordinator coordinator = new LockerCoordinator();
    JobLock lockThread = new JobLock(jobId, coordinator);
    new Thread(lockThread).start();
    coordinator.awaitLockAcquire();
    Runnable runnable = new StatusTransitRunnable();
    runnable.run();
    bundleJob = BundleJobQueryExecutor.getInstance().get(BundleJobQuery.GET_BUNDLE_JOB_STATUS, bundleId);
    assertEquals(Job.Status.RUNNING, bundleJob.getStatus());
    coordinator.signalLockerContinue();
    coordinator.awaitTermination();
    runnable.run();
    bundleJob = BundleJobQueryExecutor.getInstance().get(BundleJobQuery.GET_BUNDLE_JOB_STATUS, bundleId);
    assertEquals(Job.Status.RUNNINGWITHERROR, bundleJob.getStatus());
}
