@Test
public void testRepresentsDir() throws Exception {
    Path subdirDstPath = new Path(dstPath, srcPath.getName());
    String[] argv = null;
    lfs.delete(dstPath, true);
    assertFalse(lfs.exists(dstPath));
    argv = new String[] { "-put", srcPath.toString(), dstPath.toString() };
    assertEquals(0, shell.run(argv));
    assertTrue(lfs.exists(dstPath) && lfs.getFileStatus(dstPath).isFile());
    lfs.delete(dstPath, true);
    assertFalse(lfs.exists(dstPath));
    // since dst path looks like a dir, it should not copy the file and
    // rename it to what looks like a directory
    // make copy fail
    lfs.delete(dstPath, true);
    for (String suffix : new String[] { "/", "/." }) {
        argv = new String[] { "-put", srcPath.toString(), dstPath.toString() + suffix };
        assertEquals(1, shell.run(argv));
        assertFalse(lfs.exists(dstPath));
        assertFalse(lfs.exists(subdirDstPath));
    }
    // since dst path looks like a dir, it should not copy the file and
    // rename it to what looks like a directory
    for (String suffix : new String[] { "/", "/." }) {
        // empty out the directory and create to make copy succeed
        lfs.delete(dstPath, true);
        lfs.mkdirs(dstPath);
        argv = new String[] { "-put", srcPath.toString(), dstPath.toString() + suffix };
        assertEquals(0, shell.run(argv));
        assertTrue(lfs.exists(subdirDstPath));
        assertTrue(lfs.getFileStatus(subdirDstPath).isFile());
    }
    // ensure .. is interpreted as a dir
    String dotdotDst = dstPath + "/foo/..";
    lfs.delete(dstPath, true);
    lfs.mkdirs(new Path(dstPath, "foo"));
    argv = new String[] { "-put", srcPath.toString(), dotdotDst };
    assertEquals(0, shell.run(argv));
    assertTrue(lfs.exists(subdirDstPath));
    assertTrue(lfs.getFileStatus(subdirDstPath).isFile());
}
