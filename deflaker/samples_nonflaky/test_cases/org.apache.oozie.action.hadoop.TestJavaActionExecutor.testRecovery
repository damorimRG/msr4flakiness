public void testRecovery() throws Exception {
    final String actionXml = "<java>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<main-class>" + LauncherMainTester.class.getName() + "</main-class>" + "</java>";
    final Context context = createContext(actionXml, null);
    String launcherId = submitAction(context);
    waitFor(60 * 1000, new Predicate() {

        @Override
        public boolean evaluate() throws Exception {
            JavaActionExecutor ae = new JavaActionExecutor();
            Configuration conf = ae.createBaseHadoopConf(context, XmlUtils.parseXml(actionXml));
            return LauncherHelper.getRecoveryId(conf, context.getActionDir(), context.getRecoveryId()) != null;
        }
    });
    final String runningJob2 = submitAction(context);
    assertEquals(launcherId, runningJob2);
    assertEquals(launcherId, context.getAction().getExternalId());
    waitUntilYarnAppDoneAndAssertSuccess(launcherId);
    ActionExecutor ae = new JavaActionExecutor();
    ae.check(context, context.getAction());
    assertEquals("SUCCEEDED", context.getAction().getExternalStatus());
    assertNull(context.getAction().getData());
    ae.end(context, context.getAction());
    assertEquals(WorkflowAction.Status.OK, context.getAction().getStatus());
}
