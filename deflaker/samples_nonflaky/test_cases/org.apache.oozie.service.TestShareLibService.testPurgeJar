// Logic is to keep all share-lib between current timestamp and 7days old + 1 latest sharelib older than 7 days.
// refer OOZIE-1761
@Test
public void testPurgeJar() throws Exception {
    setShipLauncherInOozieConfig();
    final FileSystem fs = getFileSystem();
    // for directory created 8 days back to be deleted
    long expiryTime = System.currentTimeMillis() - TimeUnit.MILLISECONDS.convert(getOozieConfig().getInt(ShareLibService.LAUNCHERJAR_LIB_RETENTION, 7), TimeUnit.DAYS);
    String expireTs = dt.format(new Date(expiryTime - TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS)));
    String expireTs1 = dt.format(new Date(expiryTime - TimeUnit.MILLISECONDS.convert(2, TimeUnit.DAYS)));
    String noexpireTs = dt.format(new Date(expiryTime + TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS)));
    String noexpireTs1 = dt.format(new Date(expiryTime + TimeUnit.MILLISECONDS.convert(2, TimeUnit.DAYS)));
    final Path basePath = new Path(getOozieConfig().get(WorkflowAppService.SYSTEM_LIB_PATH));
    Path expirePath = new Path(basePath, ShareLibService.LAUNCHER_LIB_PREFIX + expireTs);
    Path expirePath1 = new Path(basePath, ShareLibService.LAUNCHER_LIB_PREFIX + expireTs1);
    Path noexpirePath = new Path(basePath, ShareLibService.LAUNCHER_LIB_PREFIX + noexpireTs);
    Path noexpirePath1 = new Path(basePath, ShareLibService.LAUNCHER_LIB_PREFIX + noexpireTs1);
    createDirs(fs, expirePath, expirePath1, noexpirePath, noexpirePath1);
    services.init();
    // Wait for the scheduled purge runnable to complete
    waitFor(20 * 1000, new Predicate() {

        @Override
        public boolean evaluate() throws Exception {
            return (fs.listStatus(basePath).length == 4);
        }
    });
    assertEquals(4, fs.listStatus(basePath).length);
    assertTrue(fs.exists(noexpirePath));
    assertTrue(fs.exists(noexpirePath1));
    assertTrue(fs.exists(expirePath));
    assertFalse(fs.exists(expirePath1));
}
