@Test
public void sortOnLocalName() throws Exception {
    Tree rootTree = root.getTree("/").addChild("test");
    IndexDefinitionBuilder fnNameFunctionIndex = new IndexDefinitionBuilder().noAsync();
    IndexDefinitionBuilder.PropertyRule rule = fnNameFunctionIndex.indexRule("nt:base").property("nodeName", null).propertyIndex().ordered();
    // setup function index on "fn:name()"
    rule.function("fn:local-name()");
    fnNameFunctionIndex.getBuilderTree().setProperty("tags", of("fnLocalName"), STRINGS);
    fnNameFunctionIndex.build(rootTree.addChild("oak:index").addChild("fnLocalName"));
    // same index as above except for function - "name()"
    rule.function("localname()");
    fnNameFunctionIndex.getBuilderTree().setProperty("tags", of("localName"), STRINGS);
    fnNameFunctionIndex.build(rootTree.addChild("oak:index").addChild("localName"));
    List<String> expected = Lists.newArrayList("/test/oak:index");
    for (int i = 0; i < 3; i++) {
        // 'j*' should come after (asc) 'index' in sort order
        String nodeName = "ja" + i;
        rootTree.addChild(nodeName);
        expected.add("/test/" + nodeName);
    }
    // sort expectation based on local name
    Collections.sort(expected, (s1, s2) -> {
        final StringBuffer sb1 = new StringBuffer();
        PathUtils.elements(s1).forEach(elem -> {
            String[] split = elem.split(":", 2);
            sb1.append(split[split.length - 1]);
        });
        s1 = sb1.toString();
        final StringBuffer sb2 = new StringBuffer();
        PathUtils.elements(s2).forEach(elem -> {
            String[] split = elem.split(":", 2);
            sb2.append(split[split.length - 1]);
        });
        s2 = sb2.toString();
        return s1.compareTo(s2);
    });
    root.commit();
    String query = "/jcr:root/test/* order by fn:local-name() option(index tag fnLocalName)";
    assertXpathPlan(query, "lucene:fnLocalName(/test/oak:index/fnLocalName)");
    assertEquals(expected, executeQuery(query, XPATH));
    query = "/jcr:root/test/* order by fn:local-name() ascending option(index tag fnLocalName)";
    assertXpathPlan(query, "lucene:fnLocalName(/test/oak:index/fnLocalName)");
    assertEquals(expected, executeQuery(query, XPATH));
    query = "/jcr:root/test/* order by fn:local-name() descending option(index tag fnLocalName)";
    assertXpathPlan(query, "lucene:fnLocalName(/test/oak:index/fnLocalName)");
    assertEquals(Lists.reverse(expected), executeQuery(query, XPATH));
    // order by fn:name() although function index is on "name()"
    query = "/jcr:root/test/* order by fn:local-name() option(index tag localName)";
    assertXpathPlan(query, "lucene:localName(/test/oak:index/localName)");
    assertEquals(expected, executeQuery(query, XPATH));
    query = "/jcr:root/test/* order by fn:local-name() ascending option(index tag localName)";
    assertXpathPlan(query, "lucene:localName(/test/oak:index/localName)");
    assertEquals(expected, executeQuery(query, XPATH));
    query = "/jcr:root/test/* order by fn:local-name() descending option(index tag localName)";
    assertXpathPlan(query, "lucene:localName(/test/oak:index/localName)");
    assertEquals(Lists.reverse(expected), executeQuery(query, XPATH));
}
