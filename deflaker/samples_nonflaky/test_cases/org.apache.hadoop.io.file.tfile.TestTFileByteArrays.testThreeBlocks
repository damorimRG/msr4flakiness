@Test
public void testThreeBlocks() throws IOException {
    if (skip)
        return;
    writeRecords(2 * records1stBlock + 5);
    readRecords(2 * records1stBlock + 5);
    checkBlockIndex(2 * records1stBlock + 4, 2);
    // 1st key in file
    readValueBeforeKey(0);
    readKeyWithoutValue(0);
    readValueWithoutKey(0);
    readKeyManyTimes(0);
    // last key in file
    readValueBeforeKey(2 * records1stBlock + 4);
    readKeyWithoutValue(2 * records1stBlock + 4);
    readValueWithoutKey(2 * records1stBlock + 4);
    readKeyManyTimes(2 * records1stBlock + 4);
    // 1st key in mid block, verify block indexes then read
    checkBlockIndex(records1stBlock - 1, 0);
    checkBlockIndex(records1stBlock, 1);
    readValueBeforeKey(records1stBlock);
    readKeyWithoutValue(records1stBlock);
    readValueWithoutKey(records1stBlock);
    readKeyManyTimes(records1stBlock);
    // last key in mid block, verify block indexes then read
    checkBlockIndex(records1stBlock + records2ndBlock - 1, 1);
    checkBlockIndex(records1stBlock + records2ndBlock, 2);
    readValueBeforeKey(records1stBlock + records2ndBlock - 1);
    readKeyWithoutValue(records1stBlock + records2ndBlock - 1);
    readValueWithoutKey(records1stBlock + records2ndBlock - 1);
    readKeyManyTimes(records1stBlock + records2ndBlock - 1);
    // mid in mid block
    readValueBeforeKey(records1stBlock + 10);
    readKeyWithoutValue(records1stBlock + 10);
    readValueWithoutKey(records1stBlock + 10);
    readKeyManyTimes(records1stBlock + 10);
}
