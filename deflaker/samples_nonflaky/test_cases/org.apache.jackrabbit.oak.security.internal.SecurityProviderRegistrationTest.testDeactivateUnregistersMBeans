@Test
public void testDeactivateUnregistersMBeans() {
    // activate
    registration.activate(context.bundleContext(), configWithRequiredServiceIds("serviceA"));
    // validate that registration is not performed
    SecurityProvider service = context.getService(SecurityProvider.class);
    assertNull(service);
    // register AuthenticationConfiguration to trigger MBean registration
    AuthenticationConfigurationImpl mockAc = mock(AuthenticationConfigurationImpl.class);
    registration.bindAuthenticationConfiguration(mockAc);
    // register required service
    RestrictionProvider mockRp = mock(RestrictionProvider.class);
    ServiceReference sr = when(mock(ServiceReference.class).getProperty(SERVICE_PID)).thenReturn("serviceA").getMock();
    registration.bindRestrictionProvider(sr, mockRp);
    // assert that SecurityProvider is registered
    service = context.getService(SecurityProvider.class);
    assertNotNull(service);
    // assert that MBean is registered
    assertThat("LoginModuleMBean is not registered", context.getService(LoginModuleMBean.class), notNullValue());
    // manually deactivate, simulate AuthenticationConfiguration going away due to new config for it coming in
    registration.deactivate();
    // assert that service is now unregistered
    service = context.getService(SecurityProvider.class);
    assertNull(service);
    // assert that MBean is no longer registered
    assertThat("LoginModuleMBean is still registered", context.getService(LoginModuleMBean.class), nullValue());
}
