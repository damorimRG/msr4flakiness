@Test
public void selfRecoveryPassedDeadline() throws Exception {
    String clusterId = String.valueOf(c1Id);
    ClusterNodeInfoDocument info1 = sharedStore.find(CLUSTER_NODES, clusterId);
    assertNotNull(info1);
    NodeBuilder builder = ds1.getRoot().builder();
    builder.child("x").child("y").child("z");
    merge(ds1, builder);
    ds1.dispose();
    // reset clusterNodes entry to simulate a crash of ds1
    sharedStore.remove(CLUSTER_NODES, clusterId);
    sharedStore.create(CLUSTER_NODES, newArrayList(updateOpFromDocument(info1)));
    // 'wait' until lease expires
    clock.waitUntil(info1.getLeaseEndTime() + 1);
    AtomicBoolean delay = new AtomicBoolean(true);
    // simulate a startup with self-recovery by acquiring the clusterId
    // this will call the recovery handler because the lease is expired
    // use a seeker that takes longer than the lease duration
    MissingLastRevSeeker seeker = new MissingLastRevSeeker(sharedStore, clock) {

        @Override
        public boolean acquireRecoveryLock(int clusterId, int recoveredBy) {
            assertTrue(super.acquireRecoveryLock(clusterId, recoveredBy));
            if (delay.get()) {
                try {
                    clock.waitUntil(clock.getTime() + ClusterNodeInfo.DEFAULT_LEASE_DURATION_MILLIS + 1);
                } catch (InterruptedException e) {
                    fail();
                }
            }
            return true;
        }
    };
    RecoveryHandler recoveryHandler = new RecoveryHandlerImpl(sharedStore, clock, seeker);
    try {
        // Explicitly acquiring the clusterId must fail
        // when it takes too long to recover
        ClusterNodeInfo.getInstance(sharedStore, recoveryHandler, null, null, c1Id);
        fail("must fail with DocumentStoreException");
    } catch (DocumentStoreException e) {
        assertThat(e.getMessage(), containsString("needs recovery"));
    }
    // But must succeed with auto-assignment of clusterId
    // even if machineId and instanceId match
    ClusterNodeInfo cni = ClusterNodeInfo.getInstance(sharedStore, recoveryHandler, null, null, 0);
    // though clusterId must not be the one that took too long to recover
    assertNotEquals(c1Id, cni.getId());
    // hence recovery is still needed for c1Id
    assertTrue(seeker.isRecoveryNeeded());
    cni.dispose();
    // now run again without delay with the explicit clusterId
    delay.set(false);
    // must succeed now
    cni = ClusterNodeInfo.getInstance(sharedStore, recoveryHandler, null, null, c1Id);
    assertEquals(c1Id, cni.getId());
    cni.dispose();
}
