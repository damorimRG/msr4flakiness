/*
      f->(2,3)
      2->j
      3->end
    */
public void testForkJoinFailure() throws WorkflowException {
    LiteWorkflowAppParser parser = newLiteWorkflowAppParser();
    LiteWorkflowApp def = new LiteWorkflowApp("testWf", "<worklfow-app/>", new StartNodeDef(LiteWorkflowStoreService.LiteControlNodeHandler.class, "one")).addNode(new ActionNodeDef("one", dummyConf, TestActionNodeHandler.class, "f", "end")).addNode(new ForkNodeDef("f", LiteWorkflowStoreService.LiteControlNodeHandler.class, Arrays.asList(new String[] { "two", "three" }))).addNode(new ActionNodeDef("two", dummyConf, TestActionNodeHandler.class, "j", "k")).addNode(new ActionNodeDef("three", dummyConf, TestActionNodeHandler.class, "end", "k")).addNode(new JoinNodeDef("j", LiteWorkflowStoreService.LiteControlNodeHandler.class, "k")).addNode(new KillNodeDef("k", "kill", LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new EndNodeDef("end", LiteWorkflowStoreService.LiteControlNodeHandler.class));
    try {
        invokeForkJoin(parser, def);
        fail("Expected to catch an exception but did not encounter any");
    } catch (WorkflowException we) {
        assertEquals(ErrorCode.E0737, we.getErrorCode());
        // Make sure the message contains the nodes involved in the invalid transition to end
        assertTrue(we.getMessage().contains("node [three]"));
        assertTrue(we.getMessage().contains("node [end]"));
    }
}
