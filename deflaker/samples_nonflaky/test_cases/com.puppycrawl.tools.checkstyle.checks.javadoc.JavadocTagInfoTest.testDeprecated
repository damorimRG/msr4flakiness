@Test
public void testDeprecated() throws ReflectiveOperationException {
    final DetailAstImpl ast = new DetailAstImpl();
    final DetailAstImpl astParent = new DetailAstImpl();
    astParent.setType(TokenTypes.LITERAL_CATCH);
    final Method setParent = ast.getClass().getDeclaredMethod("setParent", DetailAstImpl.class);
    setParent.setAccessible(true);
    setParent.invoke(ast, astParent);
    final int[] validTypes = { TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF, TokenTypes.ENUM_CONSTANT_DEF, TokenTypes.ANNOTATION_FIELD_DEF, TokenTypes.VARIABLE_DEF };
    for (int type : validTypes) {
        ast.setType(type);
        assertTrue(JavadocTagInfo.DEPRECATED.isValidOn(ast), "Invalid ast type for current tag: " + ast.getType());
    }
    astParent.setType(TokenTypes.SLIST);
    ast.setType(TokenTypes.VARIABLE_DEF);
    assertFalse(JavadocTagInfo.DEPRECATED.isValidOn(ast), "Should return false when ast type is invalid for current tag");
    ast.setType(TokenTypes.PARAMETER_DEF);
    assertFalse(JavadocTagInfo.DEPRECATED.isValidOn(ast), "Should return false when ast type is invalid for current tag");
}
