@Test
public void concurrentCommits2() throws Exception {
    final CommitQueue queue = new CommitQueue(DummyRevisionContext.INSTANCE);
    final CommitQueue.Callback c = new CommitQueue.Callback() {

        private Revision before = Revision.newRevision(1);

        @Override
        public void headOfQueue(@NotNull Revision r) {
            LOG.debug("seen: {}", r);
            if (r.compareRevisionTime(before) < 0) {
                exceptions.add(new Exception("Inconsistent revision sequence. Before: " + before + ", after: " + r));
            }
            before = r;
        }
    };
    // perform commits with multiple threads
    List<Thread> writers = new ArrayList<Thread>();
    for (int i = 0; i < NUM_WRITERS; i++) {
        final Random random = new Random(i);
        writers.add(new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    for (int i = 0; i < COMMITS_PER_WRITER; i++) {
                        Revision r = queue.createRevision();
                        try {
                            Thread.sleep(0, random.nextInt(1000));
                        } catch (InterruptedException e) {
                        // ignore
                        }
                        if (random.nextInt(5) == 0) {
                            // cancel 20% of the commits
                            queue.canceled(r);
                        } else {
                            queue.done(r, c);
                        }
                    }
                } catch (Exception e) {
                    exceptions.add(e);
                }
            }
        }));
    }
    for (Thread t : writers) {
        t.start();
    }
    for (Thread t : writers) {
        t.join();
    }
    assertNoExceptions();
}
