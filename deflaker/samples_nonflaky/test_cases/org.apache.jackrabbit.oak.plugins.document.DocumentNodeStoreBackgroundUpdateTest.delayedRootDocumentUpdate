@Test
public void delayedRootDocumentUpdate() throws Throwable {
    final Lock defaultLock = new ReentrantLock();
    final Map<Thread, Lock> locks = new IdentityHashMap<>();
    DocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T findAndUpdate(Collection<T> collection, UpdateOp update) {
            if (!update.getId().equals(Utils.getIdFromPath(Path.ROOT))) {
                return super.findAndUpdate(collection, update);
            }
            Lock lock = locks.getOrDefault(Thread.currentThread(), defaultLock);
            lock.lock();
            try {
                return super.findAndUpdate(collection, update);
            } finally {
                lock.unlock();
            }
        }
    };
    FailingDocumentStore failingStore = new FailingDocumentStore(store);
    int clusterId = 1;
    DocumentNodeStore ns = builderProvider.newBuilder().setAsyncDelay(0).setClusterId(clusterId).clock(clock).setDocumentStore(failingStore).build();
    NodeBuilder builder = ns.getRoot().builder();
    builder.child("node");
    merge(ns, builder);
    ns.runBackgroundOperations();
    builder = ns.getRoot().builder();
    builder.child("node").setProperty("p", "v");
    merge(ns, builder);
    List<Throwable> exceptions = new ArrayList<>();
    Thread t = new Thread(new Runnable() {

        @Override
        public void run() {
            try {
                try {
                    ns.runBackgroundOperations();
                    fail("background operations must fail because of lease failure");
                } catch (Exception ex) {
                    assertThat(ex.getMessage(), containsString("concurrent update"));
                }
            } catch (Throwable t) {
                exceptions.add(t);
            }
        }
    });
    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
    rwLock.writeLock().lock();
    locks.put(t, rwLock.readLock());
    t.start();
    while (rwLock.getQueueLength() == 0) {
        Thread.sleep(1);
    }
    // prevent further writes through the failingStore
    failingStore.fail().after(0).eternally();
    // wait until lease times out
    clock.waitUntil(clock.getTime() + TimeUnit.MINUTES.toMillis(2));
    // restart on non-failing store and immediately dispose to trigger recovery
    builderProvider.newBuilder().setAsyncDelay(0).setClusterId(clusterId).clock(clock).setDocumentStore(store).build().dispose();
    // let the background update finish
    rwLock.writeLock().unlock();
    t.join();
    NodeDocument root = failingStore.find(NODES, Utils.getIdFromPath(Path.ROOT));
    assertNotNull(root);
    ClusterNodeInfoDocument infoDoc = ClusterNodeInfoDocument.all(failingStore).get(0);
    Revision lastRev = root.getLastRev().get(clusterId);
    assertEquals(infoDoc.getLastWrittenRootRev(), lastRev.toString());
    for (Throwable ex : exceptions) {
        throw ex;
    }
}
