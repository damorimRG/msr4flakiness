// OAK-2336
@Test
public void readBranchCommit() throws Exception {
    final Set<String> readSet = Sets.newHashSet();
    DocumentStore store = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            readSet.add(key);
            return super.find(collection, key);
        }
    };
    DocumentNodeStore ns = builderProvider.newBuilder().setDocumentStore(store).setAsyncDelay(0).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    String testId = Utils.getIdFromPath("/test");
    NodeBuilder test = builder.child("test");
    test.setProperty("p", "value");
    test.setProperty("q", 0);
    // force creation of branch
    for (int i = 0; store.find(NODES, testId) == null; i++) {
        test.child("foo-" + i++);
    }
    merge(ns, builder);
    // commit enough changes for a previous doc
    for (int i = 0; i < NUM_REVS_THRESHOLD; i++) {
        builder = ns.getRoot().builder();
        builder.child("test").setProperty("q", i);
        merge(ns, builder);
    }
    // trigger split
    ns.runBackgroundOperations();
    NodeDocument doc = store.find(NODES, Utils.getIdFromPath("/test"));
    assertNotNull(doc);
    readSet.clear();
    // must not access previous document of /test
    doc.getNodeAtRevision(ns, ns.getHeadRevision(), null);
    for (String id : Sets.newHashSet(readSet)) {
        doc = store.find(NODES, id);
        assertNotNull(doc);
        if (doc.isSplitDocument() && !doc.getMainPath().equals(Path.ROOT)) {
            fail("must not access previous document: " + id);
        }
    }
}
