@Test
public void globPath() throws Exception {
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**", "foo");
    assertMatches("**", "foo");
    assertMatches("/**", "/foo");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**", "foo/bar");
    assertMatches("**", "foo/bar");
    assertMatches("/**", "/foo/bar");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**", "foo/bar/zoo");
    assertMatches("**", "foo/bar/zoo");
    assertMatches("/**", "/foo/bar/zoo");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**/*.html", "foo.html");
    assertMatches("/**/*.html", "/foo.html");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**/*.html", "bar/foo.html");
    assertMatches("/**/*.html", "/bar/foo.html");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/**/*.html", "bar/zoo/foo.html");
    assertMatches("/**/*.html", "/bar/zoo/foo.html");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/*.html", "foo.html");
    assertMatches("/*.html", "/foo.html");
    assertMatches("/foo/bar/**", "/foo/bar");
    // leading / only matches when path starts with / too
    assertDoesntMatch("/foo/bar/**", "foo/bar");
    // /foo/barbar should not match /foo/bar/**
    assertDoesntMatch("/foo/bar/**", "/foo/barbar");
    assertMatches("/foo/bar/**", "/foo/bar/zet");
}
