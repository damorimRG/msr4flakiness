@Test
public void testNonTightHtmlTagIntolerantCheck() throws Exception {
    final DefaultConfiguration checkConfig = createModuleConfig(NonTightHtmlTagIntolerantCheck.class);
    checkConfig.addAttribute("violateExecutionOnNonTightHtml", "true");
    final String[] expected = { "6: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"), "13: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"), "16: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"), "21: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"), "27: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"), "34: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"), "54: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "li"), "71: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p"), "80: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "tr"), "124: " + getCheckMessage(MSG_UNCLOSED_HTML_TAG, "p") };
    verify(checkConfig, getPath("InputAbstractJavadocNonTightHtmlTags.java"), expected);
}
