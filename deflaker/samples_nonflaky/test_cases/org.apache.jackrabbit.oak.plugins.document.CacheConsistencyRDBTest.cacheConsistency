@Test
public void cacheConsistency() throws Exception {
    mk.commit("/", "+\"node\":{}", null, null);
    // add a child node. this will require an update
    // of _lastRev on /node
    mk.commit("/node", "+\"child\":{}", null, null);
    // make sure the document is not cached
    store.invalidateNodeDocument(Utils.getIdFromPath("/node"));
    Thread t = new Thread(new Runnable() {

        @Override
        public void run() {
            store.query(NODES, Utils.getKeyLowerLimit(Path.ROOT), Utils.getKeyUpperLimit(Path.ROOT), 10);
        }
    }, "query");
    // block thread when it tries to convert db objects
    store.semaphores.put(t, new Semaphore(0));
    t.start();
    while (!store.semaphores.get(t).hasQueuedThreads()) {
        Thread.sleep(10);
    }
    final Semaphore done = new Semaphore(0);
    new Thread(new Runnable() {

        @Override
        public void run() {
            // trigger write back of _lastRevs
            mk.runBackgroundOperations();
            done.release();
        }
    }, "mkbg").start();
    // wait at most one second for background thread
    done.tryAcquire(1, TimeUnit.SECONDS);
    store.invalidateNodeDocument(Utils.getIdFromPath("/node"));
    // release thread
    store.semaphores.get(t).release();
    t.join();
    NodeState root = mk.getNodeStore().getRoot();
    assertTrue(root.getChildNode("node").getChildNode("child").exists());
}
