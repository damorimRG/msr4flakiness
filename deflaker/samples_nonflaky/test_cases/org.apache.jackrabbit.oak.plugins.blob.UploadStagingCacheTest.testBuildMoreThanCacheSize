/**
 * Test build on start with more files available in terms of total size in the upload cache.
 * @throws Exception
 */
@Test
public void testBuildMoreThanCacheSize() throws Exception {
    closer.close();
    // create load greater than the cache size upgrades or cache size changes
    File f1 = copyToFile(randomStream(1, 4 * 1024), DataStoreCacheUtils.getFile(ID_PREFIX + "1", new File(root, "upload")));
    File f2 = copyToFile(randomStream(2, 4 * 1024), DataStoreCacheUtils.getFile(ID_PREFIX + "2", new File(root, "upload")));
    File f3 = copyToFile(randomStream(3, 4 * 1024), DataStoreCacheUtils.getFile(ID_PREFIX + "3", new File(root, "upload")));
    // Directly add files to staging dir simulating an upgrade scenario
    // Start staging cache
    init(3);
    List<ListenableFuture<Integer>> futures = put(folder);
    // Not staged as already full
    assertTrue(futures.isEmpty());
    taskLatch.countDown();
    callbackLatch.countDown();
    afterExecuteLatch.await();
    waitFinish(futures);
    assertNull(stagingCache.getIfPresent(ID_PREFIX + 1));
    assertNull(stagingCache.getIfPresent(ID_PREFIX + 2));
    assertNull(stagingCache.getIfPresent(ID_PREFIX + 3));
    // Initial files should have been uploaded
    assertTrue(Files.equal(copyToFile(randomStream(1, 4 * 1024), folder.newFile()), uploader.read(ID_PREFIX + 1)));
    assertTrue(Files.equal(copyToFile(randomStream(2, 4 * 1024), folder.newFile()), uploader.read(ID_PREFIX + 2)));
    assertTrue(Files.equal(copyToFile(randomStream(3, 4 * 1024), folder.newFile()), uploader.read(ID_PREFIX + 3)));
    assertCacheStats(stagingCache, 0, 0, 3, 4);
}
