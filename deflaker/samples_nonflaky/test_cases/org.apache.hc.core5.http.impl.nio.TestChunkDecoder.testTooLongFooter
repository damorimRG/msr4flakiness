@Test
public void testTooLongFooter() throws Exception {
    final String s = "10\r\n1234567890123456\r\n" + "0\r\nFooter1: looooooooooooooooooooooooooooooooooooooooooooooooooooooog\r\n\r\n";
    // final String s = "10\r\n1234567890123456\r\n" +
    // "0\r\nFooter1: looooooooooooooooooooooooooooooooooooooooog\r\n   \r\n  fghij\r\n\r\n";
    final ReadableByteChannel channel1 = new ReadableByteChannelMock(new String[] { s }, StandardCharsets.US_ASCII);
    final SessionInputBuffer inbuf1 = new SessionInputBufferImpl(1024, 256, 0);
    final BasicHttpTransportMetrics metrics1 = new BasicHttpTransportMetrics();
    final ChunkDecoder decoder1 = new ChunkDecoder(channel1, inbuf1, metrics1);
    final ByteBuffer dst = ByteBuffer.allocate(1024);
    final int bytesRead = decoder1.read(dst);
    Assert.assertEquals(16, bytesRead);
    Assert.assertEquals("1234567890123456", CodecTestUtils.convert(dst));
    final List<? extends Header> trailers = decoder1.getTrailers();
    Assert.assertNotNull(trailers);
    Assert.assertEquals(1, trailers.size());
    final ReadableByteChannel channel2 = new ReadableByteChannelMock(new String[] { s }, StandardCharsets.US_ASCII);
    final SessionInputBuffer inbuf2 = new SessionInputBufferImpl(1024, 256, 25, StandardCharsets.US_ASCII);
    final BasicHttpTransportMetrics metrics2 = new BasicHttpTransportMetrics();
    final ChunkDecoder decoder2 = new ChunkDecoder(channel2, inbuf2, metrics2);
    dst.clear();
    try {
        decoder2.read(dst);
        Assert.fail("MessageConstraintException expected");
    } catch (final MessageConstraintException ex) {
    }
}
