// OAK-1782
@Test
public void diffOnce() throws Exception {
    final AtomicInteger numQueries = new AtomicInteger();
    MemoryDocumentStore store = new MemoryDocumentStore() {

        @NotNull
        @Override
        public <T extends Document> List<T> query(Collection<T> collection, String fromKey, String toKey, String indexedProperty, long startValue, int limit) {
            numQueries.getAndIncrement();
            return super.query(collection, fromKey, toKey, indexedProperty, startValue, limit);
        }
    };
    final DocumentMK mk = builderProvider.newBuilder().setDocumentStore(store).open();
    final DocumentNodeStore ns = mk.getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    // make sure we have enough children to trigger diffManyChildren
    for (int i = 0; i < DocumentMK.MANY_CHILDREN_THRESHOLD * 2; i++) {
        builder.child("node-" + i);
    }
    merge(ns, builder);
    final RevisionVector head = ns.getHeadRevision();
    Revision localHead = head.getRevision(ns.getClusterId());
    assertNotNull(localHead);
    final RevisionVector to = new RevisionVector(new Revision(localHead.getTimestamp() + 1000, 0, localHead.getClusterId()));
    int numReaders = 10;
    final CountDownLatch ready = new CountDownLatch(numReaders);
    final CountDownLatch go = new CountDownLatch(1);
    List<Thread> readers = Lists.newArrayList();
    for (int i = 0; i < numReaders; i++) {
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    ready.countDown();
                    go.await();
                    mk.diff(head.toString(), to.toString(), "/", 0);
                } catch (InterruptedException e) {
                // ignore
                }
            }
        });
        readers.add(t);
        t.start();
    }
    ready.await();
    numQueries.set(0);
    go.countDown();
    for (Thread t : readers) {
        t.join();
    }
    // must not perform more than two queries
    // 1) query the first 50 children to find out there are many
    // 2) query for the changed children between the two revisions
    assertTrue(numQueries.get() <= 2);
}
