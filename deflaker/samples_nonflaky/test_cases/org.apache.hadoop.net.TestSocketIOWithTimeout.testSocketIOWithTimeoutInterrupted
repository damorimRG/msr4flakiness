@Test
public void testSocketIOWithTimeoutInterrupted() throws Exception {
    Pipe pipe = Pipe.open();
    final int timeout = TIMEOUT * 10;
    try (Pipe.SourceChannel source = pipe.source();
        InputStream in = new SocketInputStream(source, timeout)) {
        TestingThread thread = new TestingThread(ctx) {

            @Override
            public void doWork() throws Exception {
                try {
                    in.read();
                    fail("Did not fail with interrupt");
                } catch (InterruptedIOException ste) {
                    String detail = ste.getMessage();
                    String totalString = "Total timeout mills is " + timeout;
                    String leftString = "millis timeout left";
                    assertTrue(detail.contains(totalString));
                    assertTrue(detail.contains(leftString));
                }
            }
        };
        ctx.addThread(thread);
        ctx.startThreads();
        // If the thread is interrupted before it calls read()
        // then it throws ClosedByInterruptException due to
        // some Java quirk. Waiting for it to call read()
        // gets it into select(), so we get the expected
        // InterruptedIOException.
        Thread.sleep(1000);
        thread.interrupt();
        ctx.stop();
    }
}
