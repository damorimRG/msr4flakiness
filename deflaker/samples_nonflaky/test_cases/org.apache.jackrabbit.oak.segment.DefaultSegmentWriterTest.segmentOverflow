// See OAK-2049
@Test
public void segmentOverflow() throws Exception {
    for (int n = 1; n < 255; n++) {
        // 255 = ListRecord.LEVEL_SIZE
        DefaultSegmentWriter writer = defaultSegmentWriterBuilder("test").build(store.fileStore());
        // writer.length == 32  (from the root node)
        // adding 15 strings with 16516 bytes each
        for (int k = 0; k < 15; k++) {
            // 16516 = (Segment.MEDIUM_LIMIT - 1 + 2 + 3)
            // 1 byte per char, 2 byte to store the length and 3 bytes for the
            // alignment to the integer boundary
            writer.writeString(Strings.repeat("abcdefghijklmno".substring(k, k + 1), SegmentTestConstants.MEDIUM_LIMIT - 1));
        }
        // adding 14280 bytes. 1 byte per char, and 2 bytes to store the length
        RecordId x = writer.writeString(Strings.repeat("x", 14278));
        // writer.length == 262052
        // Adding 765 bytes (255 recordIds)
        // This should cause the current segment to flush
        List<RecordId> list = Collections.nCopies(n, x);
        writer.writeList(list);
        writer.flush();
    }
}
