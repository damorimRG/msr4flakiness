@Test
public void testExplainStatement() throws Exception {
    final String left = "SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest')";
    final String right = "SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest')";
    final String order = "ORDER BY [jcr:path]";
    final String union = String.format("%s UNION %s %s", left, right, order);
    final String explainUnion = "explain " + union;
    Result explainResult = executeQuery(explainUnion, QueryEngineImpl.SQL2, QueryEngine.NO_BINDINGS);
    int explainCount = 0;
    ResultRow explainRow = null;
    for (ResultRow row : explainResult.getRows()) {
        if (explainCount == 0) {
            explainRow = row;
        }
        explainCount = explainCount + 1;
    }
    assertEquals("should exist 1 result", 1, explainCount);
    assertNotNull("explain row should not be null", explainRow);
    assertTrue("result should have 'plan' column", Arrays.asList(explainResult.getColumnNames()).contains("plan"));
    assertTrue("result should have 'statement' column", Arrays.asList(explainResult.getColumnNames()).contains("statement"));
    final String explainedStatement = explainRow.getValue("statement").getValue(Type.STRING);
    assertTrue("'statement' should begin with 'select': " + explainedStatement, explainedStatement.startsWith("SELECT"));
    assertTrue("'statement' should contain ' UNION ': " + explainedStatement, explainedStatement.contains(" UNION "));
    final int limit = 3;
    final int offset = 2;
    String[] expected = { "/UnionQueryTest/a/b/c", "/UnionQueryTest/a/b/c/d", "/UnionQueryTest/a/b/c/d/e" };
    Result result = qe.executeQuery(explainedStatement, QueryEngineImpl.SQL2, limit, offset, QueryEngine.NO_BINDINGS, QueryEngine.NO_MAPPINGS);
    List<ResultRow> rows = Lists.newArrayList(result.getRows());
    assertEquals(expected.length, rows.size());
    int i = 0;
    for (ResultRow rr : result.getRows()) {
        assertEquals(rr.getPath(), expected[i++]);
    }
}
