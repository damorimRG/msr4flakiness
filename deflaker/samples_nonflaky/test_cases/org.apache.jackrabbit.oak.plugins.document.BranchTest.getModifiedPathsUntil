@Test
public void getModifiedPathsUntil() {
    UnmergedBranches branches = new UnmergedBranches();
    RevisionVector base = new RevisionVector(Revision.newRevision(1));
    Revision c1 = Revision.newRevision(1).asBranchRevision();
    Branch b = branches.create(base, c1, null);
    BranchCommit bc1 = b.getCommit(c1);
    bc1.track(Path.fromString("/foo"));
    Revision c2 = Revision.newRevision(1).asBranchRevision();
    b.addCommit(c2);
    BranchCommit bc2 = b.getCommit(c2);
    bc2.track(Path.fromString("/bar"));
    Revision c3 = Revision.newRevision(1).asBranchRevision();
    b.rebase(c3, new RevisionVector(Revision.newRevision(1)));
    Revision c4 = Revision.newRevision(1).asBranchRevision();
    b.addCommit(c4);
    BranchCommit bc4 = b.getCommit(c4);
    bc4.track(Path.fromString("/baz"));
    Revision c5 = Revision.newRevision(1).asBranchRevision();
    try {
        b.getModifiedPathsUntil(Revision.newRevision(1));
        fail("Must fail with IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    // expected
    }
    assertModifiedPaths(b.getModifiedPathsUntil(c1), "/foo");
    assertModifiedPaths(b.getModifiedPathsUntil(c2), "/foo", "/bar");
    assertModifiedPaths(b.getModifiedPathsUntil(c3), "/foo", "/bar");
    assertModifiedPaths(b.getModifiedPathsUntil(c4), "/foo", "/bar", "/baz");
    assertModifiedPaths(b.getModifiedPathsUntil(c5));
}
