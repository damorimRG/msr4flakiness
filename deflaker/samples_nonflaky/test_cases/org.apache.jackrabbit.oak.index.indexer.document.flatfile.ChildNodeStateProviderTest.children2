@Test
public void children2() {
    Set<String> preferred = ImmutableSet.of("b");
    CountingIterable<NodeStateEntry> citr = createList(preferred, asList("/a", "/a/b", "/a/b/c", "/a/b/c/d", "/e", "/e/f", "/g", "/h"));
    ChildNodeStateProvider p = new ChildNodeStateProvider(citr, "/a", preferred);
    assertEquals(singletonList("b"), copyOf(childNames(p.children())));
    assertEquals(5, citr.getCount());
    citr.reset();
    p = new ChildNodeStateProvider(citr, "/a/b", preferred);
    assertEquals(singletonList("c"), copyOf(childNames(p.children())));
    assertEquals(5, citr.getCount());
    p = new ChildNodeStateProvider(citr, "/a/b/c", preferred);
    assertEquals(singletonList("d"), copyOf(childNames(p.children())));
    p = new ChildNodeStateProvider(citr, "/a/b/c/d", preferred);
    assertEquals(emptyList(), copyOf(childNames(p.children())));
    p = new ChildNodeStateProvider(citr, "/h", preferred);
    assertEquals(emptyList(), copyOf(childNames(p.children())));
}
