// OAK-1970
@Test
public void diffMany() throws Exception {
    // make sure diffMany is used and not the new
    // journal diff introduced with OAK-4528
    System.setProperty("oak.disableJournalDiff", "true");
    Clock clock = new Clock.Virtual();
    clock.waitUntil(System.currentTimeMillis());
    Revision.setClock(clock);
    final List<Long> startValues = Lists.newArrayList();
    MemoryDocumentStore ds = new MemoryDocumentStore() {

        @NotNull
        @Override
        public <T extends Document> List<T> query(Collection<T> collection, String fromKey, String toKey, String indexedProperty, long startValue, int limit) {
            if (indexedProperty != null) {
                startValues.add(startValue);
            }
            return super.query(collection, fromKey, toKey, indexedProperty, startValue, limit);
        }
    };
    DocumentNodeStore ns = builderProvider.newBuilder().clock(clock).setLeaseCheckMode(LeaseCheckMode.LENIENT).setDocumentStore(ds).setAsyncDelay(0).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    NodeBuilder test = builder.child("test");
    for (int i = 0; i < DocumentMK.MANY_CHILDREN_THRESHOLD * 2; i++) {
        test.child("node-" + i);
    }
    merge(ns, builder);
    // 'wait one hour'
    clock.waitUntil(clock.getTime() + TimeUnit.HOURS.toMillis(1));
    // perform a change and use the resulting root as before state
    builder = ns.getRoot().builder();
    builder.child("foo");
    DocumentNodeState before = asDocumentNodeState(merge(ns, builder));
    NodeState beforeTest = before.getChildNode("test");
    // perform another change to span the diff across multiple revisions
    // this will prevent diff calls served from the local cache
    builder = ns.getRoot().builder();
    builder.child("bar");
    merge(ns, builder);
    // add a child node
    builder = ns.getRoot().builder();
    builder.child("test").child("bar");
    NodeState after = merge(ns, builder);
    NodeState afterTest = after.getChildNode("test");
    startValues.clear();
    // make sure diff is not served from node children cache entries
    ns.invalidateNodeChildrenCache();
    afterTest.compareAgainstBaseState(beforeTest, new DefaultNodeStateDiff());
    assertEquals(1, startValues.size());
    Revision localHead = before.getRootRevision().getRevision(ns.getClusterId());
    assertNotNull(localHead);
    long beforeModified = getModifiedInSecs(localHead.getTimestamp());
    // startValue must be based on the revision of the before state
    // and not when '/test' was last modified
    assertEquals(beforeModified, (long) startValues.get(0));
    System.clearProperty("oak.disableJournalDiff");
}
