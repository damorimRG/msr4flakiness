@Test
public void queryOptions() throws ParseException {
    verify("(/jcr:root/a//* | /jcr:root/b//*) order by @jcr:score", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/a') " + "/* xpath: /jcr:root/a//* \n" + "order by @jcr:score */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/b') " + "/* xpath: /jcr:root/b//* " + "order by @jcr:score */ " + "order by [jcr:score]");
    verify("(/jcr:root/a//* | /jcr:root/b//* | /jcr:root/c//*) order by @jcr:score", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/a') " + "/* xpath: /jcr:root/a//* \n" + "order by @jcr:score */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/b') " + "/* xpath: /jcr:root/b//* \n" + "order by @jcr:score */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where isdescendantnode(a, '/c') " + "/* xpath: /jcr:root/c//* " + "order by @jcr:score */ " + "order by [jcr:score]");
    verify("//(element(*, nt:address))", "select [jcr:path], [jcr:score], * " + "from [nt:address] as a " + "/* xpath: //element(*, nt:address) */");
    verify("//(element(*, nt:address) | element(*, nt:folder))", "select [jcr:path], [jcr:score], * " + "from [nt:address] as a " + "/* xpath: //element(*, nt:address) */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:folder] as a " + "/* xpath: // element(*, nt:folder) */");
    verify("(//element(*, nt:address) | //element(*, nt:folder))", "select [jcr:path], [jcr:score], * " + "from [nt:address] as a " + "/* xpath: //element(*, nt:address) */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:folder] as a " + "/* xpath: //element(*, nt:folder) */");
    verify("/jcr:root/content//*[@a] order by @c option(traversal fail)", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/content') " + "order by [c] option(traversal FAIL) " + "/* xpath: /jcr:root/content//*[@a] " + "order by @c " + "option(traversal fail) */");
    verify("//*[@a or @b] order by @c option(traversal warn)", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [b] is not null " + "order by [c] option(traversal WARN) " + "/* xpath: //*[@a or @b] " + "order by @c " + "option(traversal warn) */");
    verify("/jcr:root/(content|libs)//*[@a] order by @c option(traversal ok)", "select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/content') " + "/* xpath: /jcr:root/content//*[@a] " + "order by @c option(traversal ok) */ " + "union select [jcr:path], [jcr:score], * " + "from [nt:base] as a " + "where [a] is not null " + "and isdescendantnode(a, '/libs') " + "/* xpath: /jcr:root/libs//*[@a] " + "order by @c option(traversal ok) */ " + "order by [c] " + "option(traversal OK)");
}
