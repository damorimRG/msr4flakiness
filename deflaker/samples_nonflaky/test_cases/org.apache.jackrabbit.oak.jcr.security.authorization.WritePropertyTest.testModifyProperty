@Test
public void testModifyProperty() throws Exception {
    // grant 'testUser' ALTER_PROPERTIES privileges at 'path'
    Privilege[] privileges = privilegesFromNames(new String[] { "rep:alterProperties" });
    allow(path, privileges);
    /*
         testuser must now have
         - MODIFY_PROPERTY_PROPERTIES permission
         - no other write permission
        */
    assertHasPrivilege(path, Privilege.JCR_MODIFY_PROPERTIES, false);
    assertHasPrivilege(path, "rep:addProperties", false);
    assertHasPrivilege(path, "rep:removeProperties", false);
    assertHasPrivilege(path, "rep:alterProperties", true);
    // set_property action for non-existing property is translated to
    // "add_properties" permission
    String propertyPath = path + "/newProperty";
    assertFalse(testSession.hasPermission(propertyPath, Session.ACTION_SET_PROPERTY));
    // creating a new property must fail
    Node testN = testSession.getNode(path);
    try {
        testN.setProperty("newProperty", "value");
        testSession.save();
        fail();
    } catch (AccessDeniedException e) {
        // success
        testSession.refresh(false);
    }
    superuser.getNode(path).setProperty("newProperty", "value");
    superuser.save();
    testSession.refresh(false);
    // property exists -> 'set_property' actions is granted, 'remove' is denied
    assertTrue(testSession.hasPermission(propertyPath, Session.ACTION_SET_PROPERTY));
    assertFalse(testSession.hasPermission(propertyPath, Session.ACTION_REMOVE));
    // modifying the new property must succeed
    testN.setProperty("newProperty", "modified");
    testSession.save();
    testN.getProperty("newProperty").setValue("modified2");
    testSession.save();
    // removing the property must fail
    try {
        testN.setProperty("newProperty", (String) null);
        testSession.save();
        fail();
    } catch (AccessDeniedException e) {
        // success
        testSession.refresh(false);
    }
    try {
        testN.getProperty("newProperty").remove();
        testSession.save();
        fail();
    } catch (AccessDeniedException e) {
        // success
        testSession.refresh(false);
    }
}
