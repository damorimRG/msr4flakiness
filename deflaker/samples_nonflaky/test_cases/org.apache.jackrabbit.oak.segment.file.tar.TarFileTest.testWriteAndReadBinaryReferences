@Test
public void testWriteAndReadBinaryReferences() throws Exception {
    try (TarWriter writer = new TarWriter(archiveManager, "data00000a.tar")) {
        writer.writeEntry(0x00, 0x00, new byte[] { 0x01, 0x02, 0x3 }, 0, 3, generation(0));
        writer.addBinaryReference(generation(1), new UUID(1, 0), "r0");
        writer.addBinaryReference(generation(1), new UUID(1, 1), "r1");
        writer.addBinaryReference(generation(1), new UUID(1, 2), "r2");
        writer.addBinaryReference(generation(1), new UUID(1, 3), "r3");
        writer.addBinaryReference(generation(2), new UUID(2, 0), "r4");
        writer.addBinaryReference(generation(2), new UUID(2, 1), "r5");
        writer.addBinaryReference(generation(2), new UUID(2, 2), "r6");
        writer.addBinaryReference(generation(3), new UUID(3, 0), "r7");
        writer.addBinaryReference(generation(3), new UUID(3, 1), "r8");
    }
    Map<UUID, Set<String>> one = newHashMap();
    one.put(new UUID(1, 0), newSet("r0"));
    one.put(new UUID(1, 1), newSet("r1"));
    one.put(new UUID(1, 2), newSet("r2"));
    one.put(new UUID(1, 3), newSet("r3"));
    Map<UUID, Set<String>> two = newHashMap();
    two.put(new UUID(2, 0), newSet("r4"));
    two.put(new UUID(2, 1), newSet("r5"));
    two.put(new UUID(2, 2), newSet("r6"));
    Map<UUID, Set<String>> three = newHashMap();
    three.put(new UUID(3, 0), newSet("r7"));
    three.put(new UUID(3, 1), newSet("r8"));
    Map<GCGeneration, Map<UUID, Set<String>>> expected = newHashMap();
    expected.put(generation(1), one);
    expected.put(generation(2), two);
    expected.put(generation(3), three);
    try (TarReader reader = TarReader.open("data00000a.tar", archiveManager)) {
        Map<GCGeneration, Map<UUID, Set<String>>> actual = new HashMap<>();
        reader.getBinaryReferences().forEach((generation, full, compacted, id, reference) -> {
            actual.computeIfAbsent(newGCGeneration(generation, full, compacted), x -> new HashMap<>()).computeIfAbsent(id, x -> new HashSet<>()).add(reference);
        });
        assertEquals(expected, actual);
    }
}
