@Test(timeout = 10000)
public void testMultiThreadedDecompressorPool() throws InterruptedException {
    final int iterations = 4;
    ExecutorService threadpool = Executors.newFixedThreadPool(3);
    final LinkedBlockingDeque<Decompressor> queue = new LinkedBlockingDeque<Decompressor>(2 * iterations);
    Callable<Boolean> consumer = new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            Decompressor dc = queue.take();
            CodecPool.returnDecompressor(dc);
            return dc != null;
        }
    };
    Callable<Boolean> producer = new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            Decompressor c = CodecPool.getDecompressor(codec);
            queue.put(c);
            return c != null;
        }
    };
    for (int i = 0; i < iterations; i++) {
        threadpool.submit(consumer);
        threadpool.submit(producer);
    }
    // wait for completion
    threadpool.shutdown();
    threadpool.awaitTermination(1000, TimeUnit.SECONDS);
    assertEquals(LEASE_COUNT_ERR, 0, CodecPool.getLeasedDecompressorsCount(codec));
}
