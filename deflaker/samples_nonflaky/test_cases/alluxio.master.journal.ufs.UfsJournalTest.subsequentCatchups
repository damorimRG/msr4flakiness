@Test
public void subsequentCatchups() throws Exception {
    mJournal.start();
    mJournal.gainPrimacy();
    // Create a counting master implementation that counts how many journal entries it processed.
    CountingNoopMaster countingMaster = new CountingNoopMaster();
    // Find journal base path for secondary journal to consume the same journal files.
    String parentPath = new File(mJournal.getLocation().getPath()).getParent();
    UfsJournal secondaryJournal = new UfsJournal(new URI(parentPath), countingMaster, 0, Collections::emptySet);
    secondaryJournal.start();
    // Suspend secondary journal.
    secondaryJournal.suspend();
    // Write 2 batches of entries.
    int entryBatchCount = 5;
    for (int i = 0; i < 2 * entryBatchCount; i++) {
        mJournal.write(Journal.JournalEntry.getDefaultInstance());
    }
    mJournal.flush();
    // Validate secondary didn't apply any entries yet.
    Assert.assertEquals(0, countingMaster.getApplyCount());
    // Catch up follower journal system to first batch of entries.
    secondaryJournal.catchup(entryBatchCount - 1).waitTermination();
    Assert.assertEquals(entryBatchCount, countingMaster.getApplyCount());
    // Catch up follower journal system to second batch of entries.
    secondaryJournal.catchup((2 * entryBatchCount) - 1).waitTermination();
    Assert.assertEquals(2 * entryBatchCount, countingMaster.getApplyCount());
}
