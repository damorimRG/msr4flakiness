@Test
public void testNonConcurrentLockUnlock() {
    HLock lock = lm.createLock("/testNonConcurrentLockUnlock");
    lm.acquire(lock);
    assertTrue(lock.isAcquired());
    // should time out.  Part of timing out is cleanup, we want to be sure we can immediately acquire a lock on the same path after timing out
    try {
        HLock lock2 = lm.createLock("/testNonConcurrentLockUnlock");
        lm.acquire(lock2, 1000);
        fail();
    } catch (HLockTimeoutException e) {
    // ok, this should happen
    }
    lm.release(lock);
    assertFalse(lock.isAcquired());
    // test we can re-acquire it
    HLock nextLock = lm.createLock("/testNonConcurrentLockUnlock");
    lm.acquire(nextLock, 0);
    assertTrue(nextLock.isAcquired());
    lm.release(nextLock);
}
