@Test
public void rangeQueriesWithDate() throws Exception {
    Tree idx = createIndex("test1", of("propa", "propb"));
    Tree propIdx = idx.addChild(PROP_NODE).addChild("propa");
    propIdx.setProperty(FulltextIndexConstants.PROP_TYPE, PropertyType.TYPENAME_DATE);
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    test.addChild("a").setProperty("propa", createCal("14/02/2014"));
    test.addChild("b").setProperty("propa", createCal("14/03/2014"));
    test.addChild("c").setProperty("propa", createCal("14/04/2014"));
    test.addChild("c").setProperty("propb", "foo");
    test.addChild("d").setProperty("propb", "foo");
    root.commit();
    assertQuery("select [jcr:path] from [nt:base] where [propa] >= " + dt("15/02/2014"), asList("/test/b", "/test/c"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] <=" + dt("15/03/2014"), asList("/test/b", "/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] < " + dt("14/03/2014"), asList("/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] > " + dt("15/02/2014") + " and [propa] < " + dt("13/04/2014"), asList("/test/b"));
    assertQuery("select [jcr:path] from [nt:base] where propa is not null", asList("/test/a", "/test/b", "/test/c"));
}
