@Test
public void testMutableRatesWithAggregationManyThreads() throws InterruptedException {
    final MutableRatesWithAggregation rates = new MutableRatesWithAggregation();
    final int n = 10;
    long[] opCount = new long[n];
    double[] opTotalTime = new double[n];
    for (int i = 0; i < n; i++) {
        opCount[i] = 0;
        opTotalTime[i] = 0;
        // Initialize so that the getLongCounter() method doesn't complain
        rates.add("metric" + i, 0);
    }
    Thread[] threads = new Thread[n];
    final CountDownLatch firstAddsFinished = new CountDownLatch(threads.length);
    final CountDownLatch firstSnapshotsFinished = new CountDownLatch(1);
    final CountDownLatch secondAddsFinished = new CountDownLatch(threads.length);
    final CountDownLatch secondSnapshotsFinished = new CountDownLatch(1);
    long seed = new Random().nextLong();
    LOG.info("Random seed = " + seed);
    final Random sleepRandom = new Random(seed);
    for (int tIdx = 0; tIdx < threads.length; tIdx++) {
        final int threadIdx = tIdx;
        threads[threadIdx] = new Thread() {

            @Override
            public void run() {
                try {
                    for (int i = 0; i < 1000; i++) {
                        rates.add("metric" + (i % n), (i / n) % 2 == 0 ? 1 : 2);
                        // Sleep so additions can be interleaved with snapshots
                        Thread.sleep(sleepRandom.nextInt(5));
                    }
                    firstAddsFinished.countDown();
                    // Make sure all threads stay alive long enough for the first
                    // snapshot to complete; else their metrics may be lost to GC
                    firstSnapshotsFinished.await();
                    // Let half the threads continue with more metrics and let half die
                    if (threadIdx % 2 == 0) {
                        for (int i = 0; i < 1000; i++) {
                            rates.add("metric" + (i % n), (i / n) % 2 == 0 ? 1 : 2);
                        }
                        secondAddsFinished.countDown();
                        secondSnapshotsFinished.await();
                    } else {
                        secondAddsFinished.countDown();
                    }
                } catch (InterruptedException e) {
                // Ignore
                }
            }
        };
    }
    for (Thread t : threads) {
        t.start();
    }
    // Snapshot concurrently with additions but aggregate the totals into
    // opCount / opTotalTime
    for (int i = 0; i < 100; i++) {
        snapshotMutableRatesWithAggregation(rates, opCount, opTotalTime);
        Thread.sleep(sleepRandom.nextInt(20));
    }
    firstAddsFinished.await();
    // Final snapshot to grab any remaining metrics and then verify that
    // the totals are as expected
    snapshotMutableRatesWithAggregation(rates, opCount, opTotalTime);
    for (int i = 0; i < n; i++) {
        assertEquals("metric" + i + " count", 1001, opCount[i]);
        assertEquals("metric" + i + " total", 1500, opTotalTime[i], 1.0);
    }
    firstSnapshotsFinished.countDown();
    // After half of the threads die, ensure that the remaining ones still
    // add metrics correctly and that snapshot occurs correctly
    secondAddsFinished.await();
    snapshotMutableRatesWithAggregation(rates, opCount, opTotalTime);
    for (int i = 0; i < n; i++) {
        assertEquals("metric" + i + " count", 1501, opCount[i]);
        assertEquals("metric" + i + " total", 2250, opTotalTime[i], 1.0);
    }
    secondSnapshotsFinished.countDown();
}
