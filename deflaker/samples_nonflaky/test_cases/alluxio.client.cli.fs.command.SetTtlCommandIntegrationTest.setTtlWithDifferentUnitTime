@Test
public void setTtlWithDifferentUnitTime() throws Exception {
    String filePath = "/testFile";
    FileSystemTestUtils.createByteFile(mFileSystem, filePath, WritePType.MUST_CACHE, 1);
    Assert.assertEquals(Constants.NO_TTL, mFileSystem.getStatus(new AlluxioURI("/testFile")).getTtl());
    AlluxioURI uri = new AlluxioURI("/testFile");
    HashMap<String, Long> timeUnits = new HashMap<String, Long>();
    timeUnits.put("", 1L);
    timeUnits.put("ms", 1L);
    timeUnits.put("millisecond", 1L);
    timeUnits.put("s", (long) Constants.SECOND_MS);
    timeUnits.put("sec", (long) Constants.SECOND_MS);
    timeUnits.put("second", (long) Constants.SECOND_MS);
    timeUnits.put("m", (long) Constants.MINUTE_MS);
    timeUnits.put("min", (long) Constants.MINUTE_MS);
    timeUnits.put("minute", (long) Constants.MINUTE_MS);
    timeUnits.put("h", (long) Constants.HOUR_MS);
    timeUnits.put("hour", (long) Constants.HOUR_MS);
    timeUnits.put("d", (long) Constants.DAY_MS);
    timeUnits.put("day", (long) Constants.DAY_MS);
    long numericValue = 100;
    for (Map.Entry<String, Long> entry : timeUnits.entrySet()) {
        String timeUnit = entry.getKey();
        long timeUnitInMilliSeconds = entry.getValue();
        String testValueWithTimeUnit = String.valueOf(numericValue) + timeUnit;
        Assert.assertEquals(0, mFsShell.run("setTtl", filePath, testValueWithTimeUnit));
        URIStatus status = mFileSystem.getStatus(uri);
        Assert.assertEquals(numericValue * timeUnitInMilliSeconds, status.getTtl());
        Assert.assertEquals(TtlAction.DELETE, status.getTtlAction());
    }
}
