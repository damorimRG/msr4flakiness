/**
 * Verify if the ShellActionExecutor indeed setups the basic stuffs
 *
 * @throws Exception
 */
public void testSetupMethods() throws Exception {
    ShellActionExecutor ae = new ShellActionExecutor();
    assertNull(ae.getLauncherClasses());
    Element actionXml = XmlUtils.parseXml("<shell>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<exec>SCRIPT</exec>" + "<argument>a=A</argument>" + "<argument>b=B</argument>" + "</shell>");
    XConfiguration protoConf = new XConfiguration();
    protoConf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    WorkflowJobBean wf = createBaseWorkflow(protoConf, "pig-action");
    WorkflowActionBean action = (WorkflowActionBean) wf.getActions().get(0);
    action.setType(ae.getType());
    Context context = new Context(wf, action);
    Configuration conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    assertEquals("SCRIPT", conf.get("oozie.shell.exec"));
    assertEquals("2", conf.get("oozie.shell.args.size"));
    assertEquals("a=A", conf.get("oozie.shell.args.0"));
    assertEquals("b=B", conf.get("oozie.shell.args.1"));
    assertEquals("Expected HADOOP_CONF_DIR setup switch to be disabled", "false", conf.get("oozie.action.shell.setup.hadoop.conf.dir"));
    assertEquals("Expected log4j.properties write switch to be enabled", "true", conf.get("oozie.action.shell.setup.hadoop.conf.dir.write.log4j.properties"));
    assertNotNull("Expected a default config to exist for log4j.properties", conf.get("oozie.action.shell.setup.hadoop.conf.dir.log4j.content"));
}
