public void testAddToCache() throws Exception {
    JavaActionExecutor ae = new JavaActionExecutor();
    Configuration conf = new XConfiguration();
    Path appPath = new Path(getFsTestCaseDir(), "wf");
    URI appUri = appPath.toUri();
    // test archive without fragment
    Path archivePath = new Path("test.jar");
    Path archiveFullPath = new Path(appPath, archivePath);
    ae.addToCache(conf, appPath, archiveFullPath.toString(), true);
    assertTrue(conf.get("mapred.cache.archives").contains(archiveFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test archive with fragment
    Path archiveFragmentPath = new Path("test.jar#a.jar");
    Path archiveFragmentFullPath = new Path(appPath, archiveFragmentPath);
    conf.clear();
    ae.addToCache(conf, appPath, archiveFragmentFullPath.toString(), true);
    assertTrue(conf.get("mapred.cache.archives").contains(archiveFragmentFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test .so without fragment
    Path appSoPath = new Path("lib/a.so");
    Path appSoFullPath = new Path(appPath, appSoPath);
    conf.clear();
    ae.addToCache(conf, appPath, appSoFullPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(appSoFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test .so with fragment
    Path appSoFragmentPath = new Path("lib/a.so#a.so");
    Path appSoFragmentFullPath = new Path(appPath, appSoFragmentPath);
    conf.clear();
    ae.addToCache(conf, appPath, appSoFragmentFullPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(appSoFragmentFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test .jar without fragment where app path is on same cluster as jar path
    Path appJarPath = new Path("lib/a.jar");
    Path appJarFullPath = new Path(appPath, appJarPath);
    conf = new Configuration();
    conf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    ae.addToCache(conf, appPath, appJarFullPath.toString(), false);
    // assert that mapred.cache.files contains jar URI path (full on Hadoop-2)
    Path jarPath = new Path(appJarFullPath.toUri());
    assertTrue(conf.get("mapred.cache.files").contains(jarPath.toString()));
    // assert that dist cache classpath contains jar URI path
    Path[] paths = DistributedCache.getFileClassPaths(conf);
    boolean pathFound = false;
    for (Path path : paths) {
        if (path.equals(jarPath)) {
            pathFound = true;
            break;
        }
    }
    assertTrue(pathFound);
    assertTrue(DistributedCache.getSymlink(conf));
    // test .jar without fragment where app path is on a different cluster than jar path
    appJarPath = new Path("lib/a.jar");
    appJarFullPath = new Path(appPath, appJarPath);
    Path appDifferentClusterPath = new Path(new URI(appUri.getScheme(), null, appUri.getHost() + "x", appUri.getPort(), appUri.getPath(), appUri.getQuery(), appUri.getFragment()));
    conf.clear();
    conf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    ae.addToCache(conf, appDifferentClusterPath, appJarFullPath.toString(), false);
    // assert that mapred.cache.files contains absolute jar URI
    assertTrue(conf.get("mapred.cache.files").contains(appJarFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test .jar with fragment
    Path appJarFragmentPath = new Path("lib/a.jar#a.jar");
    Path appJarFragmentFullPath = new Path(appPath, appJarFragmentPath);
    conf.clear();
    conf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    ae.addToCache(conf, appPath, appJarFragmentFullPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(appJarFragmentFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test regular file without fragment
    Path appFilePath = new Path("lib/a.txt");
    Path appFileFullPath = new Path(appPath, appFilePath);
    conf.clear();
    ae.addToCache(conf, appPath, appFileFullPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(appFileFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test regular file with fragment
    Path appFileFragmentPath = new Path("lib/a.txt#a.txt");
    Path appFileFragmentFullPath = new Path(appPath, appFileFragmentPath);
    conf.clear();
    ae.addToCache(conf, appPath, appFileFragmentFullPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(appFileFragmentFullPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test path starting with "/" for archive
    Path testPath = new Path("/tmp/testpath/a.jar#a.jar");
    conf.clear();
    ae.addToCache(conf, appPath, testPath.toString(), true);
    assertTrue(conf.get("mapred.cache.archives").contains(testPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test path starting with "/" for cache.file
    conf.clear();
    ae.addToCache(conf, appPath, testPath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(testPath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test absolute path for archive
    Path testAbsolutePath = new Path("hftp://namenode.test.com:8020/tmp/testpath/a.jar#a.jar");
    conf.clear();
    ae.addToCache(conf, appPath, testAbsolutePath.toString(), true);
    assertTrue(conf.get("mapred.cache.archives").contains(testAbsolutePath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test absolute path for cache files
    conf.clear();
    ae.addToCache(conf, appPath, testAbsolutePath.toString(), false);
    assertTrue(conf.get("mapred.cache.files").contains(testAbsolutePath.toString()));
    assertTrue(DistributedCache.getSymlink(conf));
    // test relative path for archive
    conf.clear();
    ae.addToCache(conf, appPath, "lib/a.jar#a.jar", true);
    assertTrue(conf.get("mapred.cache.archives").contains(appUri.getPath() + "/lib/a.jar#a.jar"));
    assertTrue(DistributedCache.getSymlink(conf));
    // test relative path for cache files
    conf.clear();
    ae.addToCache(conf, appPath, "lib/a.jar#a.jar", false);
    assertTrue(conf.get("mapred.cache.files").contains(appUri.getPath() + "/lib/a.jar#a.jar"));
    assertTrue(DistributedCache.getSymlink(conf));
}
