/**
 * Test the case where async indexer state changes i.e. lastIndexedTo changes
 * however nothing new got indexed in property index. In such a case
 * after the second run there should be no previous bucket
 */
@Test
public void twoBucket_IndexedToTimeChange() throws Exception {
    builder.child("2").child("foo");
    builder.child("1");
    builder.setProperty(PROP_HEAD_BUCKET, "2");
    builder.setProperty(PROP_PREVIOUS_BUCKET, "1");
    NodeState state0 = builder.getNodeState();
    assertTrue(bs.switchBucket(100));
    assertEquals("3", builder.getString(PROP_HEAD_BUCKET));
    assertEquals("2", builder.getString(PROP_PREVIOUS_BUCKET));
    assertThat(copyOf(bs.getOldBuckets()), containsInAnyOrder("1"));
    NodeState state1 = builder.getNodeState();
    assertTrue(bs.switchBucket(150));
    // This time previous bucket should be discarded
    assertEquals("3", builder.getString(PROP_HEAD_BUCKET));
    assertNull(builder.getString(PROP_PREVIOUS_BUCKET));
    assertThat(copyOf(bs.getOldBuckets()), containsInAnyOrder("1", "2"));
    NodeState state2 = builder.getNodeState();
    assertTrue(bs.switchBucket(200));
    assertEquals("3", builder.getString(PROP_HEAD_BUCKET));
    assertNull(builder.getString(PROP_PREVIOUS_BUCKET));
    assertThat(copyOf(bs.getOldBuckets()), containsInAnyOrder("1", "2"));
    // assert no change done after previous is removed
    // not even change of asyncIndexedTo
    NodeState state3 = builder.getNodeState();
    assertTrue(EqualsDiff.equals(state2, state3));
}
