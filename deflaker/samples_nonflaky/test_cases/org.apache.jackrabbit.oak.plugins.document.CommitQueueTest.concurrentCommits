@Test
public void concurrentCommits() throws Exception {
    final DocumentNodeStore store = builderProvider.newBuilder().getNodeStore();
    AtomicBoolean running = new AtomicBoolean(true);
    Closeable observer = store.addObserver(new Observer() {

        private RevisionVector before = new RevisionVector(new Revision(0, 0, store.getClusterId()));

        @Override
        public void contentChanged(@NotNull NodeState root, @Nullable CommitInfo info) {
            DocumentNodeState after = (DocumentNodeState) root;
            RevisionVector r = after.getRootRevision();
            LOG.debug("seen: {}", r);
            if (r.compareTo(before) < 0) {
                exceptions.add(new Exception("Inconsistent revision sequence. Before: " + before + ", after: " + r));
            }
            before = r;
        }
    });
    // perform commits with multiple threads
    List<Thread> writers = new ArrayList<Thread>();
    for (int i = 0; i < NUM_WRITERS; i++) {
        final Random random = new Random(i);
        writers.add(new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    for (int i = 0; i < COMMITS_PER_WRITER; i++) {
                        Commit commit = store.newCommit(nop -> {
                        }, null, null);
                        try {
                            Thread.sleep(0, random.nextInt(1000));
                        } catch (InterruptedException e) {
                        // ignore
                        }
                        if (random.nextInt(5) == 0) {
                            // cancel 20% of the commits
                            store.canceled(commit);
                        } else {
                            boolean isBranch = random.nextInt(5) == 0;
                            store.done(commit, isBranch, CommitInfo.EMPTY);
                        }
                    }
                } catch (Exception e) {
                    exceptions.add(e);
                }
            }
        }));
    }
    for (Thread t : writers) {
        t.start();
    }
    for (Thread t : writers) {
        t.join();
    }
    running.set(false);
    observer.close();
    store.dispose();
    assertNoExceptions();
}
