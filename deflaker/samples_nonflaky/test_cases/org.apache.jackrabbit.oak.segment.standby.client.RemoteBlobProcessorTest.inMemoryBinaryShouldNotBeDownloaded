/**
 * The test relies on a particular interaction between the BlobStore and the
 * FileStore.
 *
 * <ul>
 * <li>The FileStore passes every binary whose length is grater than or
 * equal to MEDIUM_LIMIT bytes to the BlobStore.</li>
 *
 * <li>The BlobStore creates in-memory IDs (where the binary content is
 * embedded in the ID itself) if the binary's length is smaller than or
 * equal to minRecordLength bytes.</li>
 *
 * <li>It follows that if minRecordLength is set to at least MEDIUM_LIMIT,
 * the FileStore will delegate the handling of the binary to the BlobStore,
 * which will create an in-memory ID embedding the content of the
 * binary.</li>
 * </ul>
 *
 * <p>
 * With this configuration in place, a binary long exactly MEDIUM_LIMIT
 * bytes will be passed from the File Store to the Blob Store, which will
 * create an in-memory ID. The File Store will persist the in-memory ID,
 * which contains the binary data itself. This binary should never be
 * downloaded.
 */
@Test
public void inMemoryBinaryShouldNotBeDownloaded() throws Exception {
    SegmentNodeStore store = SegmentNodeStoreBuilders.builder(fileStore.fileStore()).build();
    NodeBuilder root = store.getRoot().builder();
    root.setProperty("b", root.createBlob(new NullInputStream(SegmentTestConstants.MEDIUM_LIMIT)));
    store.merge(root, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    RemoteBlobProcessor processor = new RemoteBlobProcessor(blobStore.blobStore(), blobId -> {
        Assert.fail("In-memory binaries should not be downloaded");
        return null;
    });
    processor.processBinary(store.getRoot().getProperty("b").getValue(Type.BINARY));
}
