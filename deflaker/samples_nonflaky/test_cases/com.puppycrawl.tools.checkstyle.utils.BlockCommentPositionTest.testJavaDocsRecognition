@Test
public void testJavaDocsRecognition() throws Exception {
    final List<BlockCommentPositionTestMetadata> metadataList = Arrays.asList(new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnClass.java", BlockCommentPosition::isOnClass, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnMethod.java", BlockCommentPosition::isOnMethod, 6), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnField.java", BlockCommentPosition::isOnField, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnEnum.java", BlockCommentPosition::isOnEnum, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnConstructor.java", BlockCommentPosition::isOnConstructor, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnInterface.java", BlockCommentPosition::isOnInterface, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnAnnotation.java", BlockCommentPosition::isOnAnnotationDef, 3), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnEnumMember.java", BlockCommentPosition::isOnEnumConstant, 2), new BlockCommentPositionTestMetadata("InputBlockCommentPositionOnAnnotationField.java", BlockCommentPosition::isOnAnnotationField, 4), new BlockCommentPositionTestMetadata("inputs/normal/package-info.java", BlockCommentPosition::isOnPackage, 1), new BlockCommentPositionTestMetadata("inputs/annotation/package-info.java", BlockCommentPosition::isOnPackage, 1));
    for (BlockCommentPositionTestMetadata metadata : metadataList) {
        final DetailAST ast = JavaParser.parseFile(new File(getPath(metadata.getFileName())), JavaParser.Options.WITH_COMMENTS);
        final int matches = getJavadocsCount(ast, metadata.getAssertion());
        assertEquals(metadata.getMatchesNum(), matches, "Invalid javadoc count");
    }
}
