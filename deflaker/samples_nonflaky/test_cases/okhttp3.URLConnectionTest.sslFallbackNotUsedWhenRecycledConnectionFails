/**
 * When a pooled connection fails, don't blame the route. Otherwise pooled connection failures can
 * cause unnecessary SSL fallbacks.
 *
 * https://github.com/square/okhttp/issues/515
 */
@Test
public void sslFallbackNotUsedWhenRecycledConnectionFails() throws Exception {
    server.useHttps(handshakeCertificates.sslSocketFactory(), false);
    server.enqueue(new MockResponse().setBody("abc").setSocketPolicy(DISCONNECT_AT_END));
    server.enqueue(new MockResponse().setBody("def"));
    client = client.newBuilder().hostnameVerifier(new RecordingHostnameVerifier()).sslSocketFactory(suppressTlsFallbackClientSocketFactory(), handshakeCertificates.trustManager()).build();
    assertContent("abc", getResponse(newRequest("/")));
    // Give the server time to disconnect.
    Thread.sleep(500);
    assertContent("def", getResponse(newRequest("/")));
    Set<TlsVersion> tlsVersions = EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2, // v1.2 on OpenJDK 8.
    TlsVersion.TLS_1_3);
    RecordedRequest request1 = server.takeRequest();
    assertThat(tlsVersions).contains(request1.getTlsVersion());
    RecordedRequest request2 = server.takeRequest();
    assertThat(tlsVersions).contains(request2.getTlsVersion());
}
