public void testSubWorkflowRerun() throws Exception {
    try {
        String workflowUri = createSubWorkflowWithLazyAction(false);
        LocalOozie.start();
        final OozieClient wfClient = LocalOozie.getClient();
        Properties conf = wfClient.createConfiguration();
        conf.setProperty(OozieClient.APP_PATH, workflowUri);
        conf.setProperty(OozieClient.USER_NAME, getTestUser());
        conf.setProperty("appName", "var-app-name");
        final String jobId = wfClient.submit(conf);
        wfClient.start(jobId);
        waitForWorkflowToStart(wfClient, jobId);
        String subWorkflowExternalId = wfClient.getJobInfo(jobId).getActions().get(1).getExternalId();
        wfClient.kill(wfClient.getJobInfo(jobId).getActions().get(1).getExternalId());
        waitFor(JOB_TIMEOUT, new Predicate() {

            public boolean evaluate() throws Exception {
                return (wfClient.getJobInfo(jobId).getStatus() == WorkflowJob.Status.KILLED) && (wfClient.getJobInfo(jobId).getActions().get(1).getStatus() == WorkflowAction.Status.ERROR);
            }
        });
        conf.setProperty(OozieClient.RERUN_FAIL_NODES, "true");
        wfClient.reRun(jobId, conf);
        waitFor(JOB_TIMEOUT * 2, new Predicate() {

            public boolean evaluate() throws Exception {
                return (wfClient.getJobInfo(jobId).getStatus() == WorkflowJob.Status.SUCCEEDED) && (wfClient.getJobInfo(jobId).getActions().get(2).getStatus() == WorkflowAction.Status.OK);
            }
        });
        WorkflowJob job = wfClient.getJobInfo(wfClient.getJobInfo(jobId).getActions().get(2).getExternalId());
        assertEquals(WorkflowJob.Status.SUCCEEDED, job.getStatus());
        assertEquals(job.getId(), subWorkflowExternalId);
    } finally {
        LocalOozie.stop();
    }
}
