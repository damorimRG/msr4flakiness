/*
     Given 2 index defintions - one with a config error and another ok , the content under second should get indexed
     while the first with error gets ignored with an error message logged.
      */
@Test
public void testConfigErrorInIndexDefintion() throws Exception {
    LogCustomizer customLogs = LogCustomizer.forLogger(IndexUpdate.class.getName()).enable(Level.ERROR).create();
    builder.child("testRoot").setProperty("foo", "abc");
    // Create 2 index def - one with config related error and one without
    NodeBuilder index1 = createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "rootIndex1", true, false, ImmutableSet.of("foo"), null);
    index1.setProperty(PropertyStates.createProperty(PathFilter.PROP_INCLUDED_PATHS, ImmutableSet.of("/test/a/b"), Type.STRINGS));
    index1.setProperty(PropertyStates.createProperty(PathFilter.PROP_EXCLUDED_PATHS, ImmutableSet.of("/test/a"), Type.STRINGS));
    createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "rootIndex2", true, false, ImmutableSet.of("foo2"), null);
    NodeState before = builder.getNodeState();
    // Add some content and process it through the property index hook (for index1)
    builder.child("test").child("a").setProperty("foo", "abc");
    builder.child("test").child("a").child("b").setProperty("foo", "abc");
    // Now for  for index2
    builder.child("test").child("b").setProperty("foo2", "abc");
    builder.child("test").child("a").child("b").setProperty("foo2", "abc");
    NodeState after = builder.getNodeState();
    NodeState indexed;
    try {
        customLogs.starting();
        String expectedLogMessage = "Unable to get Index Editor for index at /oak:index/rootIndex1 . " + "Please correct the index definition and reindex after correction. " + "Additional Info : No valid include provided. Includes [/test/a/b], Excludes [/test/a]";
        indexed = HOOK.processCommit(before, after, CommitInfo.EMPTY);
        Assert.assertThat(customLogs.getLogs(), IsCollectionContaining.hasItems(expectedLogMessage));
    } finally {
        customLogs.finished();
    }
    // Now check that the index content nodes doesn't exists and the reindex flag is still set(Since it got skipped)
    NodeState ns = checkPathExists(indexed, INDEX_DEFINITIONS_NAME, "rootIndex1");
    assertFalse(ns.getChildNode(INDEX_CONTENT_NODE_NAME).exists());
    PropertyState ps = ns.getProperty(REINDEX_PROPERTY_NAME);
    assertNotNull(ps);
    assertTrue(ps.getValue(Type.BOOLEAN));
    // Now check everything is fine with index2 - indexed data node exists and reindex flag is false
    NodeState ns2 = checkPathExists(indexed, INDEX_DEFINITIONS_NAME, "rootIndex2");
    checkPathExists(ns2, INDEX_CONTENT_NODE_NAME);
    PropertyState ps2 = ns2.getProperty(REINDEX_PROPERTY_NAME);
    assertNotNull(ps2);
    assertFalse(ps2.getValue(Type.BOOLEAN));
    // next, lookup should work for the index def  2 which did not have any config errors
    PropertyIndexLookup lookup = new PropertyIndexLookup(indexed);
    assertEquals(ImmutableSet.of("test/b", "test/a/b"), find(lookup, "foo2", "abc"));
}
