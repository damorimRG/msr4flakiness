// OAK-2308
@Test
public void recoverBranchCommit() throws Exception {
    Clock clock = new Clock.Virtual();
    clock.waitUntil(System.currentTimeMillis());
    MemoryDocumentStore docStore = new MemoryDocumentStore();
    DocumentNodeStore store1 = builderProvider.newBuilder().setDocumentStore(docStore).setAsyncDelay(0).clock(clock).setClusterId(1).getNodeStore();
    NodeBuilder builder = store1.getRoot().builder();
    builder.child("test");
    merge(store1, builder);
    // make sure all _lastRevs are written back
    store1.runBackgroundOperations();
    builder = store1.getRoot().builder();
    NodeBuilder node = builder.getChildNode("test").child("node");
    String id = Utils.getIdFromPath("/test/node");
    int i = 0;
    // force creation of a branch
    while (docStore.find(NODES, id) == null) {
        node.child("foo-" + i++);
    }
    merge(store1, builder);
    // wait until lease expires
    clock.waitUntil(clock.getTime() + store1.getClusterInfo().getLeaseTime() + 1000);
    // run recovery for this store
    LastRevRecoveryAgent agent = store1.getLastRevRecoveryAgent();
    assertTrue(agent.isRecoveryNeeded());
    agent.recover(store1.getClusterId());
    // start a second store
    DocumentNodeStore store2 = builderProvider.newBuilder().setDocumentStore(docStore).setAsyncDelay(0).clock(clock).setClusterId(2).getNodeStore();
    // must see /test/node
    assertTrue(store2.getRoot().getChildNode("test").getChildNode("node").exists());
}
