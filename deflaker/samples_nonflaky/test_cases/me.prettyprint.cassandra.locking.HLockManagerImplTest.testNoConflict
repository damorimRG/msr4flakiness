@Test
public void testNoConflict() throws InterruptedException {
    // the semaphore all workers point to.  We should never have more than 1 worker acquire this at any point in time
    Semaphore failSemaphore = new Semaphore(1);
    int lockManagers = 5;
    int lockClients = 30;
    LockWorkerPool[] pools = new LockWorkerPool[lockManagers];
    // start everything
    for (int i = 0; i < lockManagers; i++) {
        HLockManager lm = new HLockManagerImpl(cluster, hlc);
        lm.init();
        pools[i] = new LockWorkerPool(lockClients, "/testNoConflict", lm, failSemaphore);
        pools[i].go();
    }
    // wait for completion
    for (int i = 0; i < lockManagers; i++) {
        pools[i].waitToFinish();
        assertFalse(pools[i].isFailed());
    }
}
