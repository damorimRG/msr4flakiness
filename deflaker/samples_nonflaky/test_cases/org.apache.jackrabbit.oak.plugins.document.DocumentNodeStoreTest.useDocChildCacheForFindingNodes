// OAK-2464
@Test
public void useDocChildCacheForFindingNodes() throws CommitFailedException {
    final Set<String> reads = Sets.newHashSet();
    MemoryDocumentStore docStore = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            reads.add(key);
            return super.find(collection, key);
        }
    };
    DocumentNodeStore store = builderProvider.newBuilder().setClusterId(1).setAsyncDelay(0).setDocumentStore(docStore).getNodeStore();
    NodeBuilder builder = store.getRoot().builder();
    builder.child("a");
    builder.child("b").child("c");
    merge(store, builder);
    NodeState parentState = store.getRoot().getChildNode("b");
    reads.clear();
    NodeState nonExistingChild = parentState.getChildNode("non-existing-node-1");
    assertEquals("Should not go to DocStore::find for a known non-existent child", 0, reads.size());
    assertFalse("Non existing children should be reported as such", nonExistingChild.exists());
    builder = store.getRoot().builder();
    NodeBuilder childPropBuilder = builder.child("a");
    childPropBuilder.setProperty("foo", "bar");
    merge(store, builder);
    parentState = store.getRoot().getChildNode("b");
    reads.clear();
    nonExistingChild = parentState.getChildNode("non-existing-node-2");
    assertEquals("Should not go to DocStore::find for a known non-existent child," + " even if another merge has happened (on another sub-tree)", 0, reads.size());
    assertFalse("Non existing children should be reported as such", nonExistingChild.exists());
    store.invalidateNodeChildrenCache();
    // force filling up doc child cache
    parentState = store.getRoot().getChildNode("b");
    Iterables.size(parentState.getChildNodeEntries());
    reads.clear();
    nonExistingChild = parentState.getChildNode("non-existing-node-3");
    assertEquals("Should not go to DocStore::find when doc child cache is filled by reading", 0, reads.size());
    assertFalse("Non existing children should be reported as such", nonExistingChild.exists());
}
