@Test
public void testLoginCommitEmptyPrincipalSet() throws Exception {
    when(extIPMgr.getProvider(DEFAULT_IDP_NAME)).thenReturn(new TestIdentityProvider());
    when(syncManager.getSyncHandler("syncHandler")).thenReturn(new DefaultSyncHandler(new DefaultSyncConfigImpl().setName("syncHandler")));
    wb.register(ExternalIdentityProviderManager.class, extIPMgr, Collections.emptyMap());
    wb.register(SyncManager.class, syncManager, Collections.emptyMap());
    Map<String, Object> sharedState = Maps.newHashMap();
    sharedState.put(SHARED_KEY_PRE_AUTH_LOGIN, new PreAuthenticatedLogin(ID_TEST_USER));
    sharedState.put(SHARED_KEY_ATTRIBUTES, Collections.singletonMap("att", "value"));
    PrincipalConfiguration pc = when(mock(PrincipalConfiguration.class).getPrincipalProvider(any(Root.class), any(NamePathMapper.class))).thenReturn(EmptyPrincipalProvider.INSTANCE).getMock();
    SecurityProvider sp = spy(getSecurityProvider());
    when(sp.getConfiguration(PrincipalConfiguration.class)).thenReturn(pc);
    CallbackHandler cbh = createCallbackHandler(wb, getContentRepository(), sp, null);
    Principal principal = new PrincipalImpl("preset");
    Subject subject = new Subject();
    subject.getPrincipals().add(principal);
    loginModule.initialize(subject, cbh, sharedState, ImmutableMap.of(PARAM_IDP_NAME, DEFAULT_IDP_NAME, PARAM_SYNC_HANDLER_NAME, "syncHandler"));
    assertTrue(loginModule.login());
    assertTrue(loginModule.commit());
    assertTrue(subject.getPrincipals().contains(principal));
    assertFalse(subject.getPublicCredentials(AuthInfo.class).isEmpty());
    AuthInfo info = subject.getPublicCredentials(AuthInfo.class).iterator().next();
    assertTrue(info.getPrincipals().contains(principal));
    assertTrue(loginModule.logout());
    // authinfo must be removed upon logout
    assertTrue(subject.getPublicCredentials(AuthInfo.class).isEmpty());
    // predefined principal must _not_ be removed
    assertTrue(subject.getPrincipals().contains(principal));
}
