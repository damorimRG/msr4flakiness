// OAK-1972
@Test
public void readFromPreviousDoc() throws CommitFailedException {
    DocumentStore docStore = new MemoryDocumentStore();
    DocumentNodeStore ns = builderProvider.newBuilder().setDocumentStore(docStore).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    builder.child("test").setProperty("prop", "initial");
    ns.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    ns.dispose();
    ns = builderProvider.newBuilder().setClusterId(2).setAsyncDelay(0).setDocumentStore(docStore).getNodeStore();
    builder = ns.getRoot().builder();
    builder.child("test").setProperty("prop", "value");
    ns.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    RevisionVector rev = ns.getHeadRevision();
    NodeDocument doc = docStore.find(NODES, Utils.getIdFromPath("/test"));
    assertNotNull(doc);
    DocumentNodeState state = doc.getNodeAtRevision(ns, rev, null);
    assertNotNull(state);
    assertTrue(state.hasProperty("prop"));
    assertEquals("value", state.getProperty("prop").getValue(Type.STRING));
    for (int i = 0; i < NUM_REVS_THRESHOLD; i++) {
        builder = ns.getRoot().builder();
        builder.child("test").setProperty("prop", "v-" + i);
        ns.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    }
    ns.runBackgroundOperations();
    // must still return the same value as before the split
    doc = docStore.find(NODES, Utils.getIdFromPath("/test"));
    assertNotNull(doc);
    state = doc.getNodeAtRevision(ns, rev, null);
    assertNotNull(state);
    assertTrue(state.hasProperty("prop"));
    assertEquals("value", state.getProperty("prop").getValue(Type.STRING));
}
