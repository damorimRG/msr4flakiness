/**
 * This test was written as result of adding the new zero
 * copy constructor and set method to BytesWritable. These
 * methods allow users to specify the backing buffer of the
 * BytesWritable instance and a length.
 */
@Test
public void testZeroCopy() {
    byte[] bytes = "brock".getBytes();
    // new
    BytesWritable zeroBuf = new BytesWritable(bytes, bytes.length);
    // old
    BytesWritable copyBuf = new BytesWritable(bytes);
    // using zero copy constructor shouldn't result in a copy
    assertTrue("copy took place, backing array != array passed to constructor", bytes == zeroBuf.getBytes());
    assertTrue("length of BW should backing byte array", zeroBuf.getLength() == bytes.length);
    assertEquals("objects with same backing array should be equal", zeroBuf, copyBuf);
    assertEquals("string repr of objects with same backing array should be equal", zeroBuf.toString(), copyBuf.toString());
    assertTrue("compare order objects with same backing array should be equal", zeroBuf.compareTo(copyBuf) == 0);
    assertTrue("hash of objects with same backing array should be equal", zeroBuf.hashCode() == copyBuf.hashCode());
    // ensure expanding buffer is handled correctly
    // for buffers created with zero copy api
    byte[] buffer = new byte[bytes.length * 5];
    // expand internal buffer
    zeroBuf.set(buffer, 0, buffer.length);
    // set back to normal contents
    zeroBuf.set(bytes, 0, bytes.length);
    assertEquals("buffer created with (array, len) has bad contents", zeroBuf, copyBuf);
    assertTrue("buffer created with (array, len) has bad length", zeroBuf.getLength() == copyBuf.getLength());
}
