@Test
public void filteredTracker() {
    whiteboard.register(Service1.class, new Service1("s1"), ImmutableMap.of());
    whiteboard.register(Service2.class, new Service2("s2"), ImmutableMap.of("role", "myrole"));
    whiteboard.register(Service3.class, new Service3("s3_1"), ImmutableMap.of());
    whiteboard.register(Service3.class, new Service3("s3_2"), ImmutableMap.of("role", "myrole"));
    whiteboard.register(Service3.class, new Service3("s3_3"), ImmutableMap.of("role", "myotherrole", "id", 1024));
    assertEquals(of("s1"), track(Service1.class));
    assertEquals(of("s1"), track(Service1.class, singletonMap("role", null)));
    assertEquals(of(), track(Service1.class, ImmutableMap.of("role", "myrole")));
    assertEquals(of("s2"), track(Service2.class));
    assertEquals(of(), track(Service2.class, singletonMap("role", null)));
    assertEquals(of("s2"), track(Service2.class, ImmutableMap.of("role", "myrole")));
    assertEquals(of("s3_1", "s3_2", "s3_3"), track(Service3.class));
    assertEquals(of("s3_1"), track(Service3.class, singletonMap("role", null)));
    assertEquals(of("s3_2"), track(Service3.class, ImmutableMap.of("role", "myrole")));
    assertEquals(of("s3_3"), track(Service3.class, ImmutableMap.of("role", "myotherrole")));
    assertEquals(of("s3_3"), track(Service3.class, ImmutableMap.of("role", "myotherrole", "id", "1024")));
    assertEquals(of("s3_3"), track(Service3.class, ImmutableMap.of("id", "1024")));
    assertEquals(of(), track(Service3.class, ImmutableMap.of("id", "2048")));
}
