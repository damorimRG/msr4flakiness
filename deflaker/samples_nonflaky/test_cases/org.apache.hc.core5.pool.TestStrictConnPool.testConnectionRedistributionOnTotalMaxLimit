@Test
public void testConnectionRedistributionOnTotalMaxLimit() throws Exception {
    final HttpConnection conn1 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn2 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn3 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn4 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn5 = Mockito.mock(HttpConnection.class);
    final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 10);
    pool.setMaxPerRoute("somehost", 2);
    pool.setMaxPerRoute("otherhost", 2);
    pool.setMaxTotal(2);
    final Future<PoolEntry<String, HttpConnection>> future1 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future2 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future3 = pool.lease("otherhost", null);
    final Future<PoolEntry<String, HttpConnection>> future4 = pool.lease("otherhost", null);
    Assert.assertTrue(future1.isDone());
    final PoolEntry<String, HttpConnection> entry1 = future1.get();
    Assert.assertNotNull(entry1);
    Assert.assertFalse(entry1.hasConnection());
    entry1.assignConnection(conn1);
    Assert.assertTrue(future2.isDone());
    final PoolEntry<String, HttpConnection> entry2 = future2.get();
    Assert.assertNotNull(entry2);
    Assert.assertFalse(entry2.hasConnection());
    entry2.assignConnection(conn2);
    Assert.assertFalse(future3.isDone());
    Assert.assertFalse(future4.isDone());
    PoolStats totals = pool.getTotalStats();
    Assert.assertEquals(0, totals.getAvailable());
    Assert.assertEquals(2, totals.getLeased());
    Assert.assertEquals(2, totals.getPending());
    pool.release(entry1, true);
    pool.release(entry2, true);
    Assert.assertTrue(future3.isDone());
    final PoolEntry<String, HttpConnection> entry3 = future3.get();
    Assert.assertNotNull(entry3);
    Assert.assertFalse(entry3.hasConnection());
    entry3.assignConnection(conn3);
    Assert.assertTrue(future4.isDone());
    final PoolEntry<String, HttpConnection> entry4 = future4.get();
    Assert.assertNotNull(entry4);
    Assert.assertFalse(entry4.hasConnection());
    entry4.assignConnection(conn4);
    totals = pool.getTotalStats();
    Assert.assertEquals(0, totals.getAvailable());
    Assert.assertEquals(2, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
    final Future<PoolEntry<String, HttpConnection>> future5 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future6 = pool.lease("otherhost", null);
    pool.release(entry3, true);
    pool.release(entry4, true);
    Assert.assertTrue(future5.isDone());
    final PoolEntry<String, HttpConnection> entry5 = future5.get();
    Assert.assertNotNull(entry5);
    Assert.assertFalse(entry5.hasConnection());
    entry5.assignConnection(conn5);
    Assert.assertTrue(future6.isDone());
    final PoolEntry<String, HttpConnection> entry6 = future6.get();
    Assert.assertNotNull(entry6);
    Assert.assertTrue(entry6.hasConnection());
    Assert.assertSame(conn4, entry6.getConnection());
    totals = pool.getTotalStats();
    Assert.assertEquals(0, totals.getAvailable());
    Assert.assertEquals(2, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
    pool.release(entry5, true);
    pool.release(entry6, true);
    totals = pool.getTotalStats();
    Assert.assertEquals(2, totals.getAvailable());
    Assert.assertEquals(0, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
}
