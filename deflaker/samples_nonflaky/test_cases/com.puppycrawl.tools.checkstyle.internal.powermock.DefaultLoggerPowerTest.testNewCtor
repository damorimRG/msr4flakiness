@Test
public void testNewCtor() throws Exception {
    final OutputStream infoStream = spy(new ByteArrayOutputStream());
    final ByteArrayOutputStream errorStream = spy(new ByteArrayOutputStream());
    final DefaultLogger dl = new DefaultLogger(infoStream, AutomaticBean.OutputStreamOptions.CLOSE, errorStream, AutomaticBean.OutputStreamOptions.CLOSE);
    dl.auditStarted(null);
    dl.addException(new AuditEvent(5000, "myfile"), new IllegalStateException("upsss"));
    dl.auditFinished(new AuditEvent(6000, "myfile"));
    final String output = errorStream.toString(StandardCharsets.UTF_8.name());
    final LocalizedMessage addExceptionMessage = new LocalizedMessage(1, Definitions.CHECKSTYLE_BUNDLE, DefaultLogger.ADD_EXCEPTION_MESSAGE, new String[] { "myfile" }, null, getClass(), null);
    final LocalizedMessage startMessage = new LocalizedMessage(1, Definitions.CHECKSTYLE_BUNDLE, DefaultLogger.AUDIT_STARTED_MESSAGE, CommonUtil.EMPTY_STRING_ARRAY, null, getClass(), null);
    final LocalizedMessage finishMessage = new LocalizedMessage(1, Definitions.CHECKSTYLE_BUNDLE, DefaultLogger.AUDIT_FINISHED_MESSAGE, CommonUtil.EMPTY_STRING_ARRAY, null, getClass(), null);
    verify(infoStream, times(1)).close();
    verify(errorStream, times(1)).close();
    final String infoOutput = infoStream.toString();
    assertTrue("Message should contain exception info, but was " + infoOutput, infoOutput.contains(startMessage.getMessage()));
    assertTrue("Message should contain exception info, but was " + infoOutput, infoOutput.contains(finishMessage.getMessage()));
    assertTrue("Message should contain exception info, but was " + output, output.contains(addExceptionMessage.getMessage()));
    assertTrue("Message should contain exception info, but was " + output, output.contains("java.lang.IllegalStateException: upsss"));
}
