@Test
public void testInterruptEscalationShutdown() throws Throwable {
    ExitTrackingServiceLauncher<BreakableService> launcher = new ExitTrackingServiceLauncher<>(BreakableService.class.getName());
    BreakableService service = new BreakableService();
    launcher.setService(service);
    InterruptEscalator escalator = new InterruptEscalator(launcher, 500);
    // call the interrupt operation directly
    try {
        escalator.interrupted(new IrqHandler.InterruptData("INT", 3));
        fail("Expected an exception to be raised in " + escalator);
    } catch (ExitUtil.ExitException e) {
        assertExceptionDetails(EXIT_INTERRUPTED, "", e);
    }
    // the service is now stopped
    assertStopped(service);
    assertTrue("isSignalAlreadyReceived() == false in " + escalator, escalator.isSignalAlreadyReceived());
    assertFalse("isForcedShutdownTimedOut() == true in " + escalator, escalator.isForcedShutdownTimedOut());
    // now interrupt it a second time and expect it to escalate to a halt
    try {
        escalator.interrupted(new IrqHandler.InterruptData("INT", 3));
        fail("Expected an exception to be raised in " + escalator);
    } catch (ExitUtil.HaltException e) {
        assertExceptionDetails(EXIT_INTERRUPTED, "", e);
    }
}
