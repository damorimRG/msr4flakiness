@Test
public void testCommitMessage() {
    assertEquals(3, validateCommitMessage("minor: Test. Test."), "should not accept commit message with periods on end");
    assertEquals(3, validateCommitMessage("minor: Test. "), "should not accept commit message with spaces on end");
    assertEquals(3, validateCommitMessage("minor: Test.\t"), "should not accept commit message with tabs on end");
    assertEquals(3, validateCommitMessage("minor: Test.\n"), "should not accept commit message with period on end, ignoring new line");
    assertEquals(1, validateCommitMessage("Test. Test"), "should not accept commit message with missing prefix");
    assertEquals(1, validateCommitMessage("Test. Test\n"), "should not accept commit message with missing prefix");
    assertEquals(2, validateCommitMessage("minor: Test.\nTest"), "should not accept commit message with multiple lines with text");
    assertEquals(0, validateCommitMessage("minor: Test\n"), "should accept commit message with a new line on end");
    assertEquals(0, validateCommitMessage("minor: Test\n\n"), "should accept commit message with multiple new lines on end");
    assertEquals(0, validateCommitMessage("minor: Test. Test"), "should accept commit message that ends properly");
    assertEquals(4, validateCommitMessage("minor: Test Test Test Test Test" + "Test Test Test Test Test Test Test Test Test Test Test Test Test Test " + "Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test " + "Test Test Test Test Test Test Test  Test Test Test Test Test Test"), "should accept commit message with less than or equal to 200 characters");
}
