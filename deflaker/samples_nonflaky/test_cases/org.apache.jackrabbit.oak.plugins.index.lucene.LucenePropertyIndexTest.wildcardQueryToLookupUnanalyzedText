// OAK-4516
@Test
public void wildcardQueryToLookupUnanalyzedText() throws Exception {
    Tree idx = createIndex("test1", of("propa", "propb"));
    idx.setProperty(PROP_TYPE, "lucene");
    idx.addChild(ANALYZERS).setProperty(INDEX_ORIGINAL_TERM, true);
    useV2(idx);
    // Do not provide type information
    root.commit();
    // setup propa def to be analyzed
    Tree propTree = root.getTree(idx.getPath() + "/indexRules/nt:base/properties/propa");
    propTree.setProperty(PROP_ANALYZED, true);
    root.commit();
    // set propb def to be node scope indexed
    propTree = root.getTree(idx.getPath() + "/indexRules/nt:base/properties/propb");
    propTree.setProperty(PROP_NODE_SCOPE_INDEX, true);
    root.getTree(idx.getPath()).setProperty(REINDEX_PROPERTY_NAME, true);
    root.commit();
    Tree rootTree = root.getTree("/");
    Tree node1Tree = rootTree.addChild("node1");
    node1Tree.setProperty("propa", "abcdef");
    node1Tree.setProperty("propb", "abcdef");
    Tree node2Tree = rootTree.addChild("node2");
    node2Tree.setProperty("propa", "abc_def");
    node2Tree.setProperty("propb", "abc_def");
    root.commit();
    // normal query still works
    String query = "select [jcr:path] from [nt:base] where contains('propa', 'abc*')";
    String explanation = explain(query);
    assertThat(explanation, containsString("lucene:test1"));
    assertQuery(query, asList("/node1", "/node2"));
    // unanalyzed wild-card query can still match original term
    query = "select [jcr:path] from [nt:base] where contains('propa', 'abc_d*')";
    explanation = explain(query);
    assertThat(explanation, containsString("lucene:test1"));
    assertQuery(query, asList("/node2"));
    // normal query still works
    query = "select [jcr:path] from [nt:base] where contains(*, 'abc*')";
    explanation = explain(query);
    assertThat(explanation, containsString("lucene:test1"));
    assertQuery(query, asList("/node1", "/node2"));
    // unanalyzed wild-card query can still match original term
    query = "select [jcr:path] from [nt:base] where contains(*, 'abc_d*')";
    explanation = explain(query);
    assertThat(explanation, containsString("lucene:test1"));
    assertQuery(query, asList("/node2"));
}
