@Test
public void idInExceptionMessage() {
    String id = Utils.getIdFromPath("/foo");
    UpdateOp insert = new UpdateOp(id, true);
    assertTrue(store.create(Collection.NODES, singletonList(insert)));
    UpdateOp op = new UpdateOp(id, false);
    NodeDocument.setModified(op, new Revision(System.currentTimeMillis(), 0, 1));
    exceptionMsg = "findAndUpdate failed";
    setExceptionMsg();
    try {
        store.findAndUpdate(Collection.NODES, op);
        fail("DocumentStoreException expected");
    } catch (DocumentStoreException e) {
        assertTrue(e.getMessage().contains(exceptionMsg));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(id));
    }
    exceptionMsg = "createOrUpdate failed";
    setExceptionMsg();
    try {
        store.createOrUpdate(Collection.NODES, op);
        fail("DocumentStoreException expected");
    } catch (DocumentStoreException e) {
        assertTrue(e.getMessage().contains(exceptionMsg));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(id));
    }
    exceptionMsg = "createOrUpdate (multiple) failed";
    setExceptionMsg();
    try {
        store.createOrUpdate(Collection.NODES, singletonList(op));
        fail("DocumentStoreException expected");
    } catch (DocumentStoreException e) {
        assertTrue(e.getMessage().contains(exceptionMsg));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(id));
    }
    exceptionMsg = "find failed";
    setExceptionMsg();
    try {
        store.find(Collection.NODES, id);
        fail("DocumentStoreException expected");
    } catch (DocumentStoreException e) {
        assertThat(e.getMessage(), containsString(exceptionMsg));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(id));
    }
    Path foo = Path.fromString("/foo");
    String fromKey = Utils.getKeyLowerLimit(foo);
    String toKey = Utils.getKeyUpperLimit(foo);
    exceptionMsg = "query failed";
    setExceptionMsg();
    try {
        store.query(Collection.NODES, fromKey, toKey, 100);
        fail("DocumentStoreException expected");
    } catch (DocumentStoreException e) {
        assertThat(e.getMessage(), containsString(exceptionMsg));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(fromKey));
        assertTrue("Exception message does not contain id: '" + e.getMessage() + "'", e.getMessage().contains(toKey));
    }
}
