@Test
public void testShadowInvisibleProperty2() throws Exception {
    setupPermission("/a", testPrincipal, true, PrivilegeConstants.JCR_ALL);
    setupPermission("/a", testPrincipal, false, PrivilegeConstants.REP_READ_PROPERTIES);
    setupPermission("/a", testPrincipal, false, PrivilegeConstants.REP_ALTER_PROPERTIES);
    Root testRoot = getTestRoot();
    Tree a = testRoot.getTree("/a");
    // /a/aProp not visible to this session
    assertNull(a.getProperty("aProp"));
    assertFalse(a.hasProperty("aProp"));
    // shadow /a/aProp with transient property of the same name *and value*
    a.setProperty("aProp", "aValue");
    assertNotNull(a.getProperty("aProp"));
    assertTrue(a.hasProperty("aProp"));
    // after commit() normal access control again takes over
    // does not fail since no changes are detected, even when write access is denied
    testRoot.commit();
    assertNull(a.getProperty("aProp"));
    assertFalse(a.hasProperty("aProp"));
}
