@Test
public void testDynamicSerialization() throws Exception {
    // test correct serialization sizes for strings
    DynamicComposite c = new DynamicComposite();
    c.add("String1");
    ByteBuffer b = c.serialize();
    assertEquals(b.remaining(), 12);
    c.add("String2");
    b = c.serialize();
    assertEquals(b.remaining(), 24);
    // test deserialization of strings
    c = new DynamicComposite();
    c.deserialize(b);
    assertEquals(2, c.size());
    Object o = c.get(0);
    assertEquals("String1", o);
    o = c.get(1);
    assertEquals("String2", o);
    // test serialization and deserialization of longs
    c = new DynamicComposite();
    c.add(new Long(10));
    b = c.serialize();
    c = new DynamicComposite();
    c.deserialize(b);
    o = c.get(0);
    assertTrue(o instanceof Long);
    // test serialization and deserialization of floats
    c = new DynamicComposite();
    c.add(new Float(10));
    b = c.serialize();
    c = new DynamicComposite();
    c.deserialize(b);
    o = c.get(0);
    assertTrue(o instanceof Float);
    // test serialization and deserialization of random UUIDS
    c = new DynamicComposite();
    c.add(UUID.randomUUID());
    b = c.serialize();
    c = DynamicComposite.fromByteBuffer(b);
    o = c.get(0);
    assertTrue(o instanceof UUID);
    assertEquals(UUIDTYPE.getTypeName(), c.getComponent(0).getComparator());
    // test serialization and deserialization of time-based UUIDS
    c = new DynamicComposite();
    c.add(TimeUUIDUtils.getUniqueTimeUUIDinMillis());
    b = c.serialize();
    c = DynamicComposite.fromByteBuffer(b);
    o = c.get(0);
    assertTrue(o instanceof UUID);
    assertEquals(UUIDTYPE.getTypeName(), c.getComponent(0).getComparator());
    // test compatibility with Cassandra unit tests
    b = createDynamicCompositeKey("Hello", TimeUUIDUtils.getUniqueTimeUUIDinMillis(), 10, false);
    c = new DynamicComposite();
    c.deserialize(b.slice());
    o = c.get(0);
    assertTrue(o instanceof ByteBuffer);
    assertEquals("Hello", c.get(0, StringSerializer.get()));
    o = c.get(1);
    assertEquals(UUID.class, o.getClass());
    o = c.get(2);
    assertEquals(BigInteger.class, o.getClass());
    assertEquals(BigInteger.valueOf(10), o);
    // test using supplied deserializer rather than auto-mapped
    c = new DynamicComposite();
    c.deserialize(b.slice());
    assertTrue(c.get(0, ByteBufferSerializer.get()) instanceof ByteBuffer);
    assertTrue(c.get(1, ByteBufferSerializer.get()) instanceof ByteBuffer);
    assertTrue(c.get(2, ByteBufferSerializer.get()) instanceof ByteBuffer);
    // test setting a deserializer for specific components
    c = new DynamicComposite();
    c.setSerializersByPosition(StringSerializer.get(), null, ByteBufferSerializer.get());
    c.deserialize(b.slice());
    assertTrue(c.get(0) instanceof String);
    assertTrue(c.get(1) instanceof UUID);
    assertTrue(c.get(2) instanceof ByteBuffer);
    b = DynamicComposite.toByteBuffer(1, "string", TimeUUIDUtils.getUniqueTimeUUIDinMillis());
    c = DynamicComposite.fromByteBuffer(b);
    assertTrue(c.get(0) instanceof BigInteger);
    assertTrue(c.get(1) instanceof String);
    assertTrue(c.get(2) instanceof UUID);
    b = DynamicComposite.toByteBuffer((long) 1, "string", TimeUUIDUtils.getUniqueTimeUUIDinMillis());
    c = DynamicComposite.fromByteBuffer(b);
    assertTrue(c.get(0) instanceof Long);
    assertTrue(c.get(1) instanceof String);
    assertTrue(c.get(2) instanceof UUID);
    b = DynamicComposite.toByteBuffer((byte) 1, "string", UUID.randomUUID());
    c = DynamicComposite.fromByteBuffer(b);
    assertTrue(c.get(0) instanceof BigInteger);
    assertTrue(c.get(1) instanceof String);
    assertTrue(c.get(2) instanceof UUID);
    b = DynamicComposite.toByteBuffer(Arrays.asList(Arrays.asList(0, 1, 2), 3, 4, 5, Arrays.asList(6, 7, 8)));
    c = DynamicComposite.fromByteBuffer(b);
    for (int i = 0; i < 9; i++) {
        o = c.get(i);
        assertTrue(o instanceof BigInteger);
        assertEquals(i, ((BigInteger) o).intValue());
    }
    b = DynamicComposite.toByteBuffer("foo");
    c = DynamicComposite.fromByteBuffer(b);
    b = c.getComponent(0).getBytes();
    UTF8Type.instance.validate(b);
}
