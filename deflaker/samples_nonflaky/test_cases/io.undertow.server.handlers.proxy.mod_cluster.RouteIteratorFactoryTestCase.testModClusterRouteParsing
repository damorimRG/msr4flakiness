@Test
public void testModClusterRouteParsing() {
    // Disabled sticky sessions
    Iterator<CharSequence> ri = new RouteIteratorFactory(NONE, MOD_CLUSTER).iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h");
    Assert.assertFalse(ri.hasNext());
    ri = new RouteIteratorFactory(NONE, MOD_CLUSTER).iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1.node2");
    Assert.assertFalse(ri.hasNext());
    // No ranked routing support and no route given or null sessionId
    ri = new RouteIteratorFactory(SINGLE, MOD_CLUSTER).iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h");
    Assert.assertFalse(ri.hasNext());
    ri = new RouteIteratorFactory(SINGLE, MOD_CLUSTER).iterator(null);
    Assert.assertFalse(ri.hasNext());
    // No ranked routing support treating everything after '.' as route
    ri = new RouteIteratorFactory(SINGLE, MOD_CLUSTER).iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1.node2.node3");
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node1.node2.node3", ri.next().toString());
    Assert.assertFalse(ri.hasNext());
    // Ranked routing support but no route given
    ri = new RouteIteratorFactory(RANKED, MOD_CLUSTER, ".").iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h");
    Assert.assertFalse(ri.hasNext());
    // Multi-route support with the same character delimiter as sessionID delimiter '.'
    ri = new RouteIteratorFactory(RANKED, MOD_CLUSTER, ".").iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1.node2.node3");
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node1", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node2", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node3", ri.next().toString());
    Assert.assertFalse(ri.hasNext());
    // Multi-route support with a different character delimiter ':'
    ri = new RouteIteratorFactory(RANKED, MOD_CLUSTER, ":").iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1:node2.1:node3.1");
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node1", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node2.1", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node3.1", ri.next().toString());
    Assert.assertFalse(ri.hasNext());
    // Multi-route support with messy inputs
    ri = new RouteIteratorFactory(RANKED, MOD_CLUSTER, ":").iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1::node2::");
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node1", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node2", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("", ri.next().toString());
    Assert.assertFalse(ri.hasNext());
    // Multi-route multi-character delimiter support
    ri = new RouteIteratorFactory(RANKED, MOD_CLUSTER, "|||").iterator("mKaJwtWjqgxFbSSlaKZeGly_RMPKCg13JXe-6R_h.node1|||node2|||node3");
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node1", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node2", ri.next().toString());
    Assert.assertTrue(ri.hasNext());
    Assert.assertEquals("node3", ri.next().toString());
    Assert.assertFalse(ri.hasNext());
}
