@Test
public void usedAsNodeTypeIndex2() throws Exception {
    // prevent the default nodeType index from indexing all types
    Tree nodeTypeIdx = root.getTree("/oak:index/nodetype");
    nodeTypeIdx.setProperty(PropertyStates.createProperty(DECLARING_NODE_TYPES, of("nt:resource"), NAMES));
    nodeTypeIdx.setProperty(IndexConstants.REINDEX_PROPERTY_NAME, true);
    Tree indexWithType = createIndex("test2", of("propb"));
    indexWithType.setProperty(PropertyStates.createProperty(DECLARING_NODE_TYPES, of("nt:file"), NAMES));
    indexWithType.setProperty(FulltextIndexConstants.FULL_TEXT_ENABLED, true);
    TestUtil.useV2(indexWithType);
    Tree test = root.getTree("/").addChild("test");
    setNodeType(test, "nt:file");
    root.commit();
    setNodeType(test.addChild("a"), "nt:file");
    setNodeType(test.addChild("b"), "nt:file");
    setNodeType(test.addChild("c"), "nt:base");
    root.commit();
    String propabQuery = "select [jcr:path] from [nt:file]";
    assertThat(explain(propabQuery), containsString("lucene:test2"));
    assertQuery(propabQuery, asList("/test/a", "/test/b", "/test"));
}
