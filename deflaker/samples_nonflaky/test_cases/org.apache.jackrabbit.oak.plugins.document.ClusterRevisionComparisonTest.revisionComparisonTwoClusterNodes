@Test
public void revisionComparisonTwoClusterNodes() throws Exception {
    DocumentNodeStore c1 = createNS(1);
    DocumentNodeStore c2 = createNS(2);
    // 1. Create /a and make it visible to both cluster nodes
    createNode(c1, "/a");
    runBgOps(c1, c2);
    // 2. Time T1. Create /a/c2 but do not push the changes yet rT1-C2
    createNode(c2, "/a/c2");
    // 3. Time T2. Create /a/c1
    createNode(c1, "/a/c1");
    // 4. Push changes on c2
    runBgOps(c2);
    // 5. Time T3. Read the changes /a/c2 by c2 created at T1.
    // Now from C1 view rT1-C2 > rT2-C1 even though T1 < T2
    runBgOps(c1);
    DocumentNodeState c1ns1 = c1.getRoot();
    NodeState a = c1ns1.getChildNode("a");
    assertTrue("/a/c1 missing", a.hasChildNode("c1"));
    assertTrue("/a/c2 missing", a.hasChildNode("c2"));
    // 6. Purge revision comparator. Also purge entries from nodeCache
    // such that later reads at rT1-C2 triggers read from underlying DocumentStore
    c1.invalidateNodeCache("/a/c1", ((DocumentNodeState) a).getLastRevision());
    c1.invalidateNodeCache("/a/c2", ((DocumentNodeState) a).getLastRevision());
    runBgOps(c1);
    assertTrue("/a/c1 disappeared", a.hasChildNode("c1"));
    assertTrue("/a/c2 disappeared", a.hasChildNode("c2"));
    // read again starting at root node with a invalidated cache
    // and purged revision comparator
    c1ns1 = c1.getRoot();
    c1.invalidateNodeCache("/", c1ns1.getRootRevision());
    c1ns1 = c1.getRoot();
    c1.invalidateNodeCache("/a", c1ns1.getLastRevision());
    assertTrue("/a missing", c1ns1.hasChildNode("a"));
    a = c1ns1.getChildNode("a");
    c1.invalidateNodeCache("/a/c1", ((DocumentNodeState) a).getLastRevision());
    c1.invalidateNodeCache("/a/c2", ((DocumentNodeState) a).getLastRevision());
    assertTrue("/a/c1 disappeared", a.hasChildNode("c1"));
    assertTrue("/a/c2 disappeared", a.hasChildNode("c2"));
}
