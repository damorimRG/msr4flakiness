@Test
public void badIndexAccess() throws Exception {
    createIndex("foo");
    // 1. Create and populate index
    NodeState before = builder.getNodeState();
    builder.setProperty("foo", "bar");
    NodeState after = builder.getNodeState();
    NodeState indexed = hook.processCommit(before, after, CommitInfo.EMPTY);
    tracker.update(indexed);
    LuceneIndexNode indexNode = tracker.acquireIndexNode("/oak:index/foo");
    indexNode.release();
    assertTrue(tracker.getBadIndexTracker().getIndexPaths().isEmpty());
    // 2. Corrupt the index
    builder = indexed.builder();
    indexed = corruptIndex("/oak:index/foo");
    tracker.update(indexed);
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    // Even if the persisted index is corrupted the index should be accessible
    // as update would have failed so old copy would be used
    assertNotNull(indexNode);
    assertFalse(tracker.getBadIndexTracker().getBadPersistedIndexPaths().isEmpty());
    // 3. Recreate the tracker as we cannot push corrupt index in existing tracker
    // As diffAndUpdate would fail and existing LuceneIndexNode would not be changed
    tracker = new IndexTracker();
    tracker.update(indexed);
    VirtualTicker ticker = new VirtualTicker();
    tracker.getBadIndexTracker().setTicker(ticker);
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    // Index must be corrupted hence it must be null
    assertNull(indexNode);
    assertTrue(tracker.getBadIndexTracker().getIndexPaths().contains("/oak:index/foo"));
    BadIndexTracker.BadIndexInfo badIdxInfo = tracker.getBadIndexTracker().getInfo("/oak:index/foo");
    assertNotNull(badIdxInfo);
    assertEquals(0, badIdxInfo.getAccessCount());
    // Try to access again
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    assertEquals(1, badIdxInfo.getAccessCount());
    assertEquals(0, badIdxInfo.getFailedAccessCount());
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    assertEquals(2, badIdxInfo.getAccessCount());
    assertEquals(0, badIdxInfo.getFailedAccessCount());
    // 5. Move clock forward
    ticker.addTime(tracker.getBadIndexTracker().getRecheckIntervalMillis() + 1, TimeUnit.MILLISECONDS);
    // Now index access must be attempted again
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    assertEquals(3, badIdxInfo.getAccessCount());
    assertEquals(1, badIdxInfo.getFailedAccessCount());
    // 6. Now lets reindex to fix the corruption
    builder = indexed.builder();
    before = indexed;
    after = reindex("/oak:index/foo");
    indexed = hook.processCommit(before, after, CommitInfo.EMPTY);
    tracker.update(indexed);
    // 7. Now indexNode should be accessible
    indexNode = tracker.acquireIndexNode("/oak:index/foo");
    assertNotNull(indexNode);
    // And this index would not be considered bad
    badIdxInfo = tracker.getBadIndexTracker().getInfo("/oak:index/foo");
    assertNull(badIdxInfo);
}
