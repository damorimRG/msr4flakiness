/*
    Given an index def with 2 orderable property definitions(non-relative) for same property - one with function and one without
    Indexer should index any changes properly and ordering should work as expected.
     */
@Test
public void sameOrderablePropertyWithandWithoutFunction() throws Exception {
    LogCustomizer customLogs = LogCustomizer.forLogger(LuceneIndexEditor.class.getName()).enable(Level.WARN).create();
    // Create nodes that will be served by the index definition that follows
    int i = 1;
    // Create nodes that will be served by the index definition that follows
    for (String node : asList("a", "c", "b", "e", "d")) {
        Tree test = root.getTree("/").addChild(node);
        test.setProperty("jcr:primaryType", "nt:unstructured", Type.NAME);
        test.setProperty("foo", "bar" + i);
        i++;
    }
    root.commit();
    // Index def with same property - ordered - one with function and one without
    Tree luceneIndex = createIndex("upper", Collections.<String>emptySet());
    Tree nonFunc = luceneIndex.addChild(FulltextIndexConstants.INDEX_RULES).addChild("nt:base").addChild(FulltextIndexConstants.PROP_NODE).addChild("foo");
    nonFunc.setProperty(FulltextIndexConstants.PROP_ORDERED, true);
    nonFunc.setProperty(FulltextIndexConstants.PROP_PROPERTY_INDEX, true);
    nonFunc.setProperty("name", "foo");
    Tree func = luceneIndex.getChild(FulltextIndexConstants.INDEX_RULES).getChild("nt:base").getChild(FulltextIndexConstants.PROP_NODE).addChild("testOak");
    func.setProperty(FulltextIndexConstants.PROP_ORDERED, true);
    func.setProperty(FulltextIndexConstants.PROP_FUNCTION, "fn:upper-case(@foo)");
    // Now do some change in the node that are covered by above index definition
    try {
        customLogs.starting();
        i = 5;
        for (String node : asList("a", "c", "b", "e", "d")) {
            Tree test = root.getTree("/").addChild(node);
            test.setProperty("jcr:primaryType", "nt:unstructured", Type.NAME);
            test.setProperty("foo", "bar" + i);
            i--;
        }
        root.commit();
        Assert.assertFalse(customLogs.getLogs().contains("Failed to index the node [/test]"));
        Assert.assertTrue(customLogs.getLogs().size() == 0);
        assertOrderedPlanAndQuery("select * from [nt:base] order by upper([foo])", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
        assertOrderedPlanAndQuery("select * from [nt:base] order by [foo]", "lucene:upper(/oak:index/upper)", asList("/d", "/e", "/b", "/c", "/a"));
        assertOrderedPlanAndQuery("select * from [nt:base] order by upper([foo]) DESC", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
        assertOrderedPlanAndQuery("select * from [nt:base] order by [foo] DESC", "lucene:upper(/oak:index/upper)", asList("/a", "/c", "/b", "/e", "/d"));
    } finally {
        customLogs.finished();
    }
}
