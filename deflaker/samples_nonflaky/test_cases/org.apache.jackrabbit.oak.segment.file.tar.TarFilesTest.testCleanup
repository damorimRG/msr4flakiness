@Test
public void testCleanup() throws Exception {
    UUID a = randomUUID();
    UUID b = randomUUID();
    UUID c = randomUUID();
    UUID d = randomUUID();
    UUID e = randomUUID();
    writeSegment(a);
    writeSegment(b);
    writeSegmentWithReferences(c, a, b);
    writeSegment(d);
    writeSegmentWithReferences(e, a, d);
    // Traverse graph of segments starting with `e`. Mark as reclaimable
    // every segment that are not traversed. The two segments `b` and `c`
    // will be reclaimed.
    CleanupResult result = tarFiles.cleanup(new CleanupContext() {

        @Override
        public Collection<UUID> initialReferences() {
            return singletonList(e);
        }

        @Override
        public boolean shouldReclaim(UUID id, GCGeneration generation, boolean referenced) {
            return !referenced;
        }

        @Override
        public boolean shouldFollow(UUID from, UUID to) {
            return true;
        }
    });
    assertFalse(result.isInterrupted());
    assertFalse(result.getRemovableFiles().isEmpty());
    assertEquals(new HashSet<>(asList(c, b)), result.getReclaimedSegmentIds());
    assertTrue(result.getReclaimedSize() > 0);
}
