@Test
void scanWhenBasePackagesAndBasePackcageClassesProvidedShouldUseThat() throws IOException {
    DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
    beanFactory.setAllowBeanDefinitionOverriding(false);
    this.registrar.registerBeanDefinitions(getAnnotationMetadata(ConfigurationPropertiesScanConfiguration.DifferentPackageConfiguration.class), beanFactory);
    assertThat(beanFactory.containsBeanDefinition("foo-org.springframework.boot.context.properties.scan.valid.ConfigurationPropertiesScanConfiguration$FooProperties")).isFalse();
    BeanDefinition aDefinition = beanFactory.getBeanDefinition("a-org.springframework.boot.context.properties.scan.valid.a.AScanConfiguration$AProperties");
    BeanDefinition bFirstDefinition = beanFactory.getBeanDefinition("b.first-org.springframework.boot.context.properties.scan.valid.b.BScanConfiguration$BFirstProperties");
    BeanDefinition bSecondDefinition = beanFactory.getBeanDefinition("b.second-org.springframework.boot.context.properties.scan.valid.b.BScanConfiguration$BSecondProperties");
    assertThat(aDefinition).isExactlyInstanceOf(GenericBeanDefinition.class);
    // Constructor injection
    assertThat(bFirstDefinition).isExactlyInstanceOf(ConfigurationPropertiesValueObjectBeanDefinition.class);
    // Post-processing injection
    assertThat(bSecondDefinition).isExactlyInstanceOf(GenericBeanDefinition.class);
}
