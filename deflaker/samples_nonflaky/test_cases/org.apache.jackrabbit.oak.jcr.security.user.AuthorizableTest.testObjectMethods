@Test
public void testObjectMethods() throws Exception {
    final Authorizable user = getTestUser(superuser);
    Authorizable user2 = getTestUser(superuser);
    assertEquals(user, user2);
    assertEquals(user.hashCode(), user2.hashCode());
    Set<Authorizable> s = new HashSet<Authorizable>();
    s.add(user);
    assertFalse(s.add(user2));
    Authorizable user3 = new Authorizable() {

        @NotNull
        public String getID() throws RepositoryException {
            return user.getID();
        }

        public boolean isGroup() {
            return user.isGroup();
        }

        @NotNull
        public Principal getPrincipal() throws RepositoryException {
            return user.getPrincipal();
        }

        @NotNull
        public Iterator<Group> declaredMemberOf() throws RepositoryException {
            return user.declaredMemberOf();
        }

        @NotNull
        public Iterator<Group> memberOf() throws RepositoryException {
            return user.memberOf();
        }

        public void remove() throws RepositoryException {
            user.remove();
        }

        @NotNull
        public Iterator<String> getPropertyNames() throws RepositoryException {
            return user.getPropertyNames();
        }

        @NotNull
        public Iterator<String> getPropertyNames(@NotNull String relPath) throws RepositoryException {
            return user.getPropertyNames(relPath);
        }

        public boolean hasProperty(@NotNull String name) throws RepositoryException {
            return user.hasProperty(name);
        }

        public void setProperty(@NotNull String name, Value value) throws RepositoryException {
            user.setProperty(name, value);
        }

        public void setProperty(@NotNull String name, Value[] values) throws RepositoryException {
            user.setProperty(name, values);
        }

        public Value[] getProperty(@NotNull String name) throws RepositoryException {
            return user.getProperty(name);
        }

        public boolean removeProperty(@NotNull String name) throws RepositoryException {
            return user.removeProperty(name);
        }

        @NotNull
        public String getPath() throws RepositoryException {
            return user.getPath();
        }
    };
    assertFalse(user.equals(user3));
    assertTrue(s.add(user3));
}
