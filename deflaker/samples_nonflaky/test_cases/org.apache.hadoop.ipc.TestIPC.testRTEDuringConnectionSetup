/**
 * Test that, if a RuntimeException is thrown after creating a socket
 * but before successfully connecting to the IPC server, that the
 * failure is handled properly. This is a regression test for
 * HADOOP-7428.
 */
@Test(timeout = 60000)
public void testRTEDuringConnectionSetup() throws IOException {
    // Set up a socket factory which returns sockets which
    // throw an RTE when setSoTimeout is called.
    SocketFactory spyFactory = spy(NetUtils.getDefaultSocketFactory(conf));
    Mockito.doAnswer(new Answer<Socket>() {

        @Override
        public Socket answer(InvocationOnMock invocation) {
            return new MockSocket();
        }
    }).when(spyFactory).createSocket();
    Server server = new TestServer(1, true);
    Client client = new Client(LongWritable.class, conf, spyFactory);
    server.start();
    try {
        // Call should fail due to injected exception.
        InetSocketAddress address = NetUtils.getConnectAddress(server);
        try {
            call(client, RANDOM.nextLong(), address, conf);
            fail("Expected an exception to have been thrown");
        } catch (Exception e) {
            LOG.info("caught expected exception", e);
            assertTrue(StringUtils.stringifyException(e).contains("Injected fault"));
        }
        // Resetting to the normal socket behavior should succeed
        // (i.e. it should not have cached a half-constructed connection)
        Mockito.reset(spyFactory);
        call(client, RANDOM.nextLong(), address, conf);
    } finally {
        client.stop();
        server.stop();
    }
}
