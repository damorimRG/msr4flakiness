@Test
public void lowerSweepLimit() throws Exception {
    ns.dispose();
    // restart with a document store that tracks queries
    final Map<String, Long> queries = Maps.newHashMap();
    store = new FailingDocumentStore(new MemoryDocumentStore() {

        @NotNull
        @Override
        public <T extends Document> List<T> query(Collection<T> collection, String fromKey, String toKey, String indexedProperty, long startValue, int limit) {
            queries.put(indexedProperty, startValue);
            return super.query(collection, fromKey, toKey, indexedProperty, startValue, limit);
        }
    });
    ns = createDocumentNodeStore(0);
    createUncommittedChanges();
    // get the revision of the uncommitted changes
    Revision r = null;
    for (NodeDocument d : Utils.getAllDocuments(store)) {
        if (d.getPath().toString().startsWith("/node-")) {
            r = Iterables.getFirst(d.getAllChanges(), null);
            break;
        }
    }
    assertNotNull(r);
    // after a new head and a background sweep, the
    // uncommitted changes must be cleaned up
    NodeBuilder builder = ns.getRoot().builder();
    builder.child("foo");
    merge(ns, builder);
    queries.clear();
    ns.runBackgroundOperations();
    assertCleanStore();
    // sweeper must have looked at most recently modified documents
    Long modified = queries.get(NodeDocument.MODIFIED_IN_SECS);
    assertNotNull(modified);
    long startValue = NodeDocument.getModifiedInSecs(r.getTimestamp());
    assertEquals(startValue, modified.longValue());
}
