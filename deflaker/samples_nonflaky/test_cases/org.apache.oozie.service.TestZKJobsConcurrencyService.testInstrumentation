public void testInstrumentation() throws Exception {
    ZKJobsConcurrencyService zkjcs = new ZKJobsConcurrencyService();
    // We'll use some DummyZKXOozies here to pretend to be other Oozie servers that will influence the instrumentation
    // once they are running in that the there will be other Oozie "servers"
    DummyZKOozie dummyOozie = null;
    DummyZKOozie dummyOozie2 = null;
    Instrumentation instr = new Instrumentation();
    try {
        zkjcs.init(Services.get());
        zkjcs.instrument(instr);
        String servers = ZK_ID + "=" + ConfigUtils.getOozieURL(false);
        assertEquals(servers, instr.getVariables().get("oozie").get("servers").getValue());
        dummyOozie = new DummyZKOozie("0000", "http://blah1");
        servers = ZK_ID + "=" + ConfigUtils.getOozieURL(false) + ",0000=http://blah1";
        assertEquals(servers, instr.getVariables().get("oozie").get("servers").getValue());
        dummyOozie2 = new DummyZKOozie("z", "http://blah2");
        servers = ZK_ID + "=" + ConfigUtils.getOozieURL(false) + ",0000=http://blah1" + ",z=http://blah2";
        assertEquals(servers, instr.getVariables().get("oozie").get("servers").getValue());
        dummyOozie.teardown();
        servers = ZK_ID + "=" + ConfigUtils.getOozieURL(false) + ",z=http://blah2";
        assertEquals(servers, instr.getVariables().get("oozie").get("servers").getValue());
        dummyOozie2.teardown();
        servers = ZK_ID + "=" + ConfigUtils.getOozieURL(false);
        assertEquals(servers, instr.getVariables().get("oozie").get("servers").getValue());
    } finally {
        zkjcs.destroy();
        if (dummyOozie != null) {
            dummyOozie.teardown();
        }
        if (dummyOozie2 != null) {
            dummyOozie2.teardown();
        }
    }
}
