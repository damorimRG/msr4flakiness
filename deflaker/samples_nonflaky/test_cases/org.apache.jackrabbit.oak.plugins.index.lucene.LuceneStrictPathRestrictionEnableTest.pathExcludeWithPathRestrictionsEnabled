@Test
public void pathExcludeWithPathRestrictionsEnabled() throws Exception {
    Tree idx = createIndex("test1", of("propa", "propb"));
    idx.setProperty(createProperty(PROP_EXCLUDED_PATHS, of("/test/a"), Type.STRINGS));
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    test.addChild("a").setProperty("propa", 10);
    test.addChild("a").addChild("b").setProperty("propa", 10);
    test.addChild("c").setProperty("propa", 10);
    test.addChild("c").addChild("d").setProperty("propa", 10);
    root.commit();
    assertFalse(explain("select [jcr:path] from [nt:base] where [propa] = 10").contains("lucene:test1"));
    assertThat(explain("select [jcr:path] from [nt:base] where [propa] = 10 and isDescendantNode('/test/c')"), containsString("lucene:test1"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] = 10 and isDescendantNode('/test/c')", asList("/test/c/d"));
    // Make some change and then check
    Tree testc = root.getTree("/").getChild("test").getChild("c");
    testc.addChild("e").addChild("f").setProperty("propa", 10);
    root.commit();
    assertQuery("select [jcr:path] from [nt:base] where [propa] = 10 and isDescendantNode('/test/c')", asList("/test/c/d", "/test/c/e/f"));
    assertThat(explain("select [jcr:path] from [nt:base] where [propa] = 10 and isDescendantNode('/test/c') and not(isDescendantNode('/test/c/e'))"), containsString("lucene:test1"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] = 10 and isDescendantNode('/test/c') and not(isDescendantNode('/test/c/e'))", asList("/test/c/d"));
}
