@Test
public void testGetSessions() throws Exception {
    Mockito.when(impl.connectSession(ArgumentMatchers.anyString(), ArgumentMatchers.<Timeout>any(), ArgumentMatchers.<FutureCallback<IOSession>>any())).thenReturn(connectFuture);
    Mockito.doAnswer(new Answer() {

        @Override
        public Object answer(final InvocationOnMock invocation) throws Throwable {
            final Callback<Boolean> callback = invocation.getArgument(1);
            callback.execute(true);
            return null;
        }
    }).when(impl).validateSession(ArgumentMatchers.<IOSession>any(), ArgumentMatchers.<Callback<Boolean>>any());
    Mockito.when(ioSession1.isOpen()).thenReturn(true);
    final Future<IOSession> future1 = impl.getSession("somehost", Timeout.ofSeconds(123L), null);
    Assert.assertThat(future1, CoreMatchers.notNullValue());
    Assert.assertThat(future1.isDone(), CoreMatchers.equalTo(false));
    Assert.assertThat(impl.getRoutes(), CoreMatchers.hasItem("somehost"));
    Mockito.verify(impl).connectSession(ArgumentMatchers.eq("somehost"), ArgumentMatchers.eq(Timeout.ofSeconds(123L)), ArgumentMatchers.<FutureCallback<IOSession>>any());
    final Future<IOSession> future2 = impl.getSession("somehost", Timeout.ofSeconds(123L), null);
    Assert.assertThat(future2, CoreMatchers.notNullValue());
    Assert.assertThat(future2.isDone(), CoreMatchers.equalTo(false));
    Assert.assertThat(impl.getRoutes(), CoreMatchers.hasItem("somehost"));
    Mockito.verify(impl, Mockito.times(1)).connectSession(ArgumentMatchers.eq("somehost"), ArgumentMatchers.<Timeout>any(), ArgumentMatchers.argThat(new ArgumentMatcher<FutureCallback<IOSession>>() {

        @Override
        public boolean matches(final FutureCallback<IOSession> callback) {
            callback.completed(ioSession1);
            return true;
        }
    }));
    Assert.assertThat(future1.isDone(), CoreMatchers.equalTo(true));
    Assert.assertThat(future1.get(), CoreMatchers.sameInstance(ioSession1));
    Assert.assertThat(future2.isDone(), CoreMatchers.equalTo(true));
    Assert.assertThat(future2.get(), CoreMatchers.sameInstance(ioSession1));
    Mockito.verify(impl, Mockito.times(2)).validateSession(ArgumentMatchers.<IOSession>any(), ArgumentMatchers.<Callback<Boolean>>any());
    final Future<IOSession> future3 = impl.getSession("somehost", Timeout.ofSeconds(123L), null);
    Mockito.verify(impl, Mockito.times(1)).connectSession(ArgumentMatchers.eq("somehost"), ArgumentMatchers.<Timeout>any(), ArgumentMatchers.<FutureCallback<IOSession>>any());
    Mockito.verify(impl, Mockito.times(3)).validateSession(ArgumentMatchers.<IOSession>any(), ArgumentMatchers.<Callback<Boolean>>any());
    Assert.assertThat(future3.isDone(), CoreMatchers.equalTo(true));
    Assert.assertThat(future3.get(), CoreMatchers.sameInstance(ioSession1));
}
