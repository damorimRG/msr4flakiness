/**
 * OAK-3587 test simulates a timeout while trying to create a checkpoint,
 * then releases the lock and tries again
 */
@Test
public void testShortWait() throws Exception {
    MemoryStore ms = new MemoryStore();
    System.setProperty("oak.checkpoints.lockWaitTime", "1");
    StatisticsProvider statsProvider = StatisticsProvider.NOOP;
    SegmentNodeStoreStats stats = new SegmentNodeStoreStats(statsProvider);
    final LockBasedScheduler scheduler = LockBasedScheduler.builder(ms.getRevisions(), ms.getReader(), stats).build();
    final Semaphore semaphore = new Semaphore(0);
    final AtomicBoolean blocking = new AtomicBoolean(true);
    final Callable<Boolean> block = new Callable<Boolean>() {

        @Override
        public Boolean call() {
            while (blocking.get()) {
                if (semaphore.availablePermits() == 0) {
                    semaphore.release();
                }
            }
            return true;
        }
    };
    Thread background = new Thread() {

        @Override
        public void run() {
            try {
                Commit commit = createBlockingCommit(scheduler, "foo", "bar", block);
                scheduler.schedule(commit);
            } catch (Exception e) {
            // 
            }
        }
    };
    background.start();
    semaphore.acquire();
    String cp0 = scheduler.checkpoint(10, Collections.<String, String>emptyMap());
    assertNull(retrieveCheckpoint(scheduler, cp0));
    blocking.set(false);
    String cp1 = scheduler.checkpoint(10, Collections.<String, String>emptyMap());
    assertNotNull(retrieveCheckpoint(scheduler, cp1));
}
