public void testDisableErrorLogOverWS() throws Exception {
    Properties props = new Properties();
    // Test missing logfile
    props.setProperty("log4j.appender.oozieError.File", "");
    File propsFile = new File(getTestCaseConfDir(), "test-disable-log-over-ws-log4j.properties");
    FileOutputStream fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    setSystemProperty(XLogService.LOG4J_FILE, propsFile.getName());
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test non-absolute path for logfile
    props.setProperty("log4j.appender.oozieError.File", "oozie-error.log");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test missing appender class
    props.setProperty("log4j.appender.oozieError.File", "${oozie.log.dir}/oozie-error.log");
    props.setProperty("log4j.appender.oozieError", "");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test appender class not DailyRollingFileAppender or RollingFileAppender
    props.setProperty("log4j.appender.oozieError", "org.blah.blah");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test DailyRollingFileAppender but missing DatePattern
    props.setProperty("log4j.appender.oozieError", "org.apache.log4j.DailyRollingFileAppender");
    props.setProperty("log4j.appender.oozieError.DatePattern", "");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test DailyRollingFileAppender but DatePattern that doesn't end with 'HH' or 'dd'
    props.setProperty("log4j.appender.oozieError.DatePattern", "'.'yyyy-MM");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test DailyRollingFileAppender with everything correct (dd)
    props.setProperty("log4j.appender.oozieError.DatePattern", "'.'yyyy-MM-dd");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertFalse(doerrorStreamDisabledCheckWithServices());
    // Test DailyRollingFileAppender with everything correct (HH)
    props.setProperty("log4j.appender.oozieError.DatePattern", "'.'yyyy-MM-dd-HH");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertFalse(doerrorStreamDisabledCheckWithServices());
    // Test RollingFileAppender but missing FileNamePattern
    props.setProperty("log4j.appender.oozieError", "org.apache.log4j.rolling.RollingFileAppender");
    props.setProperty("log4j.appender.oozieError.RollingPolicy.FileNamePattern", "");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test RollingFileAppender but FileNamePattern with incorrect ending
    props.setProperty("log4j.appender.oozieError.RollingPolicy.FileNamePattern", "${oozie.log.dir}/oozie-error.log-blah");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test RollingFileAppender but FileNamePattern with incorrect beginning
    props.setProperty("log4j.appender.oozieError.RollingPolicy.FileNamePattern", "${oozie.log.dir}/blah.log-%d{yyyy-MM-dd-HH}");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertTrue(doerrorStreamDisabledCheckWithServices());
    // Test RollingFileAppender with everything correct
    props.setProperty("log4j.appender.oozieError.RollingPolicy.FileNamePattern", "${oozie.log.dir}/oozie-error.log-%d{yyyy-MM-dd-HH}");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertFalse(doerrorStreamDisabledCheckWithServices());
    // Test RollingFileAppender with everything correct (gz)
    props.setProperty("log4j.appender.oozieError.RollingPolicy.FileNamePattern", "${oozie.log.dir}/oozie-error.log-%d{yyyy-MM-dd-HH}.gz");
    fos = new FileOutputStream(propsFile);
    props.store(fos, "");
    assertFalse(doerrorStreamDisabledCheckWithServices());
}
