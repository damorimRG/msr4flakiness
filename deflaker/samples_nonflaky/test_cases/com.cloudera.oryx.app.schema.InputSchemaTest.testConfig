@Test
public void testConfig() {
    Map<String, Object> overlayConfig = new HashMap<>();
    overlayConfig.put("oryx.input-schema.feature-names", "[\"foo\",\"bar\",\"baz\",\"bing\"]");
    overlayConfig.put("oryx.input-schema.id-features", "[\"baz\"]");
    overlayConfig.put("oryx.input-schema.ignored-features", "[\"foo\"]");
    overlayConfig.put("oryx.input-schema.categorical-features", "[\"bar\"]");
    overlayConfig.put("oryx.input-schema.target-feature", "\"bar\"");
    Config config = ConfigUtils.overlayOn(overlayConfig, ConfigUtils.getDefault());
    InputSchema schema = new InputSchema(config);
    assertEquals(4, schema.getNumFeatures());
    assertEquals(1, schema.getNumPredictors());
    assertTrue(schema.getFeatureNames().containsAll(Arrays.asList("foo", "bar", "baz", "bing")));
    for (int i = 0; i < 4; i++) {
        assertEquals(i == 2, schema.isID(i));
        assertEquals(i == 2, schema.isID(schema.getFeatureNames().get(i)));
    }
    for (int i = 0; i < 4; i++) {
        assertEquals(i == 1 || i == 3, schema.isActive(i));
        assertEquals(i == 1 || i == 3, schema.isActive(schema.getFeatureNames().get(i)));
    }
    for (int i = 0; i < 4; i++) {
        assertEquals(i == 3, schema.isNumeric(i));
        assertEquals(i == 3, schema.isNumeric(schema.getFeatureNames().get(i)));
    }
    for (int i = 0; i < 4; i++) {
        assertEquals(i == 1, schema.isCategorical(i));
        assertEquals(i == 1, schema.isCategorical(schema.getFeatureNames().get(i)));
    }
    for (int i = 0; i < 4; i++) {
        assertEquals(i == 1, schema.isTarget(i));
        assertEquals(i == 1, schema.isTarget(schema.getFeatureNames().get(i)));
    }
    assertTrue(schema.hasTarget());
    assertEquals("bar", schema.getTargetFeature());
    assertEquals(1, schema.getTargetFeatureIndex());
}
