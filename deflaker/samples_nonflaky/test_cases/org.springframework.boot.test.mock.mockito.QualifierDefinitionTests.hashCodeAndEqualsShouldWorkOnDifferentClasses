@Test
void hashCodeAndEqualsShouldWorkOnDifferentClasses() {
    QualifierDefinition directQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "directQualifier"));
    QualifierDefinition directQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "directQualifier"));
    QualifierDefinition differentDirectQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "differentDirectQualifier"));
    QualifierDefinition differentDirectQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "differentDirectQualifier"));
    QualifierDefinition customQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "customQualifier"));
    QualifierDefinition customQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "customQualifier"));
    assertThat(directQualifier1.hashCode()).isEqualTo(directQualifier2.hashCode());
    assertThat(differentDirectQualifier1.hashCode()).isEqualTo(differentDirectQualifier2.hashCode());
    assertThat(customQualifier1.hashCode()).isEqualTo(customQualifier2.hashCode());
    assertThat(differentDirectQualifier1).isEqualTo(differentDirectQualifier1).isEqualTo(differentDirectQualifier2).isNotEqualTo(directQualifier2);
    assertThat(directQualifier1).isEqualTo(directQualifier1).isEqualTo(directQualifier2).isNotEqualTo(differentDirectQualifier1);
    assertThat(customQualifier1).isEqualTo(customQualifier1).isEqualTo(customQualifier2).isNotEqualTo(differentDirectQualifier1);
}
