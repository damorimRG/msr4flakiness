@Test(timeout = 30000)
public void testReadLink() throws IOException {
    requireWinutils();
    // Create TEST_DIR\dir1\file1.txt
    // 
    File dir1 = new File(TEST_DIR, "dir1");
    assertTrue(dir1.mkdirs());
    File file1 = new File(dir1, "file1.txt");
    assertTrue(file1.createNewFile());
    File dirLink = new File(TEST_DIR, "dlink");
    File fileLink = new File(TEST_DIR, "flink");
    // Next create a directory symlink to dir1 and a file
    // symlink to file1.txt.
    // 
    Shell.execCommand(winutils, "symlink", dirLink.toString(), dir1.toString());
    Shell.execCommand(winutils, "symlink", fileLink.toString(), file1.toString());
    // Read back the two links and ensure we get what we expected.
    // 
    String readLinkOutput = Shell.execCommand(winutils, "readlink", dirLink.toString());
    assertThat(readLinkOutput, equalTo(dir1.toString()));
    readLinkOutput = Shell.execCommand(winutils, "readlink", fileLink.toString());
    assertThat(readLinkOutput, equalTo(file1.toString()));
    // Try a few invalid inputs and verify we get an ExitCodeException for each.
    // 
    try {
        // No link name specified.
        // 
        Shell.execCommand(winutils, "readlink", "");
        fail("Failed to get Shell.ExitCodeException when reading bad symlink");
    } catch (Shell.ExitCodeException ece) {
        assertThat(ece.getExitCode(), is(1));
    }
    try {
        // Bad link name.
        // 
        Shell.execCommand(winutils, "readlink", "ThereIsNoSuchLink");
        fail("Failed to get Shell.ExitCodeException when reading bad symlink");
    } catch (Shell.ExitCodeException ece) {
        assertThat(ece.getExitCode(), is(1));
    }
    try {
        // Non-symlink directory target.
        // 
        Shell.execCommand(winutils, "readlink", dir1.toString());
        fail("Failed to get Shell.ExitCodeException when reading bad symlink");
    } catch (Shell.ExitCodeException ece) {
        assertThat(ece.getExitCode(), is(1));
    }
    try {
        // Non-symlink file target.
        // 
        Shell.execCommand(winutils, "readlink", file1.toString());
        fail("Failed to get Shell.ExitCodeException when reading bad symlink");
    } catch (Shell.ExitCodeException ece) {
        assertThat(ece.getExitCode(), is(1));
    }
    try {
        // Too many parameters.
        // 
        Shell.execCommand(winutils, "readlink", "a", "b");
        fail("Failed to get Shell.ExitCodeException with bad parameters");
    } catch (Shell.ExitCodeException ece) {
        assertThat(ece.getExitCode(), is(1));
    }
}
