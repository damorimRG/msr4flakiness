@Test
public void testPriorityHandling() {
    asyncExecutor = createExecutor(DEFAULT_ENABLE_CONCURRENCY_CHECK, 100, DEFAULT_MAXWAIT, 100, AWAIT_TERMINATION_TIMEOUT_SECONDS);
    doAnswer(new Answer<Void>() {

        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            CallableWrapper<?> wrapper = (CallableWrapper<?>) invocation.getArguments()[0];
            priorityBlockingQueue.add(wrapper);
            return null;
        }
    }).when(executor).execute(any(Runnable.class));
    List<CallableWrapper<?>> mockedWrappers = new ArrayList<>();
    for (int i = 0; i < 100; i++) {
        CallableWrapper<?> wrapper = mock(CallableWrapper.class, Mockito.RETURNS_DEEP_STUBS);
        when(wrapper.getPriority()).thenReturn(i);
        when(wrapper.getInitialDelay()).thenReturn(0L);
        when(wrapper.filterDuplicates()).thenReturn(true);
        when(wrapper.getElement().getName()).thenReturn(String.valueOf(i));
        mockedWrappers.add(wrapper);
    }
    for (CallableWrapper<?> callable : mockedWrappers) {
        asyncExecutor.queue(callable, false);
    }
    CallableWrapper<?> firstElement = priorityBlockingQueue.poll();
    CallableWrapper<?> lastElement = null;
    CallableWrapper<?> previous = null;
    do {
        previous = lastElement;
        lastElement = priorityBlockingQueue.poll();
    } while (lastElement != null);
    lastElement = previous;
    assertEquals("Priority - first element", 99, firstElement.getPriority());
    assertEquals("Priority - last element", 0, lastElement.getPriority());
}
