@Test
public void testCollect() throws Exception {
    NodeBuilder b1 = store.getRoot().builder();
    List<ReferencedBlob> blobs = Lists.newArrayList();
    b1.child("x").child("y");
    store.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    // 1. Set some single value Binary property
    for (int i = 0; i < 2; i++) {
        b1 = store.getRoot().builder();
        Blob b = store.createBlob(randomStream(i, 4096));
        b1.child("x").child("y").setProperty("b" + i, b);
        blobs.add(new ReferencedBlob(b, "/x/y"));
        store.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    }
    // 2. Set some multi value property
    PropertyBuilder<Blob> p1 = PropertyBuilder.array(Type.BINARY).setName("barr");
    for (int i = 0; i < 2; i++) {
        Blob b = store.createBlob(randomStream(i, 4096));
        p1.addValue(b);
        blobs.add(new ReferencedBlob(b, "/x/y"));
    }
    b1 = store.getRoot().builder();
    b1.child("x").child("y").setProperty(p1.getPropertyState());
    store.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    // 3. Create some new rev for the property b1 and b2
    for (int i = 0; i < 2; i++) {
        b1 = store.getRoot().builder();
        // Change the see to create diff binary
        Blob b = store.createBlob(randomStream(i + 1, 4096));
        b1.child("x").child("y").setProperty("b" + i, b);
        blobs.add(new ReferencedBlob(b, "/x/y"));
        store.merge(b1, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    }
    NodeDocument doc = store.getDocumentStore().find(Collection.NODES, Utils.getIdFromPath("/x/y"));
    List<ReferencedBlob> collectedBlobs = Lists.newArrayList();
    blobCollector.collect(doc, collectedBlobs);
    assertEquals(blobs.size(), collectedBlobs.size());
    assertEquals(new HashSet<ReferencedBlob>(blobs), new HashSet<ReferencedBlob>(collectedBlobs));
}
