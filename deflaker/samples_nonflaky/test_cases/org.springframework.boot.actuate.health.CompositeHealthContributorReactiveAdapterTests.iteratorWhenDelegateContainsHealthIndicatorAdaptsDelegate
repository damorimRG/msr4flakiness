@Test
void iteratorWhenDelegateContainsHealthIndicatorAdaptsDelegate() {
    HealthIndicator indicator = () -> Health.up().withDetail("spring", "boot").build();
    CompositeHealthContributor delegate = CompositeHealthContributor.fromMap(Collections.singletonMap("test", indicator));
    CompositeHealthContributorReactiveAdapter adapter = new CompositeHealthContributorReactiveAdapter(delegate);
    Iterator<NamedContributor<ReactiveHealthContributor>> iterator = adapter.iterator();
    assertThat(iterator.hasNext()).isTrue();
    NamedContributor<ReactiveHealthContributor> adapted = iterator.next();
    assertThat(adapted.getName()).isEqualTo("test");
    assertThat(adapted.getContributor()).isInstanceOf(ReactiveHealthIndicator.class);
    Health health = ((ReactiveHealthIndicator) adapted.getContributor()).getHealth(true).block();
    assertThat(health.getStatus()).isEqualTo(Status.UP);
    assertThat(health.getDetails()).containsEntry("spring", "boot");
}
