@Test
public void specificInstanceMethodReference() throws Exception {
    Calculator calc = new Calculator(1L);
    Function1<Long, String> lambda = calc::l2s;
    LambdaInfo lambdaInfo = Lambdas.reflect(lambda);
    assertThat(lambdaInfo.getKind(), is(Kind.SPECIFIC_INSTANCE_METHOD_REFERENCE));
    SerializedLambda serializedLambda = lambdaInfo.getSerializedLambda();
    assertThat(serializedLambda.getFunctionalInterfaceMethodName(), is("apply"));
    assertThat(serializedLambda.getImplClass().replace('/', '.').replace('$', '.'), is(Calculator.class.getCanonicalName()));
    assertThat(serializedLambda.getImplMethodName(), is("l2s"));
    assertThat(serializedLambda.getImplMethodSignature(), is("(Ljava/lang/Long;)Ljava/lang/String;"));
    // captured "this"
    assertThat(serializedLambda.getCapturedArgCount(), is(1));
    // captured "this"
    assertThat(serializedLambda.getCapturedArg(0), is(calc));
    // verify it can be dynamically invoked
    String value = (String) lambdaInfo.getFunctionalMethod().invoke(lambda, 1L);
    // String value = (String)lambda.getClass().getMethod("apply", Long.class).invoke(calc, 1L);
    assertThat(value, is("2"));
}
