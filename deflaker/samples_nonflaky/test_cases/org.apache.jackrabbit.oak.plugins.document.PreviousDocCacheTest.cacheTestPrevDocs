@Test
public void cacheTestPrevDocs() throws Exception {
    DocumentNodeStore ns = mk.getNodeStore();
    DocumentStore docStore = ns.getDocumentStore();
    final int SPLIT_THRESHOLD = 10;
    NodeBuilder b;
    // Set property 110 times. Split at each 10. This should lead to 11 leaf prev docs and 1 intermediate prev doc.
    for (int j = 0; j <= SPLIT_THRESHOLD; j++) {
        for (int i = 0; i < SPLIT_THRESHOLD; i++) {
            b = ns.getRoot().builder();
            b.setProperty("foo", "node-" + j + "-" + i);
            merge(ns, b);
        }
        splitDocs(ns, SPLIT_THRESHOLD);
    }
    CacheStats nodesCache = null;
    CacheStats prevDocsCache = null;
    for (CacheStats cacheStats : docStore.getCacheStats()) {
        if ("Document-Documents".equals(cacheStats.getName())) {
            nodesCache = cacheStats;
        } else if ("Document-PrevDocuments".equals(cacheStats.getName())) {
            prevDocsCache = cacheStats;
        }
    }
    assertNotNull("Nodes cache must not be null", nodesCache);
    assertNotNull("Prev docs cache must not be null", prevDocsCache);
    validateFullyLoadedCache(docStore, SPLIT_THRESHOLD, nodesCache, prevDocsCache);
    docStore.invalidateCache();
    assertEquals("No entries expected in nodes cache", 0, nodesCache.getElementCount());
    assertEquals("No entries expected in prev docs cache", 0, prevDocsCache.getElementCount());
    NodeDocument doc = docStore.find(NODES, "0:/");
    assertEquals("Only main doc entry expected in nodes cache", 1, nodesCache.getElementCount());
    assertEquals("No entries expected in prev docs cache", 0, prevDocsCache.getElementCount());
    Iterators.size(doc.getAllPreviousDocs());
    validateFullyLoadedCache(docStore, SPLIT_THRESHOLD, nodesCache, prevDocsCache);
}
