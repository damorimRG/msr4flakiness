@Test
public void testWithAnnotations() throws Exception {
    final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
    checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
    checkConfig.addAttribute("tokens", "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, " + "LITERAL_IF, LITERAL_ELSE, CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, " + "LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT");
    final String[] expected = { "8:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77), "11:65: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 65), "22:46: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 46), "26:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31), "29:35: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 35), "32:36: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 36), "38:73: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 73), "40:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37), "45:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58), "47:88: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 88), "50:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30), "53:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30), "56:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29), "60:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38), "61:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31), "67:62: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 62), "76:28: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 28), "78:21: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 21), "80:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20), "82:14: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 14), "93:26: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 26), "94:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20), "103:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29), "103:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38), "107:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29), "107:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38), "111:40: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 40), "111:88: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 88), "114:18: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 18), "118:23: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 23), "121:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37), "123:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30), "127:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77), "136:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9), "138:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9), "138:33: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 33), "150:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75), "151:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58), "151:74: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 74), "152:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58), "153:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58), "153:74: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 74), "159:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37), "166:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37), "181:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9), "188:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9), "188:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13), "197:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9), "197:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10), "201:54: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 54), "201:55: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 55), "204:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75), "204:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76), "204:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77), "208:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76), "216:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27), "220:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31), "223:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5), "225:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29), "228:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5), "231:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30), "234:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9) };
    verify(checkConfig, getPath("InputRightCurlyAnnotations.java"), expected);
}
