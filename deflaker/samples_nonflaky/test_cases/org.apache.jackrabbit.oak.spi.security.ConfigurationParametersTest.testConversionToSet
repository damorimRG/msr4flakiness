@Test
public void testConversionToSet() {
    String[] stringArray = new String[] { "a", "b" };
    Set<String> stringSet = ImmutableSet.copyOf(stringArray);
    TestObject[] testObjectArray = new TestObject[] { new TestObject("a"), new TestObject("b") };
    Set<TestObject> testObjectSet = ImmutableSet.copyOf(testObjectArray);
    // map of config value (key) and expected result set.
    Map<Object, Set<?>> configValues = new HashMap<>();
    configValues.put("a", ImmutableSet.of("a"));
    configValues.put(stringArray, stringSet);
    configValues.put(stringSet, stringSet);
    configValues.put(testObjectArray, testObjectSet);
    configValues.put(testObjectSet, testObjectSet);
    configValues.put(new String[0], Collections.<String>emptySet());
    configValues.put(new HashSet<>(), Collections.emptySet());
    configValues.put(ImmutableSet.of(), Collections.emptySet());
    configValues.put(new ArrayList<>(), Collections.emptySet());
    configValues.put(ConfigurationParameters.EMPTY, Collections.<String>emptySet());
    Set<String> defaultStrings = ImmutableSet.of("abc", "def", "ghi");
    Set<TestObject> defaultObjects = ImmutableSet.of(new TestObject("abc"), new TestObject("def"));
    for (Object value : configValues.keySet()) {
        ConfigurationParameters config;
        if (value instanceof ConfigurationParameters) {
            config = ConfigurationParameters.of((ConfigurationParameters) value);
        } else {
            config = ConfigurationParameters.of("key", value);
        }
        Set<?> expected = configValues.get(value);
        assertEquals(expected, config.getConfigValue("key", Collections.emptySet()));
        assertEquals(expected, config.getConfigValue("key", Collections.<String>emptySet()));
        assertEquals(expected, config.getConfigValue("key", ImmutableSet.of()));
        assertEquals(expected, config.getConfigValue("key", Collections.emptySet(), Set.class));
        assertEquals(expected, config.getConfigValue("key", Collections.<String>emptySet(), Set.class));
        assertEquals(expected, config.getConfigValue("key", ImmutableSet.of(), Set.class));
        // test with default values
        if (!config.containsKey("key")) {
            assertEquals(defaultStrings, config.getConfigValue("key", defaultStrings, Set.class));
            assertEquals(defaultObjects, config.getConfigValue("key", defaultObjects, Set.class));
            assertEquals(null, config.getConfigValue("key", null, Set.class));
            assertEquals(defaultStrings, config.getConfigValue("key", defaultStrings));
            assertEquals(defaultObjects, config.getConfigValue("key", defaultObjects));
        } else {
            assertEquals(expected, config.getConfigValue("key", defaultStrings, Set.class));
            assertEquals(expected, config.getConfigValue("key", defaultObjects, Set.class));
            assertEquals(expected, config.getConfigValue("key", null, Set.class));
            assertEquals(expected, config.getConfigValue("key", defaultStrings));
            assertEquals(expected, config.getConfigValue("key", defaultObjects));
        }
        // non existing kez with default values
        assertEquals(defaultStrings, config.getConfigValue("nonexisting", defaultStrings));
        assertEquals(defaultStrings, config.getConfigValue("nonexisting", defaultStrings, Set.class));
        assertEquals(defaultObjects, config.getConfigValue("nonexisting", defaultObjects));
        assertEquals(defaultObjects, config.getConfigValue("nonexisting", defaultObjects, Set.class));
    }
}
