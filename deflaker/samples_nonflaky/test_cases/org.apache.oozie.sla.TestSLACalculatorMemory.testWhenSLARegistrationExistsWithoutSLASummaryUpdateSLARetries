public void testWhenSLARegistrationExistsWithoutSLASummaryUpdateSLARetries() throws Exception {
    final SLACalculatorMemory slaCalculatorMemory = new SLACalculatorMemory();
    slaCalculatorMemory.init(Services.get().get(ConfigurationService.class).getConf());
    final String jobId = "job-1-W";
    final SLARegistrationBean slaRegistration = _createSLARegistration(jobId, AppType.WORKFLOW_JOB);
    slaCalculatorMemory.addRegistration(jobId, slaRegistration);
    updateJobSlaFailing(slaCalculatorMemory, jobId, new Runnable() {

        @Override
        public void run() {
            try {
                Assert.assertNotNull("after first update, SLACalcStatus should still be present", slaCalculatorMemory.get(slaRegistration.getId()));
                Assert.assertEquals("updating SLA_REGISTRATION should have been failed", slaRegistration, slaCalculatorMemory.get(jobId).getSLARegistrationBean());
                Assert.assertEquals("SLACalcStatus.retryCount should have been increased", 1, slaCalculatorMemory.get(jobId).getRetryCount());
            } catch (JPAExecutorException ignored) {
            }
        }
    });
    updateJobSlaFailing(slaCalculatorMemory, jobId, new Runnable() {

        @Override
        public void run() {
            try {
                Assert.assertNotNull("after second update, SLACalcStatus should still be present", slaCalculatorMemory.get(slaRegistration.getId()));
                Assert.assertEquals("updating SLA_REGISTRATION should have been failed", slaRegistration, slaCalculatorMemory.get(jobId).getSLARegistrationBean());
                Assert.assertEquals("SLACalcStatus.retryCount should have been increased", 2, slaCalculatorMemory.get(jobId).getRetryCount());
            } catch (JPAExecutorException ignored) {
            }
        }
    });
    updateJobSlaFailing(slaCalculatorMemory, jobId, new Runnable() {

        @Override
        public void run() {
            try {
                Assert.assertNotNull("after third update, SLACalcStatus should still be present", slaCalculatorMemory.get(slaRegistration.getId()));
                Assert.assertEquals("updating SLA_REGISTRATION should have been failed", slaRegistration, slaCalculatorMemory.get(jobId).getSLARegistrationBean());
                Assert.assertEquals("SLACalcStatus.retryCount should have been increased", 3, slaCalculatorMemory.get(jobId).getRetryCount());
            } catch (JPAExecutorException ignored) {
            }
        }
    });
    updateJobSlaFailing(slaCalculatorMemory, jobId, new Runnable() {

        @Override
        public void run() {
            try {
                Assert.assertNull("after fourth update, SLACalcStatus should no more be present", slaCalculatorMemory.get(slaRegistration.getId()));
            } catch (JPAExecutorException ignored) {
            }
        }
    });
}
