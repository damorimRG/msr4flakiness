// OAK-7357
@Test
public void disableCoRCoW() throws Exception {
    // inject ds as OAK-7357 revealed ABD bean had a bug - which comes into play only with blob stores
    CachingFileDataStore ds = DataStoreUtils.createCachingFDS(folder.newFolder().getAbsolutePath(), folder.newFolder().getAbsolutePath());
    context.registerService(GarbageCollectableBlobStore.class, new DataStoreBlobStore(ds));
    // re-init service and inject references
    service = new LuceneIndexProviderService();
    MockOsgi.injectServices(service, context.bundleContext());
    Map<String, Object> config = getDefaultConfig();
    config.put("enableCopyOnReadSupport", false);
    config.put("enableCopyOnWriteSupport", false);
    // activation should work
    MockOsgi.activate(service, context.bundleContext(), config);
    // get lucene index provider
    LuceneIndexProvider lip = null;
    for (QueryIndexProvider qip : context.getServices(QueryIndexProvider.class, null)) {
        if (qip instanceof LuceneIndexProvider) {
            lip = (LuceneIndexProvider) qip;
            break;
        }
    }
    assertNotNull(lip);
    IndexTracker tracker = lip.getTracker();
    // access reader factory with reflection and implicitly assert that it's DefaultIndexReaderFactory
    Field readerFactorFld = IndexTracker.class.getDeclaredField("readerFactory");
    readerFactorFld.setAccessible(true);
    DefaultIndexReaderFactory readerFactory = (DefaultIndexReaderFactory) readerFactorFld.get(tracker);
    Field mipFld = DefaultIndexReaderFactory.class.getDeclaredField("mountInfoProvider");
    mipFld.setAccessible(true);
    // OAK-7408: LIPS was using default tracker ctor and hence reader factor used default mounts
    assertEquals("Reader factory not using configured MountInfoProvider", mip, mipFld.get(readerFactory));
    // de-activation should work
    MockOsgi.deactivate(service, context.bundleContext());
}
