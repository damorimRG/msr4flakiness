@Test
public void getBucketWithMaxKeysAndContinuationToken() throws Exception {
    final String bucket = "bucket-to-get-with-max-keys-and-token";
    createBucketRestCall(bucket);
    AlluxioURI uri = new AlluxioURI(AlluxioURI.SEPARATOR + bucket + AlluxioURI.SEPARATOR);
    // Verify the directory is created for the new bucket.
    Assert.assertTrue(mFileSystemMaster.listStatus(uri, ListStatusContext.defaults()).isEmpty());
    // Prepare a bucket with two objects:
    // - /file1
    // - /file2
    AlluxioURI file1 = new AlluxioURI(uri.getPath() + "/file1");
    mFileSystemMaster.createFile(file1, CreateFileContext.defaults());
    AlluxioURI file2 = new AlluxioURI(uri.getPath() + "/file2");
    mFileSystemMaster.createFile(file2, CreateFileContext.defaults());
    // Expected result, with max-keys = 1.
    List<URIStatus> objectsList = new ArrayList<>();
    objectsList.add(new URIStatus(mFileSystemMaster.getFileInfo(file1, GetStatusContext.defaults())));
    objectsList.add(new URIStatus(mFileSystemMaster.getFileInfo(file2, GetStatusContext.defaults())));
    String maxKeys = "1";
    String continuationToken = file1.getPath();
    ListBucketResult expected = new ListBucketResult(AlluxioURI.SEPARATOR + bucket, objectsList, ListBucketOptions.defaults().setMaxKeys("1").setContinuationToken(continuationToken));
    // Verify
    HashMap<String, String> maxKeysParam = new HashMap<>();
    maxKeysParam.put("max-keys", maxKeys);
    maxKeysParam.put("continuation-token", continuationToken);
    new TestCase(mHostname, mPort, S3_SERVICE_PREFIX + AlluxioURI.SEPARATOR + bucket, maxKeysParam, HttpMethod.GET, expected, TestCaseOptions.defaults().setContentType(TestCaseOptions.XML_CONTENT_TYPE)).run();
}
