@Test
public void hightlightCompleteWordOnly() {
    // using 2 non-simple spaces as mentioned in http://jkorpela.fi/chars/spaces.html
    String[] delimiters = new String[] { " ", "\t", "\n", ":", "\u1680", "\u00A0" };
    // highlight "of"
    Map<String, String> simpleCheck = Maps.newHashMap();
    // simple ones
    simpleCheck.put("official conflict of interest", "<div><span>official conflict <strong>of</strong> interest</span></div>");
    simpleCheck.put("of to new city", "<div><span><strong>of</strong> to new city</span></div>");
    simpleCheck.put("out of the roof", "<div><span>out <strong>of</strong> the roof</span></div>");
    simpleCheck.put("well this is of", "<div><span>well this is <strong>of</strong></span></div>");
    for (Map.Entry<String, String> simple : simpleCheck.entrySet()) {
        for (String delimiter : delimiters) {
            String text = simple.getKey().replaceAll(" ", delimiter);
            String expect = simple.getValue().replaceAll(" ", delimiter);
            assertEquals("highlighting '" + text + "' for 'of' (delimiter - '" + delimiter + "')", expect, highlight(sb(text), of("of")));
        }
    }
    // highlight "of*"
    Map<String, String> wildcardCheck = Maps.newHashMap();
    wildcardCheck.put("office room", "<div><span><strong>office</strong> room</span></div>");
    wildcardCheck.put("office room off", "<div><span><strong>office</strong> room <strong>off</strong></span></div>");
    wildcardCheck.put("big office room", "<div><span>big <strong>office</strong> room</span></div>");
    for (Map.Entry<String, String> wildcard : wildcardCheck.entrySet()) {
        for (String delimiter : delimiters) {
            String text = wildcard.getKey().replaceAll(" ", delimiter);
            String expect = wildcard.getValue().replaceAll(" ", delimiter);
            assertEquals("highlighting '" + text + "' for 'of*' (delimiter - '" + delimiter + "')", expect, highlight(sb(text), of("of*")));
        }
    }
}
