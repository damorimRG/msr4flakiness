@Test
public void testDuplicateEndMiss() throws Exception {
    EventHandlerService ehs = Services.get().get(EventHandlerService.class);
    SLACalculatorMemory slaCalcMemory = new SLACalculatorMemory();
    slaCalcMemory.init(Services.get().get(ConfigurationService.class).getConf());
    WorkflowJobBean job1 = addRecordToWfJobTable(WorkflowJob.Status.RUNNING, WorkflowInstance.Status.RUNNING);
    SLARegistrationBean slaRegBean = _createSLARegistration(job1.getId(), AppType.WORKFLOW_JOB);
    // 1 hour ahead
    Date startTime = new Date(System.currentTimeMillis() + 1 * 1 * 3600 * 1000);
    slaRegBean.setExpectedStart(startTime);
    slaRegBean.setExpectedDuration(3600 * 1000);
    // 1 hour back
    slaRegBean.setExpectedEnd(new Date(System.currentTimeMillis() - 1 * 1 * 3600 * 1000));
    String jobId = slaRegBean.getId();
    slaCalcMemory.addRegistration(slaRegBean.getId(), slaRegBean);
    slaCalcMemory.updateJobSla(jobId);
    SLASummaryBean slaSummary = SLASummaryQueryExecutor.getInstance().get(SLASummaryQuery.GET_SLA_SUMMARY, jobId);
    slaRegBean = SLARegistrationQueryExecutor.getInstance().get(SLARegQuery.GET_SLA_REG_ALL, jobId);
    assertNotNull(slaRegBean.getCreatedTimestamp());
    assertEquals(slaRegBean.getCreatedTimestamp(), slaSummary.getCreatedTimestamp());
    // Only end sla should be processed (100)
    assertEquals(4, slaSummary.getEventProcessed());
    slaCalcMemory.updateJobSla(jobId);
    slaSummary = SLASummaryQueryExecutor.getInstance().get(SLASummaryQuery.GET_SLA_SUMMARY, jobId);
    assertEquals(4, slaSummary.getEventProcessed());
    assertEquals(SLAStatus.MISS, slaSummary.getSLAStatus());
    job1.setId(job1.getId());
    job1.setStatus(WorkflowJob.Status.SUCCEEDED);
    job1.setStartTime(new Date(System.currentTimeMillis()));
    job1.setEndTime(new Date(System.currentTimeMillis() + 1 * 1 * 3600 * 1000));
    WorkflowJobQueryExecutor.getInstance().executeUpdate(WorkflowJobQuery.UPDATE_WORKFLOW_STATUS_INSTANCE_MOD_START_END, job1);
    slaCalcMemory.addJobStatus(jobId, WorkflowJob.Status.SUCCEEDED.toString(), EventStatus.SUCCESS, new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis() + 1 * 1 * 3600 * 1000));
    slaSummary = SLASummaryQueryExecutor.getInstance().get(SLASummaryQuery.GET_SLA_SUMMARY, jobId);
    // Only Duration sla should be processed as end is already processed
    // (110)
    assertEquals(8, slaSummary.getEventProcessed());
    assertEquals(SLAStatus.MISS, slaSummary.getSLAStatus());
    // Recieve start event
    assertTrue(slaCalcMemory.addJobStatus(jobId, WorkflowJob.Status.RUNNING.toString(), EventStatus.STARTED, new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis() + 1 * 1 * 3600 * 1000)));
    slaSummary = SLASummaryQueryExecutor.getInstance().get(SLASummaryQuery.GET_SLA_SUMMARY, jobId);
    // Start event received so all bits should be processed (111)
    assertEquals(8, slaSummary.getEventProcessed());
    assertEquals(SLAStatus.MISS, slaSummary.getSLAStatus());
    assertEquals(0, slaCalcMemory.size());
    assertEquals(3, ehs.getEventQueue().size());
}
