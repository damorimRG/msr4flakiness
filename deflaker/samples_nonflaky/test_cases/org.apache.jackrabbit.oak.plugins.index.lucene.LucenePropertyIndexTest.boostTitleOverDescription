@Test
public void boostTitleOverDescription() throws Exception {
    NodeTypeRegistry.register(root, IOUtils.toInputStream(TestUtil.TEST_NODE_TYPE), "test nodeType");
    Tree idx = createIndex("test1", of("propa", "propb"));
    Tree props = TestUtil.newRulePropTree(idx, TestUtil.NT_TEST);
    Tree title = props.addChild("title");
    title.setProperty(FulltextIndexConstants.PROP_NAME, "jcr:content/jcr:title");
    title.setProperty(FulltextIndexConstants.PROP_NODE_SCOPE_INDEX, true);
    title.setProperty(FulltextIndexConstants.FIELD_BOOST, 4.0);
    Tree desc = props.addChild("desc");
    desc.setProperty(FulltextIndexConstants.PROP_NAME, "jcr:content/jcr:description");
    desc.setProperty(FulltextIndexConstants.PROP_NODE_SCOPE_INDEX, true);
    desc.setProperty(FulltextIndexConstants.FIELD_BOOST, 2.0);
    Tree text = props.addChild("text");
    text.setProperty(FulltextIndexConstants.PROP_NAME, "jcr:content/text");
    text.setProperty(FulltextIndexConstants.PROP_NODE_SCOPE_INDEX, true);
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    Tree a = createNodeWithType(test, "a", "oak:TestNode").addChild("jcr:content");
    a.setProperty("jcr:title", "Batman");
    a.setProperty("jcr:description", "Silent angel of Gotham");
    a.setProperty("text", "once upon a time a long text phrase so as to add penalty to /test/a and nullifying boost");
    Tree b = createNodeWithType(test, "b", "oak:TestNode").addChild("jcr:content");
    b.setProperty("jcr:title", "Superman");
    b.setProperty("jcr:description", "Tale of two heroes Superman and Batman");
    b.setProperty("text", "some stuff");
    Tree c = createNodeWithType(test, "c", "oak:TestNode").addChild("jcr:content");
    c.setProperty("jcr:title", "Ironman");
    c.setProperty("jcr:description", "New kid in the town");
    c.setProperty("text", "Friend of batman?");
    root.commit();
    String queryString = "//element(*,oak:TestNode)[jcr:contains(., 'batman')]";
    String explain = explainXpath(queryString);
    // Assert that Lucene query generated has entries for all included boosted fields
    assertThat(explain, containsString("full:jcr:content/jcr:title:batman^4.0"));
    assertThat(explain, containsString("full:jcr:content/jcr:description:batman^2.0"));
    assertThat(explain, containsString(":fulltext:batman"));
    assertOrderedQuery(queryString, asList("/test/a", "/test/b", "/test/c"), XPATH, true);
}
