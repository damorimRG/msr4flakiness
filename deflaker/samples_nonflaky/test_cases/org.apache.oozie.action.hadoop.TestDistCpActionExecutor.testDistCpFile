public void testDistCpFile() throws Exception {
    Path inputPath = new Path(getFsTestCaseDir(), "input.txt");
    final Path outputPath = new Path(getFsTestCaseDir(), "output.txt");
    byte[] content = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".getBytes(StandardCharsets.UTF_8);
    OutputStream os = getFileSystem().create(inputPath);
    os.write(content);
    os.close();
    String actionXml = "<distcp>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<arg>" + inputPath + "</arg>" + "<arg>" + outputPath + "</arg>" + "</distcp>";
    Context context = createContext(actionXml);
    final String launcherId = submitAction(context);
    waitUntilYarnAppDoneAndAssertSuccess(launcherId);
    waitFor(60 * 1000, new Predicate() {

        public boolean evaluate() throws Exception {
            return getFileSystem().exists(outputPath);
        }
    });
    assertTrue(getFileSystem().exists(outputPath));
    byte[] readContent = new byte[content.length];
    InputStream is = getFileSystem().open(outputPath);
    int offset = 0;
    while (offset < readContent.length) {
        int numRead = is.read(readContent, offset, readContent.length);
        if (numRead == -1) {
            break;
        }
        offset += numRead;
    }
    assertEquals(is.read(), -1);
    is.close();
    offset = 0;
    while (offset < readContent.length) {
        assertEquals(readContent[offset], content[offset]);
        offset++;
    }
    // Check for external ids
    DistcpActionExecutor ae = new DistcpActionExecutor();
    WorkflowAction wfAction = context.getAction();
    ae.check(context, wfAction);
    ae.end(context, wfAction);
    assertEquals("SUCCEEDED", wfAction.getExternalStatus());
    String externalIds = wfAction.getExternalChildIDs();
    assertNotNull(externalIds);
    assertNotSame("", externalIds);
    // check for the expected prefix of hadoop jobIDs
    assertTrue(externalIds.contains("job_"));
}
