@Test
public void simplifyForUnion() {
    ConstraintImpl and, op1, op2, op3, op4;
    Set<ConstraintImpl> expected;
    op1 = mock(ComparisonImpl.class);
    op2 = mock(ComparisonImpl.class);
    and = new AndImpl(op1, op2);
    expected = emptySet();
    assertThat(and.convertToUnion(), is(expected));
    op1 = mockConstraint("op1", ComparisonImpl.class);
    op2 = mockConstraint("op2", ComparisonImpl.class);
    op3 = mockConstraint("op3", ComparisonImpl.class);
    and = new AndImpl(new OrImpl(op1, op2), op3);
    expected = of((ConstraintImpl) new AndImpl(op1, op3), (ConstraintImpl) new AndImpl(op2, op3));
    assertThat(and.convertToUnion(), is(expected));
    op1 = mockConstraint("op1", ComparisonImpl.class);
    op2 = mockConstraint("op2", ComparisonImpl.class);
    op3 = mockConstraint("op3", ComparisonImpl.class);
    op4 = mockConstraint("op4", ComparisonImpl.class);
    and = new AndImpl(new OrImpl(new OrImpl(op1, op4), op2), op3);
    expected = of((ConstraintImpl) new AndImpl(op1, op3), (ConstraintImpl) new AndImpl(op2, op3), (ConstraintImpl) new AndImpl(op4, op3));
    assertThat(and.convertToUnion(), is(expected));
}
