/**
 * Tests the {@link BlockStoreLocation#belongsTo(BlockStoreLocation)} method.
 */
@Test
public void testBelongTo() {
    BlockStoreLocation anyTier = BlockStoreLocation.anyTier();
    BlockStoreLocation anyDirInTierMEM = BlockStoreLocation.anyDirInTier("MEM");
    BlockStoreLocation anyDirInTierHDD = BlockStoreLocation.anyDirInTier("HDD");
    BlockStoreLocation dirInMEM = new BlockStoreLocation("MEM", 1);
    BlockStoreLocation dirInHDD = new BlockStoreLocation("HDD", 2);
    BlockStoreLocation dirWithMediumType = new BlockStoreLocation("MEM", 1, "MEM");
    BlockStoreLocation anyTierWithMEM = BlockStoreLocation.anyDirInTierWithMedium("MEM");
    assertTrue(anyTier.belongsTo(anyTier));
    assertFalse(anyTier.belongsTo(anyDirInTierMEM));
    assertFalse(anyTier.belongsTo(anyDirInTierHDD));
    assertFalse(anyTier.belongsTo(dirInMEM));
    assertFalse(anyTier.belongsTo(dirInHDD));
    assertTrue(anyDirInTierMEM.belongsTo(anyTier));
    assertTrue(anyDirInTierMEM.belongsTo(anyDirInTierMEM));
    assertFalse(anyDirInTierMEM.belongsTo(anyDirInTierHDD));
    assertFalse(anyDirInTierMEM.belongsTo(dirInMEM));
    assertFalse(anyDirInTierMEM.belongsTo(dirInHDD));
    assertTrue(anyDirInTierHDD.belongsTo(anyTier));
    assertFalse(anyDirInTierHDD.belongsTo(anyDirInTierMEM));
    assertTrue(anyDirInTierHDD.belongsTo(anyDirInTierHDD));
    assertFalse(anyDirInTierHDD.belongsTo(dirInMEM));
    assertFalse(anyDirInTierHDD.belongsTo(dirInHDD));
    assertTrue(dirInMEM.belongsTo(anyTier));
    assertTrue(dirInMEM.belongsTo(anyDirInTierMEM));
    assertFalse(dirInMEM.belongsTo(anyDirInTierHDD));
    assertTrue(dirInMEM.belongsTo(dirInMEM));
    assertFalse(dirInMEM.belongsTo(dirInHDD));
    assertTrue(dirInHDD.belongsTo(anyTier));
    assertFalse(dirInHDD.belongsTo(anyDirInTierMEM));
    assertTrue(dirInHDD.belongsTo(anyDirInTierHDD));
    assertFalse(dirInHDD.belongsTo(dirInMEM));
    assertTrue(dirInHDD.belongsTo(dirInHDD));
    assertTrue(dirWithMediumType.belongsTo(anyTierWithMEM));
    assertTrue(anyTierWithMEM.belongsTo(anyTier));
}
