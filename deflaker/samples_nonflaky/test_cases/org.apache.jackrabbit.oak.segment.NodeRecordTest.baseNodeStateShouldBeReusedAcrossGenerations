@Test
public void baseNodeStateShouldBeReusedAcrossGenerations() throws Exception {
    try (FileStore store = newFileStore()) {
        Generation generation = new Generation();
        // Create a new SegmentWriter. It's necessary not to have any cache,
        // otherwise the write of some records (in this case, template
        // records) will be cached and prevent this test to fail.
        SegmentWriter writer = defaultSegmentWriterBuilder("test").withGeneration(generation).withWriterPool().with(nodesOnlyCache()).build(store);
        generation.set(newGCGeneration(1, 0, false));
        // Write a new node with a non trivial template. This record will
        // belong to generation 1.
        RecordId baseId = writer.writeNode(EmptyNodeState.EMPTY_NODE.builder().setProperty("a", "a").setProperty("k", "v1").getNodeState());
        SegmentNodeState base = new SegmentNodeState(store.getReader(), writer, store.getBlobStore(), baseId);
        writer.flush();
        generation.set(newGCGeneration(2, 0, false));
        // Compact that same record to generation 2.
        SegmentNodeState compacted = new SegmentNodeState(store.getReader(), writer, store.getBlobStore(), writer.writeNode(base));
        writer.flush();
        // Assert that even if the two records have the same stable ID,
        // their physical ID and the ID of their templates are different.
        assertEquals(base.getStableId(), compacted.getStableId());
        assertNotEquals(base.getRecordId(), compacted.getRecordId());
        assertNotEquals(base.getTemplateId(), compacted.getTemplateId());
        // Create a new builder from the base, pre-compaction node state.
        // The base node state is from generation 1, but this builder will
        // be from generation 2 because every builder in the pool is
        // affected by the change of generation. Writing a node state from
        // this builder should perform a partial compaction.
        SegmentNodeState modified = (SegmentNodeState) base.builder().setProperty("k", "v2").getNodeState();
        // Assert that the stable ID of this node state is different from
        // the one in the base state. This is expected, since we have
        // modified the value of a property.
        assertNotEquals(modified.getStableId(), base.getStableId());
        assertNotEquals(modified.getStableId(), compacted.getStableId());
        // The node state should have reused the template from the compacted
        // node state, since this template didn't change and the code should
        // have detected that the base state of this builder was compacted
        // to a new generation.
        assertEquals(modified.getTemplateId(), compacted.getTemplateId());
        // Similarly the node state should have reused the property from
        // the compacted node state, since this property didn't change.
        Record modifiedProperty = (Record) modified.getProperty("a");
        Record compactedProperty = (Record) compacted.getProperty("a");
        assertNotNull(modifiedProperty);
        assertNotNull(compactedProperty);
        assertEquals(modifiedProperty.getRecordId(), compactedProperty.getRecordId());
    }
}
