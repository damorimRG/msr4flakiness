@Test
public void disableIndexes() throws Exception {
    rootBuilder.child("oak:index").child("fooIndex");
    builder.setProperty(IndexConstants.DISABLE_INDEXES_ON_NEXT_CYCLE, true);
    builder.setProperty(IndexConstants.SUPERSEDED_INDEX_PATHS, asList("/oak:index/fooIndex", "/oak:index/barIndex"), Type.STRINGS);
    refreshBuilder();
    List<String> disabledIndexes = disabler.disableOldIndexes("/oak:index/foo", builder);
    assertThat(disabledIndexes, containsInAnyOrder("/oak:index/fooIndex"));
    assertFalse(builder.getBoolean(IndexConstants.DISABLE_INDEXES_ON_NEXT_CYCLE));
    assertEquals(TYPE_DISABLED, rootBuilder.getChildNode("oak:index").getChildNode("fooIndex").getString(TYPE_PROPERTY_NAME));
    // Check no node created for non existing node
    assertFalse(rootBuilder.getChildNode("oak:index").getChildNode("barIndex").exists());
    refreshBuilder();
    List<String> disabledIndexes2 = disabler.disableOldIndexes("/oak:index/foo", builder);
    assertTrue(disabledIndexes2.isEmpty());
}
