@Test
public void ignoreDocChildCacheForIncompleteEntry() throws CommitFailedException {
    final Set<String> reads = Sets.newHashSet();
    MemoryDocumentStore docStore = new MemoryDocumentStore() {

        @Override
        public <T extends Document> T find(Collection<T> collection, String key) {
            reads.add(key);
            return super.find(collection, key);
        }
    };
    DocumentNodeStore store = builderProvider.newBuilder().setUseSimpleRevision(true).setClusterId(1).setAsyncDelay(0).setDocumentStore(docStore).getNodeStore();
    NodeBuilder builder = store.getRoot().builder();
    NodeBuilder parentBuilder = builder.child("a");
    // create > INITIAL_FETCH_SIZE children to have incomplete child cache entries
    int numChildren = DocumentNodeState.INITIAL_FETCH_SIZE + 2;
    for (int i = 0; i < numChildren; i++) {
        parentBuilder.child("child" + i);
    }
    merge(store, builder);
    store.invalidateNodeChildrenCache();
    // force filling up doc child cache
    NodeState parentNodeState = store.getRoot().getChildNode("a");
    Iterables.size(parentNodeState.getChildNodeEntries());
    reads.clear();
    NodeState nonExistingChild = parentNodeState.getChildNode("non-existing-child-1");
    assertTrue("DocStore should be queried when no doc child cache entry has all children", reads.size() > 0);
    assertFalse("Non existing children should be reported as such", nonExistingChild.exists());
}
