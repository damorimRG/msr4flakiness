@Test
public void journalException() throws Exception {
    DocumentStore store = new MemoryDocumentStore();
    FailingDocumentStore failingStore = new FailingDocumentStore(store);
    DocumentNodeStore ns = new DocumentNodeStoreBuilder<>().setDocumentStore(failingStore).setAsyncDelay(0).clock(clock).build();
    int clusterId = ns.getClusterId();
    Path fooPath = new Path(Path.ROOT, "foo");
    String fooId = Utils.getIdFromPath(fooPath);
    NodeBuilder builder = ns.getRoot().builder();
    builder.child(fooPath.getName()).setProperty("p", -1);
    merge(ns, builder);
    for (int i = 0; i <= NodeDocument.NUM_REVS_THRESHOLD; i++) {
        builder = ns.getRoot().builder();
        builder.child(fooPath.getName()).setProperty("p", i);
        merge(ns, builder);
    }
    // shut down without running background ops
    failingStore.fail().after(0).eternally();
    try {
        ns.dispose();
        fail("dispose is expected to fail");
    } catch (Exception e) {
    // expected
    }
    // must not have previous documents yet
    NodeDocument foo = store.find(Collection.NODES, fooId);
    assertNotNull(foo);
    assertEquals(0, foo.getPreviousRanges().size());
    // start again with test store
    final AtomicBoolean falseOnJournalEntryCreate = new AtomicBoolean();
    DocumentStore testStore = new DocumentStoreWrapper(store) {

        @Override
        public <T extends Document> boolean create(Collection<T> collection, List<UpdateOp> updateOps) {
            if (collection == Collection.JOURNAL && falseOnJournalEntryCreate.get()) {
                return false;
            }
            return super.create(collection, updateOps);
        }
    };
    ns = builderProvider.newBuilder().setClusterId(clusterId).setDocumentStore(testStore).setAsyncDelay(0).clock(clock).build();
    ns.addSplitCandidate(Utils.getIdFromPath(new Path(Path.ROOT, "foo")));
    falseOnJournalEntryCreate.set(true);
    try {
        ns.runBackgroundOperations();
        fail("background operations are expected to fail");
    } catch (DocumentStoreException e) {
        assertThat(e.getMessage(), containsString("Unable to create journal entry"));
    }
    // must still not have previous documents
    foo = store.find(Collection.NODES, fooId);
    assertNotNull(foo);
    assertEquals(0, foo.getPreviousRanges().size());
    assertTrue(ns.getSplitCandidates().contains(fooId));
    falseOnJournalEntryCreate.set(false);
    ns.runBackgroundOperations();
    // now there must be a split document
    foo = store.find(Collection.NODES, fooId);
    assertNotNull(foo);
    assertEquals(1, foo.getPreviousRanges().size());
    assertFalse(ns.getSplitCandidates().contains(fooId));
}
