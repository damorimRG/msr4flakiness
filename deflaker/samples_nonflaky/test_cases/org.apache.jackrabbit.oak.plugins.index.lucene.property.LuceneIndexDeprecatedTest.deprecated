@Test
public void deprecated() throws Exception {
    NodeBuilder index = newLucenePropertyIndexDefinition(rootBuilder.child(INDEX_DEFINITIONS_NAME), "foo", ImmutableSet.of("foo"), null);
    index.setProperty(IndexConstants.INDEX_DEPRECATED, false);
    commit();
    for (int i = 0; i < MANY; i++) {
        rootBuilder.child("test").child("n" + i).setProperty("foo", "x" + i % 20);
    }
    commit();
    FilterImpl f = createFilter(root, NT_BASE);
    f.restrictProperty("foo", Operator.EQUAL, PropertyValues.newString("x10"));
    IndexTracker tracker = new IndexTracker();
    tracker.update(root);
    LucenePropertyIndex luceneIndex = new LucenePropertyIndex(tracker);
    IndexPlan plan = luceneIndex.getPlans(f, null, root).iterator().next();
    assertTrue(plan.getCostPerExecution() != Double.POSITIVE_INFINITY);
    ListAppender<ILoggingEvent> appender = createAndRegisterAppender();
    luceneIndex.query(plan, root);
    assertEquals("[]", appender.list.toString());
    appender.list.clear();
    // now test with the deprecated flag
    index = rootBuilder.child(INDEX_DEFINITIONS_NAME).child("foo");
    index.setProperty(IndexConstants.INDEX_DEPRECATED, true);
    index.setProperty("refresh", Boolean.TRUE);
    commit();
    appender.list.clear();
    // need to create a new one - otherwise the cached definition is used
    tracker = new IndexTracker();
    tracker.update(root);
    luceneIndex = new LucenePropertyIndex(tracker);
    plan = luceneIndex.getPlans(f, null, root).iterator().next();
    assertTrue(plan.getCostPerExecution() != Double.POSITIVE_INFINITY);
    luceneIndex.query(plan, root);
    assertEquals("[[WARN] This index is deprecated: /oak:index/foo; " + "it is used for query Filter(query=" + "SELECT * FROM [nt:base], path=*, property=[foo=[x10]]). " + "Please change the query or the index definitions.]", appender.list.toString());
    index = rootBuilder.child(INDEX_DEFINITIONS_NAME).child("foo");
    index.removeProperty(IndexConstants.INDEX_DEPRECATED);
    index.setProperty("refresh", Boolean.TRUE);
    commit();
    appender.list.clear();
    // need to create a new one - otherwise the cached definition is used
    tracker = new IndexTracker();
    tracker.update(root);
    luceneIndex = new LucenePropertyIndex(tracker);
    plan = luceneIndex.getPlans(f, null, root).iterator().next();
    assertTrue(plan.getCostPerExecution() != Double.POSITIVE_INFINITY);
    luceneIndex.query(plan, root);
    assertEquals("[]", appender.list.toString());
    deregisterAppender(appender);
}
