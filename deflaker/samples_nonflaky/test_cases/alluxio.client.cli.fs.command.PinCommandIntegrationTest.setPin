/**
 * Tests pinned files are not evicted when Alluxio reaches memory limit. This test case creates
 * three files, each file is half the size of the cluster's capacity. The three files are added
 * sequentially to the cluster, the first file is pinned. When the third file is added, the two
 * previous files have already occupied the whole capacity, so one file needs to be evicted to
 * spare space for the third file. Since the first file is pinned, it will not be evicted, so only
 * the second file will be evicted.
 */
@Test
public void setPin() throws Exception {
    AlluxioURI filePathA = new AlluxioURI("/testFileA");
    AlluxioURI filePathB = new AlluxioURI("/testFileB");
    AlluxioURI filePathC = new AlluxioURI("/testFileC");
    int fileSize = SIZE_BYTES / 2;
    FileSystemTestUtils.createByteFile(mFileSystem, filePathA, WritePType.MUST_CACHE, fileSize);
    HeartbeatScheduler.execute(HeartbeatContext.WORKER_BLOCK_SYNC);
    assertTrue(fileExists(filePathA));
    assertEquals(0, mFsShell.run("pin", filePathA.toString()));
    HeartbeatScheduler.execute(HeartbeatContext.WORKER_PIN_LIST_SYNC);
    FileSystemTestUtils.createByteFile(mFileSystem, filePathB, WritePType.MUST_CACHE, fileSize);
    HeartbeatScheduler.execute(HeartbeatContext.WORKER_BLOCK_SYNC);
    assertTrue(fileExists(filePathB));
    assertEquals(0, mFsShell.run("unpin", filePathB.toString()));
    HeartbeatScheduler.execute(HeartbeatContext.WORKER_PIN_LIST_SYNC);
    FileSystemTestUtils.createByteFile(mFileSystem, filePathC, WritePType.MUST_CACHE, fileSize);
    HeartbeatScheduler.execute(HeartbeatContext.WORKER_BLOCK_SYNC);
    assertTrue(fileExists(filePathC));
    // fileA is in memory because it is pinned, but fileB should have been evicted to hold fileC.
    assertEquals(100, mFileSystem.getStatus(filePathA).getInAlluxioPercentage());
    assertEquals(0, mFileSystem.getStatus(filePathB).getInAlluxioPercentage());
    // fileC should be in memory because fileB is evicted.
    assertEquals(100, mFileSystem.getStatus(filePathC).getInAlluxioPercentage());
}
