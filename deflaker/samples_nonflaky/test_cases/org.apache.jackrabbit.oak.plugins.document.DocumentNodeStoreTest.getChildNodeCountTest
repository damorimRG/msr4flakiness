@Test
public void getChildNodeCountTest() throws Exception {
    // unknown
    final long UL = Long.MAX_VALUE;
    // childNodeCount = none
    getChildNodeCountTest(0, of(0L, 1L), of(0L, 0L));
    // childNodeCount = less than initial fetch size 42
    getChildNodeCountTest(42, of(0L, 1L, 41L, 42L, 43L, 100L), of(42L, 42L, 42L, 42L, 42L, 42L));
    // childNodeCount = initial fetch size (100)
    getChildNodeCountTest(100, of(0L, 1L, 99L, 100L, 101L, 200L), of(100L, 100L, 100L, 100L, 100L, 100L));
    // childNodeCount = initial fetch size + 1 (100 + 1)
    getChildNodeCountTest(101, of(0L, 1L, 99L, 100L, 101L, 200L), of(UL, UL, UL, UL, 101L, 101L));
    // childNodeCount = first two fetches (100 + 200)
    getChildNodeCountTest(300, of(0L, 1L, 99L, 100L, 101L, 200L, 299L, 300L, 301L, 400L), of(UL, UL, UL, UL, 300L, 300L, 300L, 300L, 300L, 300L));
}
private void getChildNodeCountTest(int numChildren, Iterable<Long> maxValues, Iterable<Long> expectedValues) throws Exception {
    DocumentNodeStore ns = builderProvider.newBuilder().setAsyncDelay(0).getNodeStore();
    NodeBuilder builder = ns.getRoot().builder();
    for (int i = 0; i < numChildren; i++) {
        builder.child("test").child("node-" + i);
    }
    merge(ns, builder);
    ns.getNodeChildrenCache().invalidateAll();
    NodeState test = ns.getRoot().getChildNode("test");
    Iterator<Long> expected = expectedValues.iterator();
    for (long max : maxValues) {
        assertEquals(expected.next().longValue(), test.getChildNodeCount(max));
    }
}
