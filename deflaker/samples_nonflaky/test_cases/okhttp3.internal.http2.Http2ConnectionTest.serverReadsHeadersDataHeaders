@Test
public void serverReadsHeadersDataHeaders() throws Exception {
    // write the mocking script
    peer.sendFrame().settings(new Settings());
    // ACK
    peer.acceptFrame();
    // SYN_STREAM
    peer.acceptFrame();
    // DATA
    peer.acceptFrame();
    // HEADERS
    peer.acceptFrame();
    peer.sendFrame().headers(true, 3, headerEntries("a", "android"));
    // PING
    peer.acceptFrame();
    // PING
    peer.sendFrame().ping(true, AWAIT_PING, 0);
    peer.play();
    // play it back
    Http2Connection connection = connect(peer);
    Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true);
    BufferedSink out = Okio.buffer(stream.getSink());
    out.writeUtf8("c3po");
    out.close();
    stream.writeHeaders(headerEntries("e", "elephant"), false, false);
    connection.writePingAndAwaitPong();
    assertThat(connection.openStreamCount()).isEqualTo(0);
    // verify the peer received what was expected
    InFrame synStream = peer.takeFrame();
    assertThat(synStream.type).isEqualTo(Http2.TYPE_HEADERS);
    assertThat(synStream.outFinished).isFalse();
    assertThat(synStream.streamId).isEqualTo(3);
    assertThat(synStream.associatedStreamId).isEqualTo(-1);
    assertThat(synStream.headerBlock).isEqualTo(headerEntries("b", "banana"));
    InFrame requestData = peer.takeFrame();
    assertArrayEquals("c3po".getBytes(UTF_8), requestData.data);
    InFrame nextFrame = peer.takeFrame();
    assertThat(nextFrame.headerBlock).isEqualTo(headerEntries("e", "elephant"));
}
