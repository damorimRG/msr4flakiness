@Test
public void testInterspersed() {
    final Header[] headers = new Header[] { new BasicHeader("yellow", "00"), new BasicHeader("maroon", "01"), new BasicHeader("orange", "02"), new BasicHeader("orange", "03"), new BasicHeader("orange", "04"), new BasicHeader("yellow", "05"), new BasicHeader("maroon", "06"), new BasicHeader("maroon", "07"), new BasicHeader("maroon", "08"), new BasicHeader("yellow", "09"), new BasicHeader("maroon", "0a"), new BasicHeader("yellow", "0b"), new BasicHeader("orange", "0c"), new BasicHeader("yellow", "0d"), new BasicHeader("orange", "0e") };
    // without filter
    Iterator<Header> hit = new BasicHeaderIterator(headers, null);
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0", headers[0], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1", headers[1], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2", headers[2], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3", headers[3], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("4", headers[4], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("5", headers[5], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("6", headers[6], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("7", headers[7], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("8", headers[8], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("9", headers[9], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("a", headers[10], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b", headers[11], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("c", headers[12], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("d", headers[13], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("e", headers[14], hit.next());
    Assert.assertFalse(hit.hasNext());
    // yellow 0, 5, 9, 11, 13
    hit = new BasicHeaderIterator(headers, "Yellow");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("0", headers[0], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("5", headers[5], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("9", headers[9], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b", headers[11], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("d", headers[13], hit.next());
    Assert.assertFalse(hit.hasNext());
    // maroon 1, 6, 7, 8, 10
    hit = new BasicHeaderIterator(headers, "marOOn");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("1", headers[1], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("6", headers[6], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("7", headers[7], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("8", headers[8], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("a", headers[10], hit.next());
    Assert.assertFalse(hit.hasNext());
    // orange 2, 3, 4, 12, 14
    hit = new BasicHeaderIterator(headers, "OranGe");
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("2", headers[2], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("3", headers[3], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("4", headers[4], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("b", headers[12], hit.next());
    Assert.assertTrue(hit.hasNext());
    Assert.assertEquals("e", headers[14], hit.next());
    Assert.assertFalse(hit.hasNext());
}
