// OAK-3608
@Test
public void compareOnBranch() throws Exception {
    long modifiedResMillis = SECONDS.toMillis(MODIFIED_IN_SECS_RESOLUTION);
    Clock clock = new Clock.Virtual();
    clock.waitUntil(System.currentTimeMillis());
    Revision.setClock(clock);
    ClusterNodeInfo.setClock(clock);
    DocumentNodeStore ns = builderProvider.newBuilder().clock(clock).setAsyncDelay(0).getNodeStore();
    // initial state
    NodeBuilder builder = ns.getRoot().builder();
    NodeBuilder p = builder.child("parent");
    for (int i = 0; i < DocumentMK.MANY_CHILDREN_THRESHOLD * 2; i++) {
        p.child("node-" + i);
    }
    p.child("node-x").child("child");
    merge(ns, builder);
    ns.runBackgroundOperations();
    // wait until modified timestamp changes
    clock.waitUntil(clock.getTime() + modifiedResMillis * 2);
    // force new head revision with this different modified timestamp
    builder = ns.getRoot().builder();
    builder.child("a");
    merge(ns, builder);
    DocumentNodeState root = ns.getRoot();
    final DocumentNodeStoreBranch b = ns.createBranch(root);
    // branch state is now Unmodified
    builder = root.builder();
    builder.child("parent").child("node-x").child("child").child("x");
    b.setRoot(builder.getNodeState());
    // branch state is now InMemory
    for (int i = 0; i < DocumentMK.UPDATE_LIMIT; i++) {
        builder.child("b" + i);
    }
    b.setRoot(builder.getNodeState());
    // branch state is now Persisted
    builder.child("c");
    b.setRoot(builder.getNodeState());
    // branch state is Persisted
    // create a diff between base and head state of branch
    DocumentNodeState head = asDocumentNodeState(b.getHead());
    TrackingDiff diff = new TrackingDiff();
    head.compareAgainstBaseState(root, diff);
    assertTrue(diff.modified.contains("/parent/node-x/child"));
}
