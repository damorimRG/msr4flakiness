// the test would fail if any method was not proxyable as the assertion error would not be softly caught
@SuppressWarnings("unchecked")
@Test
public void object_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test() {
    // GIVEN
    Name name = name("John", "Doe");
    Object alphabet = "abcdefghijklmnopqrstuvwxyz";
    Object vowels = asList("a", "e", "i", "o", "u");
    // WHEN
    softly.then(name).extracting("first", "last").contains("John").contains("gandalf");
    softly.then(name).extracting(Name::getFirst, Name::getLast).contains("John").contains("frodo");
    softly.then(alphabet).asString().startsWith("abc").startsWith("123");
    softly.then(vowels).asList().startsWith("a", "e").startsWith("1", "2");
    softly.then(name).as("extracting(Name::getFirst)").overridingErrorMessage("error message").extracting(Name::getFirst).isEqualTo("Jack");
    softly.then(name).as("extracting(first)").overridingErrorMessage("error message").extracting("first").isEqualTo("Jack");
    // THEN
    List<Throwable> errorsCollected = softly.errorsCollected();
    assertThat(errorsCollected).hasSize(6);
    assertThat(errorsCollected.get(0)).hasMessageContaining("gandalf");
    assertThat(errorsCollected.get(1)).hasMessageContaining("frodo");
    assertThat(errorsCollected.get(2)).hasMessageContaining("123");
    assertThat(errorsCollected.get(3)).hasMessageContaining("\"1\", \"2\"");
    assertThat(errorsCollected.get(4)).hasMessage("[extracting(Name::getFirst)] error message");
    assertThat(errorsCollected.get(5)).hasMessage("[extracting(first)] error message");
}
