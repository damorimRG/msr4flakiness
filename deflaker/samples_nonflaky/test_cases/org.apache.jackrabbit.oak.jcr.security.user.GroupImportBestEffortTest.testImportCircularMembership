@Test
public void testImportCircularMembership() throws Exception {
    String g1Id = "0120a4f9-196a-3f9e-b9f5-23f31f914da7";
    // groupId of 'g' group.
    String nonExistingId = "b2f5ff47-4366-31b6-a533-d8dc3614845d";
    if (getUserManager().getAuthorizable("g") != null) {
        throw new NotExecutableException();
    }
    String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<sv:node sv:name=\"gFolder\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">" + "   <sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:AuthorizableFolder</sv:value></sv:property>" + "<sv:node sv:name=\"g1\"><sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:Group</sv:value></sv:property>" + "   <sv:property sv:name=\"jcr:uuid\" sv:type=\"String\"><sv:value>" + g1Id + "</sv:value></sv:property>" + "   <sv:property sv:name=\"rep:principalName\" sv:type=\"String\"><sv:value>g1</sv:value></sv:property>" + "   <sv:property sv:name=\"rep:members\" sv:type=\"WeakReference\"><sv:value>" + nonExistingId + "</sv:value></sv:property>" + "</sv:node>" + "</sv:node>";
    String xml2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "   <sv:node sv:name=\"g\" xmlns:mix=\"http://www.jcp.org/jcr/mix/1.0\" xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\" xmlns:fn_old=\"http://www.w3.org/2004/10/xpath-functions\" xmlns:fn=\"http://www.w3.org/2005/xpath-functions\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sv=\"http://www.jcp.org/jcr/sv/1.0\" xmlns:rep=\"internal\" xmlns:jcr=\"http://www.jcp.org/jcr/1.0\">" + "       <sv:property sv:name=\"jcr:primaryType\" sv:type=\"Name\"><sv:value>rep:Group</sv:value></sv:property>" + "       <sv:property sv:name=\"jcr:uuid\" sv:type=\"String\"><sv:value>" + nonExistingId + "</sv:value></sv:property>" + "       <sv:property sv:name=\"rep:principalName\" sv:type=\"String\"><sv:value>g</sv:value></sv:property>" + "       <sv:property sv:name=\"rep:members\" sv:type=\"WeakReference\"><sv:value>" + g1Id + "</sv:value></sv:property>" + "   </sv:node>";
    // BESTEFFORT behavior -> must import non-existing members.
    doImport(getTargetPath(), xml);
    /*
        now try to import the 'g' group that has a circular group membership references.
        expected:
        - group is imported
        - circular membership is not spotted due to best-effort optimization
        - circular membership is spotted upon resolution of members
        */
    doImport(getTargetPath() + "/gFolder", xml2);
    Group g = getUserManager().getAuthorizable("g", Group.class);
    Group g1 = getUserManager().getAuthorizable("g1", Group.class);
    assertNotNull("'g' was not imported as Group.", g);
    assertNotNull("'g1' was not imported as Group.", g1);
    assertTrue(g1.isDeclaredMember(g));
    assertTrue(g.isDeclaredMember(g1));
    // circular membership created during import -> must be spotted upon member-access
    assertEquals(1, Iterators.size(g1.getMembers()));
    assertEquals(1, Iterators.size(g.getMembers()));
}
