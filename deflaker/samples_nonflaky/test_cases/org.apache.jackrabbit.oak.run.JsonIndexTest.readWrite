@Test
public void readWrite() throws Exception {
    JsonIndexCommand index = new JsonIndexCommand();
    try (NodeStoreFixture fixture = memoryFixture()) {
        NodeStore store = fixture.getStore();
        index.session = JsonIndexCommand.openSession(store, "admin", "admin");
        assertCommand(index, combineLines(""), "{'addNode':'/foo', 'node':{'jcr:primaryType': 'nt:unstructured', 'x': 1, 'y':{}}}", "{'session': 'save'}");
        assertCommand(index, combineLines("/foo", "/jcr:system", "/oak:index", "/rep:security"), "{'xpath':'/jcr:root/* order by @jcr:path'}");
        assertCommand(index, combineLines("/oak:index/counter"), "{'xpath':'/jcr:root//element(*, oak:QueryIndexDefinition)[@type=`counter`] " + "order by @jcr:path'}");
        assertCommand(index, combineLines("[nt:unstructured] as [a] /* property test = 1 " + "where ([a].[x] = 1) and (isdescendantnode([a], [/])) */"), "{'addNode':'/oak:index/test', 'node':{ " + "'jcr:primaryType':'oak:QueryIndexDefinition', " + "'type':'property', " + "'reindex':true, " + "'entryCount': 1, " + "'{Name}declaringNodeTypes': ['nt:unstructured'], " + "'{Name}propertyNames':['x'] " + "}}", "{'session':'save'}", "{'xpath':'explain /jcr:root//element(*, nt:unstructured)[@x=1]'}", "{'xpath':'/jcr:root//element(*, nt:unstructured)[@x=2]'}");
        assertCommand(index, combineLines("50"), "{'addNode':'/foo/test', 'node':{'jcr:primaryType': 'oak:Unstructured', 'child':{}}}", "{'$x':1}", "{'loop':[" + "{'$p': '/foo/test/child/n', '+': '$x'}, " + "{'addNode': '$p', 'node': {'x': '$x', 'jcr:primaryType': 'nt:unstructured'}}, " + "{'session':'save'}, " + "{'$x': '$x', '+':1}, " + "{'$break': true, 'if': '$x', '=': 100}]}", "{'session':'save'}", "{'xpath':'/jcr:root//element(*, nt:unstructured)[@x<50]', 'quiet':true}", "{'$y':0}", "{'for':'$result', 'do': [{'$y': '$y', '+': 1}]}", "{'print': '$y'}");
        assertCommand(index, combineLines("[nt:unstructured] as [a] /* nodeType Filter(query=" + "explain select [jcr:path], [jcr:score], * from [nt:unstructured] as a " + "where [x] = 1 and isdescendantnode(a, '/') /* xpath: " + "/jcr:root//element(*, nt:unstructured)[@x=1] */, path=//*, " + "property=[x=[1]]) where ([a].[x] = 1) and (isdescendantnode([a], [/])) */"), "{'setProperty': '/oak:index/test/type', 'value': 'disabled'}", "{'session':'save'}", "{'xpath':'explain /jcr:root//element(*, nt:unstructured)[@x=1]'}");
        assertCommand(index, combineLines("[nt:unstructured] as [a] /* traverse '*' " + "where [a].[x] = 1 */"), "{'removeNode': '/oak:index/nodetype'}", "{'session':'save'}", "{'sql':'explain select * from [nt:unstructured] as [a] where [x]=1'}");
        assertCommand(index, combineLines("['/foo': {\n" + "  'jcr:primaryType': 'nt:unstructured', '{Long}x': '1', 'y': {}, 'test': {}\n" + "}]"), "{'xpath':'/jcr:root/foo', 'depth':2}");
        index.session.logout();
    }
}
