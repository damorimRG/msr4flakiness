@Test
public void gcLongRunningBlobCollection() throws Exception {
    DataStoreState state = setUp(true);
    log.info("{} Blobs added {}", state.blobsAdded.size(), state.blobsAdded);
    log.info("{} Blobs should be present {}", state.blobsPresent.size(), state.blobsPresent);
    ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(10);
    DocumentNodeStore store = mk.getNodeStore();
    String repoId = null;
    if (SharedDataStoreUtils.isShared(store.getBlobStore())) {
        repoId = ClusterRepositoryInfo.getOrCreateId(store);
        ((SharedDataStore) store.getBlobStore()).addMetadataRecord(new ByteArrayInputStream(new byte[0]), REPOSITORY.getNameFromId(repoId));
    }
    TestGarbageCollector gc = new TestGarbageCollector(new DocumentBlobReferenceRetriever(store), (GarbageCollectableBlobStore) store.getBlobStore(), executor, folder.newFolder().getAbsolutePath(), 5, 5000, repoId);
    gc.collectGarbage(false);
    Set<String> existingAfterGC = iterate();
    log.info("{} Blobs existing after gc {}", existingAfterGC.size(), existingAfterGC);
    assertTrue(Sets.difference(state.blobsPresent, existingAfterGC).isEmpty());
    assertEquals(gc.additionalBlobs, Sets.symmetricDifference(state.blobsPresent, existingAfterGC));
}
