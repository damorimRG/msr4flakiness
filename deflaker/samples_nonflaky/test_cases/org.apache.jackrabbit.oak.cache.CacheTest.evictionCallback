@Test
public void evictionCallback() throws ExecutionException {
    final Set<String> evictedKeys = newHashSet();
    final Set<Integer> evictedValues = newHashSet();
    CacheLIRS<String, Integer> cache = CacheLIRS.<String, Integer>newBuilder().maximumSize(100).evictionCallback(new EvictionCallback<String, Integer>() {

        @Override
        public void evicted(String key, Integer value, RemovalCause cause) {
            evictedKeys.add(key);
            if (value != null) {
                assertEquals(key, valueOf(value));
                evictedValues.add(value);
            }
            assertTrue(cause == RemovalCause.SIZE || cause == RemovalCause.EXPLICIT);
        }
    }).build();
    for (int k = 0; k < 200; k++) {
        cache.put(valueOf(k), k);
    }
    assertTrue(evictedKeys.size() <= evictedValues.size());
    for (String key : evictedKeys) {
        assertFalse(cache.containsKey(key));
    }
    cache.invalidateAll();
    assertEquals(200, evictedKeys.size());
    assertEquals(200, evictedValues.size());
}
