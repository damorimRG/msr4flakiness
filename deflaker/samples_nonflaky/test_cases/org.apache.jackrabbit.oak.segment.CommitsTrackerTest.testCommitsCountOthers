@Test
public void testCommitsCountOthers() throws InterruptedException {
    final int OTHER_WRITERS_LIMIT = 10;
    CommitsTracker commitsTracker = new CommitsTracker(new String[] {}, OTHER_WRITERS_LIMIT);
    List<CommitTask> queued = newArrayList();
    for (int k = 0; k < 20; k++) {
        CommitTask commitTask = new CommitTask(commitsTracker, newGCGeneration(k, k, false));
        queued.add(commitTask);
        commitTask.queued();
        assertNull(commitsTracker.getCurrentWriter());
        assertEquals(queued.size(), commitsTracker.getQueuedWritersMap().size());
        assertEquals(0, commitsTracker.getCommitsCountOthers().size());
        assertTrue(commitsTracker.getCommitsCountPerGroupLastMinute().isEmpty());
    }
    List<CommitTask> executed = newArrayList();
    for (int k = 0; k < OTHER_WRITERS_LIMIT + 3; k++) {
        CommitTask commitTask = queued.remove(0);
        executed.add(commitTask);
        commitTask.dequeue();
        Commit currentWriter = commitsTracker.getCurrentWriter();
        assertNotNull(currentWriter);
        assertEquals(commitTask.getGcGeneration(), currentWriter.getGCGeneration());
        assertEquals(commitTask.getThreadName(), commitsTracker.getCurrentWriter().getThreadName());
        commitTask.executed();
        assertNull(commitsTracker.getCurrentWriter());
        assertEquals(queued.size(), commitsTracker.getQueuedWritersMap().size());
        assertEquals(min(OTHER_WRITERS_LIMIT, executed.size()), commitsTracker.getCommitsCountOthers().size());
        assertTrue(commitsTracker.getCommitsCountPerGroupLastMinute().isEmpty());
    }
}
