/**
 * Tests functionality of the Recovery Service Runnable command. </p> Insert a coordinator job with RUNNING and
 * action with WAITING. Then, runs the recovery runnable and ensures the action status changes to READY.
 *
 * @throws Exception
 */
public void testCoordActionRecoveryServiceForWaiting() throws Exception {
    CoordinatorJobBean job = addRecordToCoordJobTableForWaiting("coord-job-for-action-input-check.xml", CoordinatorJob.Status.RUNNING, false, true);
    CoordinatorJobBean jobWithError = addRecordToCoordJobTableForWaiting("coord-job-for-action-input-check.xml", CoordinatorJob.Status.RUNNINGWITHERROR, false, true);
    CoordinatorJobBean suspendedJob = addRecordToCoordJobTableForWaiting("coord-job-for-action-input-check.xml", CoordinatorJob.Status.SUSPENDED, false, true);
    CoordinatorActionBean action = addRecordToCoordActionTableForWaiting(job.getId(), 1, CoordinatorAction.Status.WAITING, "coord-action-for-action-input-check.xml");
    CoordinatorActionBean actionReady = addRecordToCoordActionTableForWaiting(job.getId(), 2, CoordinatorAction.Status.READY, "coord-action-for-action-input-check.xml");
    CoordinatorActionBean suspendedAction = addRecordToCoordActionTableForWaiting(suspendedJob.getId(), 1, CoordinatorAction.Status.WAITING, "coord-action-for-action-input-check.xml");
    CoordinatorActionBean runningWithErrorAction = addRecordToCoordActionTableForWaiting(jobWithError.getId(), 1, CoordinatorAction.Status.WAITING, "coord-action-for-action-input-check.xml");
    CoordinatorActionBean submittedAction = addRecordToCoordActionTableForWaiting(suspendedJob.getId(), 2, CoordinatorAction.Status.SUBMITTED, "coord-action-for-action-input-check.xml");
    createDir(new File(getTestCaseDir(), "/2009/29/"));
    createDir(new File(getTestCaseDir(), "/2009/22/"));
    createDir(new File(getTestCaseDir(), "/2009/15/"));
    createDir(new File(getTestCaseDir(), "/2009/08/"));
    sleep(3000);
    Runnable recoveryRunnable = new RecoveryRunnable(0, 1, 1);
    recoveryRunnable.run();
    final String actionId = action.getId();
    waitFor(10000, new Predicate() {

        public boolean evaluate() throws Exception {
            CoordinatorActionBean newAction = CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, actionId);
            return (newAction.getStatus() != CoordinatorAction.Status.WAITING);
        }
    });
    action = CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, actionId);
    // action status should change from waiting
    assertFalse(action.getStatus().equals(CoordinatorAction.Status.WAITING));
    // action status should change from waiting
    assertFalse(CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, runningWithErrorAction.getId()).getStatus().equals(CoordinatorAction.Status.WAITING));
    // action status should change from waiting
    assertFalse(CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, actionReady.getId()).getStatus().equals(CoordinatorAction.Status.READY));
    assertTrue(CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, suspendedAction.getId()).getStatus().equals(CoordinatorAction.Status.WAITING));
    // action status should remain to submitted bcz job is suspended
    assertEquals(CoordActionQueryExecutor.getInstance().get(CoordActionQuery.GET_COORD_ACTION, submittedAction.getId()).getStatus(), (CoordinatorAction.Status.SUBMITTED));
}
