public void testBlackList() throws Exception {
    File sparkConf1Dir = createSparkConfsInDir("spark-conf-1", "a", "A", "b", "B", "spark.yarn.jar", "foo");
    File sparkConf3Dir = createSparkConfsInDir("spark-conf-3");
    File sparkConf4Dir = createSparkConfsInDir("spark-conf-4", "y", "Y", "z", "Z", "spark.yarn.jars", "foo2");
    SparkConfigurationService scs = Services.get().get(SparkConfigurationService.class);
    scs.destroy();
    ConfigurationService.set("oozie.service.SparkConfigurationService.spark.configurations", // absolute path
    "rm1=" + sparkConf1Dir.getAbsolutePath() + // invalid entry
    ",rm2" + ",rm3=" + // missing file
    sparkConf3Dir.getAbsolutePath() + ",rm4=" + // relative path
    sparkConf4Dir.getName());
    ConfigurationService.setBoolean("oozie.service.SparkConfigurationService.spark.configurations.ignore.spark.yarn.jar", false);
    ConfigurationService.set("oozie.service.SparkConfigurationService.spark.configurations.blacklist", "a,z");
    scs.init(Services.get());
    Properties sparkConfigs = scs.getSparkConfig("foo");
    assertEquals(sparkConfigs.toString(), 0, sparkConfigs.size());
    sparkConfigs = scs.getSparkConfig("rm1");
    assertEquals(sparkConfigs.toString(), 2, sparkConfigs.size());
    assertEquals("B", sparkConfigs.get("b"));
    assertEquals("foo", sparkConfigs.get("spark.yarn.jar"));
    sparkConfigs = scs.getSparkConfig("rm2");
    assertEquals(sparkConfigs.toString(), 0, sparkConfigs.size());
    sparkConfigs = scs.getSparkConfig("rm3");
    assertEquals(sparkConfigs.toString(), 0, sparkConfigs.size());
    sparkConfigs = scs.getSparkConfig("rm4");
    assertEquals(sparkConfigs.toString(), 2, sparkConfigs.size());
    assertEquals("Y", sparkConfigs.get("y"));
    assertEquals("foo2", sparkConfigs.get("spark.yarn.jars"));
    scs.destroy();
}
