@Test
public void testPredicateTreeRespectParent() {
    Tree parent = mockTree(parentPath, null);
    Tree tree = mockTree(path, parent);
    PropertyState ps = mock(PropertyState.class);
    when(ps.getName()).thenReturn("property");
    EntryPredicate pred = EntryPredicate.create(tree, ps, true);
    assertEquals(path, pred.getPath());
    // pattern neither matches path nor parent path
    when(pattern.matches(tree, ps)).thenReturn(false);
    when(pattern.matches(parent, ps)).thenReturn(false);
    when(pattern.matches(parent, null)).thenReturn(false);
    assertFalse(pred.apply(entry));
    assertFalse(pred.apply(entry, true));
    assertFalse(pred.apply(entry, false));
    // pattern matches path and parent path
    when(pattern.matches(tree, ps)).thenReturn(true);
    when(pattern.matches(parent, ps)).thenReturn(true);
    when(pattern.matches(parent, null)).thenReturn(true);
    assertFalse(pred.apply(null));
    assertTrue(pred.apply(entry));
    assertTrue(pred.apply(entry, true));
    assertTrue(pred.apply(entry, false));
    // pattern only matches path
    when(pattern.matches(tree, ps)).thenReturn(true);
    when(pattern.matches(parent, ps)).thenReturn(false);
    when(pattern.matches(parent, null)).thenReturn(false);
    assertTrue(pred.apply(entry));
    assertTrue(pred.apply(entry, true));
    assertTrue(pred.apply(entry, false));
    // pattern only matches parent path
    when(pattern.matches(tree, ps)).thenReturn(false);
    when(pattern.matches(parent, ps)).thenReturn(true);
    when(pattern.matches(parent, null)).thenReturn(true);
    assertTrue(pred.apply(entry));
    assertTrue(pred.apply(entry, true));
    assertFalse(pred.apply(entry, false));
    verify(pattern, times(12)).matches(tree, ps);
    verify(pattern, times(4)).matches(parent, null);
    verify(pattern, never()).matches(parent, ps);
}
