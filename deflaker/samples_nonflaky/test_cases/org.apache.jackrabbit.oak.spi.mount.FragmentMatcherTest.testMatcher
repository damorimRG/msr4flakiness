@Test
public void testMatcher() {
    assertResult(PARTIAL_MATCH, "/content", "/");
    assertResult(FULL_MATCH, "/content", "/content");
    assertResult(FULL_MATCH, "/content", "/content/acme");
    assertResult(FULL_MATCH, "/content", "/content/acme/en");
    assertResult(PARTIAL_MATCH, "/content/*", "/");
    assertResult(PARTIAL_MATCH, "/content/*", "/content");
    assertResult(FULL_MATCH, "/content/*", "/content/acme");
    assertResult(FULL_MATCH, "/content/*", "/content/acme/site");
    assertResult(PARTIAL_MATCH, "/content$", "/");
    assertResult(FULL_MATCH, "/content$", "/content");
    assertResult(MISMATCH, "/content$", "/content/acme");
    assertResult(PARTIAL_MATCH, "/content/*$", "/");
    assertResult(PARTIAL_MATCH, "/content/*$", "/content");
    assertResult(FULL_MATCH, "/content/*$", "/content/acme");
    assertResult(MISMATCH, "/content/*$", "/content/acme/site");
    assertResult(PARTIAL_MATCH, "/content/*/site", "/");
    assertResult(PARTIAL_MATCH, "/content/*/site", "/content");
    assertResult(PARTIAL_MATCH, "/content/*/site", "/content/acme");
    assertResult(FULL_MATCH, "/content/*/site", "/content/acme/site");
    assertResult(FULL_MATCH, "/content/*/site", "/content/acme/site/en");
    assertResult(PARTIAL_MATCH, "/content/*/site/", "/");
    assertResult(PARTIAL_MATCH, "/content/*/site/", "/content");
    assertResult(PARTIAL_MATCH, "/content/*/site/", "/content/acme");
    assertResult(FULL_MATCH, "/content/*/site/", "/content/acme/site/en");
    assertResult(FULL_MATCH, "/content/*/site/", "/content/acme/site/en/home");
}
