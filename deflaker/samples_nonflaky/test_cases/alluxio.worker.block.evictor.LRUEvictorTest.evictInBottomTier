/**
 * Tests that the eviction in the bottom tier works.
 */
@Test
public void evictInBottomTier() throws Exception {
    int bottomTierOrdinal = TieredBlockStoreTestUtils.TIER_ORDINAL[TieredBlockStoreTestUtils.TIER_ORDINAL.length - 1];
    // capacity increases with index
    long[] bottomTierDirCapacity = TieredBlockStoreTestUtils.TIER_CAPACITY_BYTES[bottomTierOrdinal];
    int nDir = bottomTierDirCapacity.length;
    // fill in dirs from larger to smaller capacity with blockId equal to BLOCK_ID plus dir index
    for (int i = nDir - 1; i >= 0; i--) {
        cache(SESSION_ID, BLOCK_ID + i, bottomTierDirCapacity[i], bottomTierOrdinal, i);
    }
    BlockStoreLocation anyDirInBottomTier = BlockStoreLocation.anyDirInTier(TieredBlockStoreTestUtils.TIER_ALIAS[bottomTierOrdinal]);
    // request smallest capacity and update access time on the evicted block for nDir times, the dir
    // to evict blocks from should be in the same order as caching
    for (int i = nDir - 1; i >= 0; i--) {
        EvictionPlan plan = mEvictor.freeSpaceWithView(bottomTierDirCapacity[0], anyDirInBottomTier, mMetadataView);
        assertNotNull(plan);
        assertTrue(plan.toMove().isEmpty());
        assertEquals(1, plan.toEvict().size());
        long toEvictBlockId = plan.toEvict().get(0).getFirst();
        assertEquals(BLOCK_ID + i, toEvictBlockId);
        access(toEvictBlockId);
    }
}
