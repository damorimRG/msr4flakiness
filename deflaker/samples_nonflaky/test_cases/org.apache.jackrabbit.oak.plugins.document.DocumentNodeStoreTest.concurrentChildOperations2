// OAK-3646
// similar to previous test but both cluster nodes add a child node
@Test
public void concurrentChildOperations2() throws Exception {
    Clock clock = new Clock.Virtual();
    clock.waitUntil(System.currentTimeMillis());
    Revision.setClock(clock);
    MemoryDocumentStore store = new MemoryDocumentStore();
    DocumentNodeStore ns1 = builderProvider.newBuilder().setClusterId(1).setAsyncDelay(0).clock(clock).setDocumentStore(store).getNodeStore();
    DocumentNodeStore ns2 = builderProvider.newBuilder().setClusterId(2).setAsyncDelay(0).clock(clock).setDocumentStore(store).getNodeStore();
    // create initial /foo
    NodeBuilder b1 = ns1.getRoot().builder();
    b1.child("foo");
    merge(ns1, b1);
    // make changes visible on both cluster nodes
    ns1.runBackgroundOperations();
    ns2.runBackgroundOperations();
    // add child-1 on cluster node 1
    b1 = ns1.getRoot().builder();
    b1.child("foo").child("child-1");
    merge(ns1, b1);
    // push _lastRev updates to DocumentStore
    ns1.runBackgroundOperations();
    // remove child-2 on cluster node 2
    NodeBuilder b2 = ns2.getRoot().builder();
    b2.child("foo").child("child-2");
    merge(ns2, b2);
    // on cluster node 2, add of child-1 is not yet visible
    List<ChildNodeEntry> children = Lists.newArrayList(ns2.getRoot().getChildNode("foo").getChildNodeEntries());
    assertEquals(1, Iterables.size(children));
    // this will make changes from cluster node 1 visible
    ns2.runBackgroundOperations();
    children = Lists.newArrayList(ns2.getRoot().getChildNode("foo").getChildNodeEntries());
    assertEquals(2, Iterables.size(children));
}
