// OAK-4826
@Test
public void cpCleanupOrphaned() throws Exception {
    Clock clock = Clock.SIMPLE;
    MemoryNodeStore store = new MemoryNodeStore();
    // prepare index and initial content
    NodeBuilder builder = store.getRoot().builder();
    createIndexDefinition(builder.child(INDEX_DEFINITIONS_NAME), "rootIndex", true, false, ImmutableSet.of("foo"), null).setProperty(ASYNC_PROPERTY_NAME, "async");
    builder.child("testRoot").setProperty("foo", "abc");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    assertTrue("Expecting no checkpoints", store.listCheckpoints().size() == 0);
    IndexEditorProvider provider = new PropertyIndexEditorProvider();
    AsyncIndexUpdate async = new AsyncIndexUpdate("async", store, provider);
    async.run();
    assertTrue("Expecting one checkpoint", store.listCheckpoints().size() == 1);
    String cp = store.listCheckpoints().iterator().next();
    Map<String, String> info = store.checkpointInfo(cp);
    builder = store.getRoot().builder();
    builder.child("testRoot").setProperty("foo", "def");
    store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
    // wait until currentTimeMillis() changes. this ensures
    // the created value for the checkpoint is different
    // from the previous checkpoint.
    clock.waitUntil(clock.getTime() + 1);
    async.run();
    assertTrue("Expecting one checkpoint", store.listCheckpoints().size() == 1);
    cp = store.listCheckpoints().iterator().next();
    // create a new checkpoint with the info from the first checkpoint
    // this simulates an orphaned checkpoint that should be cleaned up.
    // the created timestamp is set back in time because cleanup preserves
    // checkpoints within the lease time frame.
    Calendar c = Calendar.getInstance();
    c.setTimeInMillis(clock.getTime() - 2 * async.getLeaseTimeOut());
    info.put("created", ISO8601.format(c));
    assertNotNull(store.checkpoint(TimeUnit.HOURS.toMillis(1), info));
    assertTrue("Expecting two checkpoints", store.listCheckpoints().size() == 2);
    async.cleanUpCheckpoints();
    assertTrue("Expecting one checkpoint", store.listCheckpoints().size() == 1);
    assertEquals(cp, store.listCheckpoints().iterator().next());
}
