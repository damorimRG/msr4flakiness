@SuppressWarnings("unchecked")
public void testCallbackPost() throws Exception {
    runTest("/callback", CallbackServlet.class, true, new Callable<Void>() {

        public Void call() throws Exception {
            MockDagEngineService.reset();
            URL url = createURL("", Collections.EMPTY_MAP);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());
            MockDagEngineService.reset();
            Map<String, String> params = new HashMap<String, String>();
            params.put("id", "error");
            params.put("status", "error");
            url = createURL("", params);
            conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("content-type", RestConstants.TEXT_CONTENT_TYPE);
            Properties props = new Properties();
            props.setProperty("a", "A");
            props.store(conn.getOutputStream(), StandardCharsets.UTF_8.name());
            assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());
            MockDagEngineService.reset();
            params = new HashMap<String, String>();
            params.put("id", "ok");
            params.put("status", "ok");
            url = createURL("", params);
            conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("content-type", RestConstants.TEXT_CONTENT_TYPE);
            props = new Properties();
            props.setProperty("a", "A");
            props.store(conn.getOutputStream(), StandardCharsets.UTF_8.name());
            assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());
            assertEquals(props, MockDagEngineService.properties);
            return null;
        }
    });
}
