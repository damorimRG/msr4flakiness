@Test
public void testRemove71() throws Exception {
    Node subtree = superuser.getNode(childNPath).addNode(nodeName3);
    superuser.save();
    Privilege[] rmChildNodes = privilegesFromName(Privilege.JCR_REMOVE_CHILD_NODES);
    Privilege[] rmNode = privilegesFromName(Privilege.JCR_REMOVE_NODE);
    // deny 'remove_child_nodes' at 'path'
    deny(path, privilegesFromName(Privilege.JCR_REMOVE_CHILD_NODES));
    // ... but allow 'remove_node' at childNPath
    allow(childNPath, rmNode);
    /*
         expected result:
         - node at subtreePath can't be removed.
         */
    String subtreePath = subtree.getPath();
    assertFalse(testSession.hasPermission(subtreePath, Session.ACTION_REMOVE));
    // additionally add remove_child_nodes privilege at 'childNPath'
    allow(childNPath, rmChildNodes);
    /*
         expected result:
         - node at subtreePath can be removed.
         */
    assertTrue(testSession.hasPermission(subtreePath, javax.jcr.Session.ACTION_REMOVE));
    assertTrue(testAcMgr.hasPrivileges(subtreePath, new Privilege[] { rmChildNodes[0], rmNode[0] }));
    testSession.getNode(subtreePath).remove();
    superuser.save();
}
