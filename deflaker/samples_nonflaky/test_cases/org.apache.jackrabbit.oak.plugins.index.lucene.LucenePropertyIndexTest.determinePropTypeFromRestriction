@Test
public void determinePropTypeFromRestriction() throws Exception {
    Tree idx = createIndex("test1", of("propa", "propb"));
    // Do not provide type information
    root.commit();
    Tree test = root.getTree("/").addChild("test");
    test.addChild("a").setProperty("propa", 10);
    test.addChild("b").setProperty("propa", 20);
    test.addChild("c").setProperty("propa", 30);
    test.addChild("c").setProperty("propb", "foo");
    test.addChild("d").setProperty("propb", "foo");
    root.commit();
    assertThat(explain("select [jcr:path] from [nt:base] where [propa] >= 20"), containsString("lucene:test1"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] >= 20", asList("/test/b", "/test/c"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] >= 20", asList("/test/b", "/test/c"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] = 20", asList("/test/b"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] <= 20", asList("/test/b", "/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] < 20", asList("/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 ", asList("/test/b", "/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] > 10 and [propa] < 30", asList("/test/b"));
    assertQuery("select [jcr:path] from [nt:base] where [propa] in (10,20)", asList("/test/b", "/test/a"));
    assertQuery("select [jcr:path] from [nt:base] where propa is not null", asList("/test/a", "/test/b", "/test/c"));
}
