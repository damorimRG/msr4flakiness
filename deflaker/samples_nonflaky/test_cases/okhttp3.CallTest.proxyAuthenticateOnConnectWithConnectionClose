/**
 * OkHttp has a bug where a `Connection: close` response header is not honored when establishing a
 * TLS tunnel. https://github.com/square/okhttp/issues/2426
 */
@Test
public void proxyAuthenticateOnConnectWithConnectionClose() throws Exception {
    server.useHttps(handshakeCertificates.sslSocketFactory(), true);
    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));
    server.enqueue(new MockResponse().setResponseCode(407).addHeader("Proxy-Authenticate: Basic realm=\"localhost\"").addHeader("Connection: close"));
    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
    server.enqueue(new MockResponse().setBody("response body"));
    client = client.newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()).proxy(server.toProxyAddress()).proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")).hostnameVerifier(new RecordingHostnameVerifier()).build();
    Request request = new Request.Builder().url("https://android.com/foo").build();
    Response response = client.newCall(request).execute();
    assertThat(response.body().string()).isEqualTo("response body");
    // First CONNECT call needs a new connection.
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);
    // Second CONNECT call needs a new connection.
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);
    // GET reuses the connection from the second connect.
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(1);
}
