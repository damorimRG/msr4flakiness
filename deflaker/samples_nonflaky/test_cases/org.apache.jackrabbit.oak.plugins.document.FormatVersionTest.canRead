@Test
public void canRead() {
    assertTrue(V1_8.canRead(V1_8));
    assertTrue(V1_8.canRead(V1_6));
    assertTrue(V1_8.canRead(V1_4));
    assertTrue(V1_8.canRead(V1_2));
    assertTrue(V1_8.canRead(V1_0));
    assertTrue(V1_8.canRead(V0));
    assertFalse(V1_6.canRead(V1_8));
    assertTrue(V1_6.canRead(V1_6));
    assertTrue(V1_6.canRead(V1_4));
    assertTrue(V1_6.canRead(V1_2));
    assertTrue(V1_6.canRead(V1_0));
    assertTrue(V1_6.canRead(V0));
    assertFalse(V1_4.canRead(V1_8));
    assertFalse(V1_4.canRead(V1_6));
    assertTrue(V1_4.canRead(V1_4));
    assertTrue(V1_4.canRead(V1_2));
    assertTrue(V1_4.canRead(V1_0));
    assertTrue(V1_4.canRead(V0));
    assertFalse(V1_2.canRead(V1_8));
    assertFalse(V1_2.canRead(V1_6));
    assertFalse(V1_2.canRead(V1_4));
    assertTrue(V1_2.canRead(V1_2));
    assertTrue(V1_2.canRead(V1_0));
    assertTrue(V1_2.canRead(V0));
    assertFalse(V1_0.canRead(V1_8));
    assertFalse(V1_0.canRead(V1_6));
    assertFalse(V1_0.canRead(V1_4));
    assertFalse(V1_0.canRead(V1_2));
    assertTrue(V1_0.canRead(V1_0));
    assertTrue(V1_0.canRead(V0));
}
