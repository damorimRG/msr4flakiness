@Test
public void testFromExistingSparkAction() {
    final SparkActionBuilder builder = getBuilderInstance();
    builder.withName(NAME).withResourceManager(RESOURCE_MANAGER).withNameNode(NAME_NODE).withConfigProperty(MAPRED_JOB_QUEUE_NAME, DEFAULT).withPrepare(new PrepareBuilder().withDelete(PATH_TO_DELETE).withMkdir(PATH_TO_MKDIR).build()).withLauncher(new LauncherBuilder().withMemoryMb(1024L).withVCores(2L).withQueue(DEFAULT).withSharelib(DEFAULT).withViewAcl(DEFAULT).withModifyAcl(DEFAULT).build()).withArg(ARGS[0]).withArg(ARGS[1]).withMaster(DEFAULT).withMode(DEFAULT).withActionName(DEFAULT).withActionClass(DEFAULT).withJar(DEFAULT).withSparkOpts(DEFAULT).withArchive(DEFAULT).withFile(DEFAULT);
    final SparkAction action = builder.build();
    final SparkActionBuilder fromExistingBuilder = getBuilderInstance(action);
    final String newName = "fromExisting_" + NAME;
    fromExistingBuilder.withName(newName).withoutArg(ARGS[1]).withArg(ARGS[2]);
    final SparkAction modifiedAction = fromExistingBuilder.build();
    assertEquals(newName, modifiedAction.getName());
    assertEquals(action.getNameNode(), modifiedAction.getNameNode());
    final Map<String, String> expectedConfiguration = new LinkedHashMap<>();
    expectedConfiguration.put(MAPRED_JOB_QUEUE_NAME, DEFAULT);
    assertEquals(expectedConfiguration, modifiedAction.getConfiguration());
    assertEquals(Arrays.asList(ARGS[0], ARGS[2]), modifiedAction.getArgs());
    assertEquals(PATH_TO_DELETE, modifiedAction.getPrepare().getDeletes().get(0).getPath());
    assertEquals(PATH_TO_MKDIR, modifiedAction.getPrepare().getMkdirs().get(0).getPath());
    assertEquals(1024L, modifiedAction.getLauncher().getMemoryMb());
    assertEquals(2L, modifiedAction.getLauncher().getVCores());
    assertEquals(DEFAULT, modifiedAction.getLauncher().getQueue());
    assertEquals(DEFAULT, modifiedAction.getLauncher().getSharelib());
    assertEquals(DEFAULT, modifiedAction.getLauncher().getViewAcl());
    assertEquals(DEFAULT, modifiedAction.getLauncher().getModifyAcl());
    assertEquals(action.getMaster(), modifiedAction.getMaster());
    assertEquals(action.getMode(), modifiedAction.getMode());
    assertEquals(action.getActionName(), modifiedAction.getActionName());
    assertEquals(action.getActionClass(), modifiedAction.getActionClass());
    assertEquals(action.getJar(), modifiedAction.getJar());
    assertEquals(action.getSparkOpts(), modifiedAction.getSparkOpts());
}
