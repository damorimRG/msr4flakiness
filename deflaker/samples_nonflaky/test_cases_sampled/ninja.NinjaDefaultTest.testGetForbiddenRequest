@Test
public void testGetForbiddenRequest() throws Exception {
    when(ninjaProperties.getWithDefault(ArgumentMatchers.eq(NinjaConstant.LOCATION_VIEW_HTML_FORBIDDEN_KEY), ArgumentMatchers.eq(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN))).thenReturn(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN);
    ForbiddenRequestException exception = new ForbiddenRequestException("not important");
    // real test:
    Result result = ninjaDefault.getForbiddenResult(contextImpl, exception);
    assertThat(result.getStatusCode(), equalTo(Result.SC_403_FORBIDDEN));
    assertThat(result.getTemplate(), equalTo(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN));
    assertTrue(result.getRenderable() instanceof Message);
    verify(messages).getWithDefault(ArgumentMatchers.eq(NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_KEY), ArgumentMatchers.eq(NinjaConstant.I18N_NINJA_SYSTEM_FORBIDDEN_REQUEST_TEXT_DEFAULT), ArgumentMatchers.eq(contextImpl), any(Optional.class));
    verify(messages).getWithDefault(ArgumentMatchers.eq(exception.getMessage()), ArgumentMatchers.eq(exception.getLocalizedMessage()), ArgumentMatchers.eq(contextImpl), any(Optional.class));
    verify(ninjaProperties).getWithDefault(ArgumentMatchers.eq(NinjaConstant.LOCATION_VIEW_HTML_FORBIDDEN_KEY), ArgumentMatchers.eq(NinjaConstant.LOCATION_VIEW_FTL_HTML_FORBIDDEN));
}
