@Test
public void testCustomOptionsValueAndNoOverrides() throws Exception {
    final Collection<String> headers = new ArrayList<String>();
    FilterConfig filterConfig = Mockito.mock(FilterConfig.class);
    Mockito.when(filterConfig.getInitParameter(XFrameOptionsFilter.CUSTOM_HEADER_PARAM)).thenReturn("SAMEORIGIN");
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    FilterChain chain = Mockito.mock(FilterChain.class);
    Mockito.doAnswer(new Answer() {

        @Override
        public Object answer(InvocationOnMock invocation) throws Throwable {
            Object[] args = invocation.getArguments();
            HttpServletResponse resp = (HttpServletResponse) args[1];
            Assert.assertTrue("Header should be visible inside chain and filters.", resp.containsHeader(X_FRAME_OPTIONS));
            // let's try and set another value for the header and make
            // sure that it doesn't overwrite the configured value
            Assert.assertTrue(resp instanceof XFrameOptionsFilter.XFrameOptionsResponseWrapper);
            resp.setHeader(X_FRAME_OPTIONS, "LJM");
            return null;
        }
    }).when(chain).doFilter(any(), any());
    Mockito.doAnswer(new Answer() {

        @Override
        public Object answer(InvocationOnMock invocation) throws Throwable {
            Object[] args = invocation.getArguments();
            Assert.assertEquals("Options value incorrect should be SAMEORIGIN but is: " + args[1], "SAMEORIGIN", args[1]);
            headers.add((String) args[1]);
            return null;
        }
    }).when(response).setHeader(any(), any());
    XFrameOptionsFilter filter = new XFrameOptionsFilter();
    filter.init(filterConfig);
    filter.doFilter(request, response, chain);
    assertThat(headers.size()).withFailMessage("X-Frame-Options count not equal to 1.").isOne();
    assertThat(headers.toArray()[0]).withFailMessage("X-Frame-Options count not equal to 1.").isEqualTo("SAMEORIGIN");
}
