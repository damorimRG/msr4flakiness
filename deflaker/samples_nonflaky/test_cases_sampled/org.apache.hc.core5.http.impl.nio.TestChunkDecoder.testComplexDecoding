@Test
public void testComplexDecoding() throws Exception {
    final String s = "10;key=\"value\"\r\n1234567890123456\r\n" + "5\r\n12345\r\n5\r\n12345\r\n0\r\nFooter1: abcde\r\nFooter2: fghij\r\n\r\n";
    final ReadableByteChannel channel = new ReadableByteChannelMock(new String[] { s }, StandardCharsets.US_ASCII);
    final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII);
    final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics();
    final ChunkDecoder decoder = new ChunkDecoder(channel, inbuf, metrics);
    final ByteBuffer dst = ByteBuffer.allocate(1024);
    int bytesRead = 0;
    while (dst.hasRemaining() && !decoder.isCompleted()) {
        final int i = decoder.read(dst);
        if (i > 0) {
            bytesRead += i;
        }
    }
    Assert.assertEquals(26, bytesRead);
    Assert.assertEquals("12345678901234561234512345", CodecTestUtils.convert(dst));
    final List<? extends Header> trailers = decoder.getTrailers();
    Assert.assertEquals(2, trailers.size());
    Assert.assertEquals("Footer1", trailers.get(0).getName());
    Assert.assertEquals("abcde", trailers.get(0).getValue());
    Assert.assertEquals("Footer2", trailers.get(1).getName());
    Assert.assertEquals("fghij", trailers.get(1).getValue());
    dst.clear();
    bytesRead = decoder.read(dst);
    Assert.assertEquals(-1, bytesRead);
    Assert.assertTrue(decoder.isCompleted());
}
