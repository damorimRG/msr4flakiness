@Test
public void testProduceDataWithBuffering2() throws Exception {
    final AsyncEntityProducer producer = new ChunkByteAsyncEntityProducer(5, ContentType.TEXT_PLAIN, new byte[] { '1' }, new byte[] { '2' }, new byte[] { '3' }, new byte[] { '4', '5' }, new byte[] { '6' }, new byte[] { '7', '8' }, new byte[] { '9', '0' });
    final WritableByteChannelMock byteChannel = new WritableByteChannelMock(1024);
    final DataStreamChannel streamChannel = new BasicDataStreamChannel(byteChannel);
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("12345", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertTrue(byteChannel.isOpen());
    Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII));
    producer.produce(streamChannel);
    Assert.assertFalse(byteChannel.isOpen());
    Assert.assertEquals("67890", byteChannel.dump(StandardCharsets.US_ASCII));
}
