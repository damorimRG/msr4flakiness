@Test
public void testMultipleSecrets() throws Exception {
    TestSignerSecretProvider secretProvider = new TestSignerSecretProvider();
    Signer signer = new Signer(secretProvider);
    secretProvider.setCurrentSecret("secretB");
    String t1 = "test";
    String s1 = signer.sign(t1);
    String e1 = signer.verifyAndExtract(s1);
    Assert.assertEquals(t1, e1);
    secretProvider.setPreviousSecret("secretA");
    String t2 = "test";
    String s2 = signer.sign(t2);
    String e2 = signer.verifyAndExtract(s2);
    Assert.assertEquals(t2, e2);
    // check is using current secret for signing
    Assert.assertEquals(s1, s2);
    secretProvider.setCurrentSecret("secretC");
    secretProvider.setPreviousSecret("secretB");
    String t3 = "test";
    String s3 = signer.sign(t3);
    String e3 = signer.verifyAndExtract(s3);
    Assert.assertEquals(t3, e3);
    // check not using current secret for signing
    Assert.assertNotEquals(s1, s3);
    String e1b = signer.verifyAndExtract(s1);
    // previous secret still valid
    Assert.assertEquals(t1, e1b);
    secretProvider.setCurrentSecret("secretD");
    secretProvider.setPreviousSecret("secretC");
    try {
        // previous secret no longer valid
        signer.verifyAndExtract(s1);
        Assert.fail();
    } catch (SignerException ex) {
    // Expected
    }
}
