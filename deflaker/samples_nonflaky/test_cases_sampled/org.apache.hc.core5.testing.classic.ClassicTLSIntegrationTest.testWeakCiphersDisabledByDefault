@Test
public void testWeakCiphersDisabledByDefault() throws Exception {
    requester = RequesterBootstrap.bootstrap().setSslContext(SSLTestContexts.createClientSSLContext()).setSocketConfig(SocketConfig.custom().setSoTimeout(TIMEOUT).build()).setStreamListener(LoggingHttp1StreamListener.INSTANCE).setConnPoolListener(LoggingConnPoolListener.INSTANCE).create();
    final String[] weakCiphersSuites = { "SSL_RSA_WITH_RC4_128_SHA", "SSL_RSA_WITH_3DES_EDE_CBC_SHA", "TLS_DH_anon_WITH_AES_128_CBC_SHA", "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", "SSL_RSA_WITH_NULL_SHA", "SSL_RSA_WITH_3DES_EDE_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", "TLS_DH_anon_WITH_AES_256_GCM_SHA384", "TLS_ECDH_anon_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_NULL_SHA256", "SSL_RSA_EXPORT_WITH_RC4_40_MD5", "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", "TLS_KRB5_EXPORT_WITH_RC4_40_SHA", "SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5" };
    for (final String cipherSuite : weakCiphersSuites) {
        server = ServerBootstrap.bootstrap().setSslContext(SSLTestContexts.createServerSSLContext()).setSslSetupHandler(new Callback<SSLParameters>() {

            @Override
            public void execute(final SSLParameters sslParameters) {
                sslParameters.setProtocols(new String[] { cipherSuite });
            }
        }).create();
        try {
            server.start();
            final HttpContext context = new BasicHttpContext();
            final HttpHost target = new HttpHost("https", "localhost", server.getLocalPort());
            final ClassicHttpRequest request1 = new BasicClassicHttpRequest(Method.POST, "/stuff");
            request1.setEntity(new StringEntity("some stuff", ContentType.TEXT_PLAIN));
            try (final ClassicHttpResponse response1 = requester.execute(target, request1, TIMEOUT, context)) {
                EntityUtils.consume(response1.getEntity());
            }
            Assert.fail("IOException expected");
        } catch (final IOException | IllegalArgumentException expected) {
        } finally {
            server.close(CloseMode.IMMEDIATE);
        }
    }
}
