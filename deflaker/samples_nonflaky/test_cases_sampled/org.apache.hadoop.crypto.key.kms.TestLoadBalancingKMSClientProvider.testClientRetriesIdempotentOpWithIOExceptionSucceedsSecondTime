/**
 * Tests whether retryPolicy retries on idempotent operations
 * when encountering IOException.
 * @throws Exception
 */
@Test
public void testClientRetriesIdempotentOpWithIOExceptionSucceedsSecondTime() throws Exception {
    Configuration conf = new Configuration();
    final String keyName = "test";
    final KeyProvider.KeyVersion keyVersion = new KMSClientProvider.KMSKeyVersion(keyName, "v1", new byte[0]);
    // Setting total failover attempts to .
    conf.setInt(CommonConfigurationKeysPublic.KMS_CLIENT_FAILOVER_MAX_RETRIES_KEY, 10);
    KMSClientProvider p1 = mock(KMSClientProvider.class);
    when(p1.getCurrentKey(Mockito.anyString())).thenThrow(new IOException("p1")).thenReturn(keyVersion);
    KMSClientProvider p2 = mock(KMSClientProvider.class);
    when(p2.getCurrentKey(Mockito.anyString())).thenThrow(new IOException("p2"));
    KMSClientProvider p3 = mock(KMSClientProvider.class);
    when(p3.getCurrentKey(Mockito.anyString())).thenThrow(new IOException("p3"));
    when(p1.getKMSUrl()).thenReturn("p1");
    when(p2.getKMSUrl()).thenReturn("p2");
    when(p3.getKMSUrl()).thenReturn("p3");
    LoadBalancingKMSClientProvider kp = new LoadBalancingKMSClientProvider(new KMSClientProvider[] { p1, p2, p3 }, 0, conf);
    KeyProvider.KeyVersion result = kp.getCurrentKey(keyName);
    assertEquals(keyVersion, result);
    verify(kp.getProviders()[0], Mockito.times(2)).getCurrentKey(Mockito.eq(keyName));
    verify(kp.getProviders()[1], Mockito.times(1)).getCurrentKey(Mockito.eq(keyName));
    verify(kp.getProviders()[2], Mockito.times(1)).getCurrentKey(Mockito.eq(keyName));
}
