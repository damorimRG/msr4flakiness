@Test(timeout = 4000)
public void testFiniteGroupResolutionTime() throws Exception {
    Configuration conf = new Configuration();
    String userName = "foobarnonexistinguser";
    String commandTimeoutMessage = "ran longer than the configured timeout limit";
    long testTimeout = 500L;
    // Test a 1 second max-runtime timeout
    conf.setLong(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_SHELL_COMMAND_TIMEOUT_KEY, testTimeout);
    TestDelayedGroupCommand mapping = ReflectionUtils.newInstance(TestDelayedGroupCommand.class, conf);
    ShellCommandExecutor executor = mapping.createGroupExecutor(userName);
    assertEquals("Expected the group names executor to carry the configured timeout", testTimeout, executor.getTimeoutInterval());
    executor = mapping.createGroupIDExecutor(userName);
    assertEquals("Expected the group ID executor to carry the configured timeout", testTimeout, executor.getTimeoutInterval());
    assertEquals("Expected no groups to be returned given a shell command timeout", 0, mapping.getGroups(userName).size());
    assertTrue("Expected the logs to carry " + "a message about command timeout but was: " + shellMappingLog.getOutput(), shellMappingLog.getOutput().contains(commandTimeoutMessage));
    shellMappingLog.clearOutput();
    // Test also the parent Groups framework for expected behaviour
    conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, TestDelayedGroupCommand.class, GroupMappingServiceProvider.class);
    Groups groups = new Groups(conf);
    try {
        groups.getGroups(userName);
        fail("The groups framework call should " + "have failed with a command timeout");
    } catch (IOException e) {
        assertTrue("Expected the logs to carry " + "a message about command timeout but was: " + shellMappingLog.getOutput(), shellMappingLog.getOutput().contains(commandTimeoutMessage));
    }
    shellMappingLog.clearOutput();
    // Test the no-timeout (default) configuration
    conf = new Configuration();
    long defaultTimeout = CommonConfigurationKeys.HADOOP_SECURITY_GROUP_SHELL_COMMAND_TIMEOUT_DEFAULT;
    mapping = ReflectionUtils.newInstance(TestDelayedGroupCommand.class, conf);
    executor = mapping.createGroupExecutor(userName);
    assertEquals("Expected the group names executor to carry the default timeout", defaultTimeout, executor.getTimeoutInterval());
    executor = mapping.createGroupIDExecutor(userName);
    assertEquals("Expected the group ID executor to carry the default timeout", defaultTimeout, executor.getTimeoutInterval());
    mapping.getGroups(userName);
    assertFalse("Didn't expect a timeout of command in execution but logs carry it: " + shellMappingLog.getOutput(), shellMappingLog.getOutput().contains(commandTimeoutMessage));
}
