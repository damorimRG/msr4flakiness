/**
 * When mark() is used on BufferedInputStream, the request
 * size on the checksum file system can be small.  However,
 * checksum file system currently depends on the request size
 * >= bytesPerSum to work properly.
 */
@Test
public void testTruncatedInputBug() throws IOException {
    final int ioBufSize = 512;
    final int fileSize = ioBufSize * 4;
    int filePos = 0;
    Configuration conf = new Configuration();
    conf.setInt("io.file.buffer.size", ioBufSize);
    FileSystem fileSys = FileSystem.getLocal(conf);
    try {
        // First create a test input file.
        Path testFile = new Path(TEST_ROOT_DIR, "HADOOP-1489");
        writeFile(fileSys, testFile, fileSize);
        assertTrue(fileSys.exists(testFile));
        assertTrue(fileSys.getFileStatus(testFile).getLen() == fileSize);
        // Now read the file for ioBufSize bytes
        FSDataInputStream in = fileSys.open(testFile, ioBufSize);
        // seek beyond data buffered by open
        filePos += ioBufSize * 2 + (ioBufSize - 10);
        in.seek(filePos);
        // read 4 more bytes before marking
        for (int i = 0; i < 4; ++i) {
            if (in.read() == -1) {
                break;
            }
            ++filePos;
        }
        // Now set mark() to trigger the bug
        // NOTE: in the fixed code, mark() does nothing (not supported) and
        // hence won't trigger this bug.
        in.mark(1);
        System.out.println("MARKED");
        // Try to read the rest
        while (filePos < fileSize) {
            if (in.read() == -1) {
                break;
            }
            ++filePos;
        }
        in.close();
        System.out.println("Read " + filePos + " bytes." + " file size=" + fileSize);
        assertTrue(filePos == fileSize);
    } finally {
        try {
            fileSys.close();
        } catch (Exception e) {
        // noop
        }
    }
}
