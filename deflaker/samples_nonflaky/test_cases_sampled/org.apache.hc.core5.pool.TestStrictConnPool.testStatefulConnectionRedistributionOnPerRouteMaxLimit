@Test
public void testStatefulConnectionRedistributionOnPerRouteMaxLimit() throws Exception {
    final HttpConnection conn1 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn2 = Mockito.mock(HttpConnection.class);
    final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 10);
    pool.setMaxPerRoute("somehost", 2);
    pool.setMaxTotal(2);
    final Future<PoolEntry<String, HttpConnection>> future1 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future2 = pool.lease("somehost", null);
    Assert.assertTrue(future1.isDone());
    final PoolEntry<String, HttpConnection> entry1 = future1.get();
    entry1.assignConnection(conn1);
    Assert.assertNotNull(entry1);
    Assert.assertTrue(future2.isDone());
    final PoolEntry<String, HttpConnection> entry2 = future2.get();
    Assert.assertNotNull(entry2);
    entry2.assignConnection(conn2);
    PoolStats totals = pool.getTotalStats();
    Assert.assertEquals(0, totals.getAvailable());
    Assert.assertEquals(2, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
    entry1.updateState("some-stuff");
    pool.release(entry1, true);
    entry2.updateState("some-stuff");
    pool.release(entry2, true);
    final Future<PoolEntry<String, HttpConnection>> future3 = pool.lease("somehost", "some-stuff");
    final Future<PoolEntry<String, HttpConnection>> future4 = pool.lease("somehost", "some-stuff");
    Assert.assertTrue(future1.isDone());
    final PoolEntry<String, HttpConnection> entry3 = future3.get();
    Assert.assertNotNull(entry3);
    Assert.assertSame(conn2, entry3.getConnection());
    Assert.assertTrue(future4.isDone());
    final PoolEntry<String, HttpConnection> entry4 = future4.get();
    Assert.assertNotNull(entry4);
    Assert.assertSame(conn1, entry4.getConnection());
    pool.release(entry3, true);
    pool.release(entry4, true);
    totals = pool.getTotalStats();
    Assert.assertEquals(2, totals.getAvailable());
    Assert.assertEquals(0, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
    final Future<PoolEntry<String, HttpConnection>> future5 = pool.lease("somehost", "some-other-stuff");
    Assert.assertTrue(future5.isDone());
    Mockito.verify(conn2).close(CloseMode.GRACEFUL);
    Mockito.verify(conn1, Mockito.never()).close(ArgumentMatchers.<CloseMode>any());
    totals = pool.getTotalStats();
    Assert.assertEquals(1, totals.getAvailable());
    Assert.assertEquals(1, totals.getLeased());
}
