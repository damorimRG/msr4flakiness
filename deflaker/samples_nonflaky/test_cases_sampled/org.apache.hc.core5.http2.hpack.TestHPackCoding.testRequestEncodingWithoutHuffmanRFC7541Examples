@Test
public void testRequestEncodingWithoutHuffmanRFC7541Examples() throws Exception {
    final OutboundDynamicTable dynamicTable = new OutboundDynamicTable();
    final HPackEncoder encoder = new HPackEncoder(dynamicTable, StandardCharsets.US_ASCII);
    final ByteArrayBuffer buf = new ByteArrayBuffer(256);
    final List<Header> headers1 = Arrays.<Header>asList(new BasicHeader(":method", "GET"), new BasicHeader(":scheme", "http"), new BasicHeader(":path", "/"), new BasicHeader(":authority", "www.example.com"));
    encoder.encodeHeaders(buf, headers1, false, false);
    final byte[] expected1 = createByteArray(0x82, 0x86, 0x84, 0x41, 0x0f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d);
    Assert.assertArrayEquals(expected1, buf.toByteArray());
    Assert.assertEquals(1, dynamicTable.dynamicLength());
    assertHeaderEquals(new BasicHeader(":authority", "www.example.com"), dynamicTable.getDynamicEntry(0));
    Assert.assertEquals(57, dynamicTable.getCurrentSize());
    final List<Header> headers2 = Arrays.<Header>asList(new BasicHeader(":method", "GET"), new BasicHeader(":scheme", "http"), new BasicHeader(":path", "/"), new BasicHeader(":authority", "www.example.com"), new BasicHeader("cache-control", "no-cache"));
    buf.clear();
    encoder.encodeHeaders(buf, headers2, false, false);
    final byte[] expected2 = createByteArray(0x82, 0x86, 0x84, 0xbe, 0x58, 0x08, 0x6e, 0x6f, 0x2d, 0x63, 0x61, 0x63, 0x68, 0x65);
    Assert.assertArrayEquals(expected2, buf.toByteArray());
    Assert.assertEquals(2, dynamicTable.dynamicLength());
    assertHeaderEquals(new BasicHeader("cache-control", "no-cache"), dynamicTable.getDynamicEntry(0));
    assertHeaderEquals(new BasicHeader(":authority", "www.example.com"), dynamicTable.getDynamicEntry(1));
    Assert.assertEquals(110, dynamicTable.getCurrentSize());
    final List<Header> headers3 = Arrays.<Header>asList(new BasicHeader(":method", "GET"), new BasicHeader(":scheme", "https"), new BasicHeader(":path", "/index.html"), new BasicHeader(":authority", "www.example.com"), new BasicHeader("custom-key", "custom-value"));
    buf.clear();
    encoder.encodeHeaders(buf, headers3, false, false);
    final byte[] expected3 = createByteArray(0x82, 0x87, 0x85, 0xbf, 0x40, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x6b, 0x65, 0x79, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65);
    Assert.assertArrayEquals(expected3, buf.toByteArray());
    Assert.assertEquals(3, dynamicTable.dynamicLength());
    assertHeaderEquals(new BasicHeader("custom-key", "custom-value"), dynamicTable.getDynamicEntry(0));
    assertHeaderEquals(new BasicHeader("cache-control", "no-cache"), dynamicTable.getDynamicEntry(1));
    assertHeaderEquals(new BasicHeader(":authority", "www.example.com"), dynamicTable.getDynamicEntry(2));
    Assert.assertEquals(164, dynamicTable.getCurrentSize());
}
