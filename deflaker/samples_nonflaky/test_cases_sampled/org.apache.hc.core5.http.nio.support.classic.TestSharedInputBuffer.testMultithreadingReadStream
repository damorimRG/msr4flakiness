@Test
public void testMultithreadingReadStream() throws Exception {
    final SharedInputBuffer inputBuffer = new SharedInputBuffer(10);
    final CapacityChannel capacityChannel = Mockito.mock(CapacityChannel.class);
    inputBuffer.updateCapacity(capacityChannel);
    Mockito.verify(capacityChannel).update(10);
    Mockito.reset(capacityChannel);
    final ExecutorService executorService = Executors.newFixedThreadPool(2);
    final Future<Boolean> task1 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            final Charset charset = StandardCharsets.US_ASCII;
            final Random rnd = new Random(System.currentTimeMillis());
            for (int i = 0; i < 5; i++) {
                inputBuffer.fill(charset.encode("1234567890"));
                Thread.sleep(rnd.nextInt(250));
            }
            inputBuffer.markEndStream();
            return Boolean.TRUE;
        }
    });
    final Future<String> task2 = executorService.submit(new Callable<String>() {

        @Override
        public String call() throws Exception {
            final Charset charset = StandardCharsets.US_ASCII;
            final StringBuilder buf = new StringBuilder();
            final byte[] tmp = new byte[10];
            int l;
            while ((l = inputBuffer.read(tmp, 0, tmp.length)) != -1) {
                buf.append(charset.decode(ByteBuffer.wrap(tmp, 0, l)));
            }
            return buf.toString();
        }
    });
    Assert.assertEquals(Boolean.TRUE, task1.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Assert.assertEquals("12345678901234567890123456789012345678901234567890", task2.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Mockito.verify(capacityChannel, Mockito.atLeast(1)).update(ArgumentMatchers.anyInt());
}
