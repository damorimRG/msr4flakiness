@Test
public void testMultithreadingWriteStream() throws Exception {
    final Charset charset = StandardCharsets.US_ASCII;
    final SharedOutputBuffer outputBuffer = new SharedOutputBuffer(20);
    final WritableByteChannelMock channel = new WritableByteChannelMock(1024);
    final DataStreamChannelMock dataStreamChannel = new DataStreamChannelMock(channel);
    final ExecutorService executorService = Executors.newFixedThreadPool(2);
    final Future<Boolean> task1 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            final byte[] tmp = "1234567890".getBytes(charset);
            outputBuffer.write(tmp, 0, tmp.length);
            outputBuffer.write(tmp, 0, tmp.length);
            outputBuffer.write('1');
            outputBuffer.write('2');
            outputBuffer.write(tmp, 0, tmp.length);
            outputBuffer.write(tmp, 0, tmp.length);
            outputBuffer.write(tmp, 0, tmp.length);
            outputBuffer.writeCompleted();
            outputBuffer.writeCompleted();
            return Boolean.TRUE;
        }
    });
    final Future<Boolean> task2 = executorService.submit(new Callable<Boolean>() {

        @Override
        public Boolean call() throws Exception {
            for (; ; ) {
                outputBuffer.flush(dataStreamChannel);
                if (outputBuffer.isEndStream()) {
                    break;
                }
                if (!outputBuffer.hasData()) {
                    dataStreamChannel.awaitOutputRequest();
                }
            }
            return Boolean.TRUE;
        }
    });
    Assert.assertEquals(Boolean.TRUE, task1.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Assert.assertEquals(Boolean.TRUE, task2.get(TIMEOUT.getDuration(), TIMEOUT.getTimeUnit()));
    Assert.assertEquals("1234567890123456789012123456789012345678901234567890", new String(channel.toByteArray(), charset));
}
