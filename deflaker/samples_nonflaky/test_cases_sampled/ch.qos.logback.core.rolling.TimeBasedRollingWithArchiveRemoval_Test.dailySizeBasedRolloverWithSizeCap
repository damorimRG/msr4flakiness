@Test
public void dailySizeBasedRolloverWithSizeCap() {
    SizeAndTimeBasedFNATP<Object> sizeAndTimeBasedFNATP = new SizeAndTimeBasedFNATP<Object>();
    sizeAndTimeBasedFNATP.invocationGate = new FixedRateInvocationGate(ticksPerPeriod / 8);
    long bytesPerPeriod = 17000;
    long fileSize = (bytesPerPeriod) / 5;
    int expectedFileCount = 10;
    long sizeCap = expectedFileCount * fileSize;
    sizeAndTimeBasedFNATP.setMaxFileSize(new FileSize(fileSize));
    tbfnatp = sizeAndTimeBasedFNATP;
    this.slashCount = computeSlashCount(DAILY_DATE_PATTERN);
    // 2016-03-05 00:14:39 CET
    long simulatedTime = 1457133279186L;
    ConfigParameters params = new ConfigParameters(simulatedTime);
    String fileNamePattern = randomOutputDir + "/%d{" + DAILY_DATE_PATTERN + "}-clean.%i";
    params.maxHistory(60).fileNamePattern(fileNamePattern).simulatedNumberOfPeriods(10).sizeCap(sizeCap);
    logOverMultiplePeriods(params);
    List<File> foundFiles = findFilesByPattern("\\d{4}-\\d{2}-\\d{2}-clean(\\.\\d)");
    Collections.sort(foundFiles, new Comparator<File>() {

        public int compare(File f0, File f1) {
            String s0 = f0.getName().toString();
            String s1 = f1.getName().toString();
            return s0.compareTo(s1);
        }
    });
    System.out.print(foundFiles);
    StatusPrinter.print(context);
    checkFileCount(expectedFileCount - 1);
}
