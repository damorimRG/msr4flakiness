// Test staticMap refreshing
@Test
public void testStaticMapUpdate() throws IOException {
    assumeNotWindows();
    File tempStaticMapFile = File.createTempFile("nfs-", ".map");
    tempStaticMapFile.delete();
    Configuration conf = new Configuration();
    conf.setLong(IdMappingConstant.USERGROUPID_UPDATE_MILLIS_KEY, 1000);
    conf.set(IdMappingConstant.STATIC_ID_MAPPING_FILE_KEY, tempStaticMapFile.getPath());
    ShellBasedIdMapping refIdMapping = new ShellBasedIdMapping(conf, true);
    ShellBasedIdMapping incrIdMapping = new ShellBasedIdMapping(conf);
    BiMap<Integer, String> uidNameMap = refIdMapping.getUidNameMap();
    BiMap<Integer, String> gidNameMap = refIdMapping.getGidNameMap();
    // Force empty map, to see effect of incremental map update of calling
    // getUid()
    incrIdMapping.clearNameMaps();
    uidNameMap = refIdMapping.getUidNameMap();
    for (BiMap.Entry<Integer, String> me : uidNameMap.entrySet()) {
        tempStaticMapFile.delete();
        incrIdMapping.clearNameMaps();
        Integer id = me.getKey();
        String name = me.getValue();
        // The static map is empty, so the id found for "name" would be
        // the same as "id"
        Integer nid = incrIdMapping.getUid(name);
        assertEquals(id, nid);
        // Clear map and update staticMap file
        incrIdMapping.clearNameMaps();
        Integer rid = id + 10000;
        String smapStr = "uid " + rid + " " + id;
        createStaticMapFile(tempStaticMapFile, smapStr);
        // Now the id found for "name" should be the id specified by
        // the staticMap
        nid = incrIdMapping.getUid(name);
        assertEquals(rid, nid);
    }
    // Force empty map, to see effect of incremental map update of calling
    // getGid()
    incrIdMapping.clearNameMaps();
    gidNameMap = refIdMapping.getGidNameMap();
    for (BiMap.Entry<Integer, String> me : gidNameMap.entrySet()) {
        tempStaticMapFile.delete();
        incrIdMapping.clearNameMaps();
        Integer id = me.getKey();
        String name = me.getValue();
        // The static map is empty, so the id found for "name" would be
        // the same as "id"
        Integer nid = incrIdMapping.getGid(name);
        assertEquals(id, nid);
        // Clear map and update staticMap file
        incrIdMapping.clearNameMaps();
        Integer rid = id + 10000;
        String smapStr = "gid " + rid + " " + id;
        // Sleep a bit to avoid that two changes have the same modification time
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        // Do nothing
        }
        createStaticMapFile(tempStaticMapFile, smapStr);
        // Now the id found for "name" should be the id specified by
        // the staticMap
        nid = incrIdMapping.getGid(name);
        assertEquals(rid, nid);
    }
}
