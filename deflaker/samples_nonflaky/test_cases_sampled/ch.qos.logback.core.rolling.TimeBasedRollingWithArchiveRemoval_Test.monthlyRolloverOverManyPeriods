// test that the number of files at the end of the test is same as the expected number taking into account end dates
// near the beginning of a new year. This test has been run in a loop with start date varying over a two years
// with success.
@Test
public void monthlyRolloverOverManyPeriods() {
    this.slashCount = computeSlashCount(MONTHLY_CRONOLOG_DATE_PATTERN);
    int maxHistory = 2;
    int simulatedNumberOfPeriods = 30;
    String fileNamePattern = randomOutputDir + "/%d{" + MONTHLY_CRONOLOG_DATE_PATTERN + "}/clean.txt.zip";
    cp.maxHistory(maxHistory).fileNamePattern(fileNamePattern).simulatedNumberOfPeriods(simulatedNumberOfPeriods).periodDurationInMillis(MILLIS_IN_MONTH);
    long startTime = currentTime;
    long endTime = logOverMultiplePeriods(cp);
    System.out.println("randomOutputDir:" + randomOutputDir);
    System.out.println("start:" + startTime + ", end=" + endTime);
    int differenceInMonths = RollingCalendar.diffInMonths(startTime, endTime);
    System.out.println("differenceInMonths:" + differenceInMonths);
    Calendar startTimeAsCalendar = Calendar.getInstance();
    startTimeAsCalendar.setTimeInMillis(startTime);
    int indexOfStartPeriod = startTimeAsCalendar.get(Calendar.MONTH);
    boolean withExtraFolder = extraFolder(differenceInMonths, MONTHS_IN_YEAR, indexOfStartPeriod, maxHistory);
    checkFileCount(expectedCountWithFolders(maxHistory, withExtraFolder));
}
