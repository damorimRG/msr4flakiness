@Test
public void testMaxLimits() throws Exception {
    final HttpConnection conn1 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn2 = Mockito.mock(HttpConnection.class);
    final HttpConnection conn3 = Mockito.mock(HttpConnection.class);
    final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);
    pool.setMaxPerRoute("somehost", 2);
    pool.setMaxPerRoute("otherhost", 1);
    final Future<PoolEntry<String, HttpConnection>> future1 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future2 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future3 = pool.lease("otherhost", null);
    final PoolEntry<String, HttpConnection> entry1 = future1.get();
    Assert.assertNotNull(entry1);
    entry1.assignConnection(conn1);
    final PoolEntry<String, HttpConnection> entry2 = future2.get();
    Assert.assertNotNull(entry2);
    entry2.assignConnection(conn2);
    final PoolEntry<String, HttpConnection> entry3 = future3.get();
    Assert.assertNotNull(entry3);
    entry3.assignConnection(conn3);
    pool.release(entry1, true);
    pool.release(entry2, true);
    pool.release(entry3, true);
    final PoolStats totals = pool.getTotalStats();
    Assert.assertEquals(3, totals.getAvailable());
    Assert.assertEquals(0, totals.getLeased());
    Assert.assertEquals(0, totals.getPending());
    final Future<PoolEntry<String, HttpConnection>> future4 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future5 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future6 = pool.lease("otherhost", null);
    final Future<PoolEntry<String, HttpConnection>> future7 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future8 = pool.lease("somehost", null);
    final Future<PoolEntry<String, HttpConnection>> future9 = pool.lease("otherhost", null);
    Assert.assertTrue(future4.isDone());
    final PoolEntry<String, HttpConnection> entry4 = future4.get();
    Assert.assertNotNull(entry4);
    Assert.assertSame(conn2, entry4.getConnection());
    Assert.assertTrue(future5.isDone());
    final PoolEntry<String, HttpConnection> entry5 = future5.get();
    Assert.assertNotNull(entry5);
    Assert.assertSame(conn1, entry5.getConnection());
    Assert.assertTrue(future6.isDone());
    final PoolEntry<String, HttpConnection> entry6 = future6.get();
    Assert.assertNotNull(entry6);
    Assert.assertSame(conn3, entry6.getConnection());
    Assert.assertFalse(future7.isDone());
    Assert.assertFalse(future8.isDone());
    Assert.assertFalse(future9.isDone());
    pool.release(entry4, true);
    pool.release(entry5, false);
    pool.release(entry6, true);
    Assert.assertTrue(future7.isDone());
    final PoolEntry<String, HttpConnection> entry7 = future7.get();
    Assert.assertNotNull(entry7);
    Assert.assertSame(conn2, entry7.getConnection());
    Assert.assertTrue(future8.isDone());
    final PoolEntry<String, HttpConnection> entry8 = future8.get();
    Assert.assertNotNull(entry8);
    Assert.assertEquals(null, entry8.getConnection());
    Assert.assertTrue(future9.isDone());
    final PoolEntry<String, HttpConnection> entry9 = future9.get();
    Assert.assertNotNull(entry9);
    Assert.assertSame(conn3, entry9.getConnection());
}
