/**
 * tests {@link LoadBalancingKMSClientProvider#warmUpEncryptedKeys(String...)}
 * error handling in case atleast one provider succeeds.
 * @throws Exception
 */
@Test
public void testWarmUpEncryptedKeysWhenOneProviderSucceeds() throws Exception {
    Configuration conf = new Configuration();
    KMSClientProvider p1 = mock(KMSClientProvider.class);
    String keyName = "key1";
    Mockito.doThrow(new IOException(new AuthorizationException("p1"))).when(p1).warmUpEncryptedKeys(Mockito.anyString());
    KMSClientProvider p2 = mock(KMSClientProvider.class);
    Mockito.doNothing().when(p2).warmUpEncryptedKeys(Mockito.anyString());
    when(p1.getKMSUrl()).thenReturn("p1");
    when(p2.getKMSUrl()).thenReturn("p2");
    LoadBalancingKMSClientProvider kp = new LoadBalancingKMSClientProvider(new KMSClientProvider[] { p1, p2 }, 0, conf);
    try {
        kp.warmUpEncryptedKeys(keyName);
    } catch (Exception e) {
        fail("Should not throw Exception since p2 doesn't throw Exception");
    }
    Mockito.verify(p1, Mockito.times(1)).warmUpEncryptedKeys(keyName);
    Mockito.verify(p2, Mockito.times(1)).warmUpEncryptedKeys(keyName);
}
