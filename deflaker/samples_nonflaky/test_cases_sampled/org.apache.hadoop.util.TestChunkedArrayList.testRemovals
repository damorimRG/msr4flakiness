@Test
public void testRemovals() throws Exception {
    final int NUM_ELEMS = 100000;
    ChunkedArrayList<Integer> list = new ChunkedArrayList<Integer>();
    for (int i = 0; i < NUM_ELEMS; i++) {
        list.add(i);
    }
    // Iterate through all list elements.
    Iterator<Integer> iter = list.iterator();
    for (int i = 0; i < NUM_ELEMS; i++) {
        Assert.assertTrue(iter.hasNext());
        Integer val = iter.next();
        Assert.assertEquals(Integer.valueOf(i), val);
    }
    Assert.assertFalse(iter.hasNext());
    Assert.assertEquals(NUM_ELEMS, list.size());
    // Remove even elements.
    iter = list.iterator();
    for (int i = 0; i < NUM_ELEMS; i++) {
        Assert.assertTrue(iter.hasNext());
        Integer val = iter.next();
        Assert.assertEquals(Integer.valueOf(i), val);
        if (i % 2 == 0) {
            iter.remove();
        }
    }
    Assert.assertFalse(iter.hasNext());
    Assert.assertEquals(NUM_ELEMS / 2, list.size());
    // Iterate through all odd list elements.
    iter = list.iterator();
    for (int i = 0; i < NUM_ELEMS / 2; i++) {
        Assert.assertTrue(iter.hasNext());
        Integer val = iter.next();
        Assert.assertEquals(Integer.valueOf(1 + (2 * i)), val);
        iter.remove();
    }
    Assert.assertFalse(iter.hasNext());
    // Check that list is now empty.
    Assert.assertEquals(0, list.size());
    Assert.assertTrue(list.isEmpty());
    iter = list.iterator();
    Assert.assertFalse(iter.hasNext());
}
