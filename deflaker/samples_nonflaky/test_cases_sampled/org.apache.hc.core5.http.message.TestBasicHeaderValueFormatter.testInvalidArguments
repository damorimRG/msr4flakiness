@Test
public void testInvalidArguments() throws Exception {
    final CharArrayBuffer buf = new CharArrayBuffer(64);
    final NameValuePair param = new BasicNameValuePair("param", "regular_stuff");
    final NameValuePair[] params = new NameValuePair[] { param };
    final HeaderElement element = new BasicHeaderElement("name1", "value1", null);
    final HeaderElement[] elements = new HeaderElement[] { element };
    try {
        this.formatter.formatNameValuePair(null, param, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatNameValuePair(buf, null, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatParameters(null, params, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatParameters(buf, null, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatHeaderElement(null, element, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatHeaderElement(buf, null, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatElements(null, elements, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
    try {
        this.formatter.formatElements(buf, null, false);
        Assert.fail("IllegalArgumentException should habe been thrown");
    } catch (final IllegalArgumentException ex) {
    // expected
    }
}
