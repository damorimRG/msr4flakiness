@Test
public void testCancelDelegationToken() throws Exception {
    final TestDelegationTokenSecretManager dtSecretManager = new TestDelegationTokenSecretManager(24 * 60 * 60 * 1000, 10 * 1000, 1 * 1000, 3600000);
    try {
        dtSecretManager.startThreads();
        final Token<TestDelegationTokenIdentifier> token = generateDelegationToken(dtSecretManager, "SomeUser", "JobTracker");
        // Fake renewer should not be able to renew
        shouldThrow(new PrivilegedExceptionAction<Object>() {

            @Override
            public Object run() throws Exception {
                dtSecretManager.renewToken(token, "FakeCanceller");
                return null;
            }
        }, AccessControlException.class);
        dtSecretManager.cancelToken(token, "JobTracker");
        Assert.assertTrue(dtSecretManager.isRemoveStoredTokenCalled);
        shouldThrow(new PrivilegedExceptionAction<Object>() {

            @Override
            public Object run() throws Exception {
                dtSecretManager.renewToken(token, "JobTracker");
                return null;
            }
        }, InvalidToken.class);
    } finally {
        dtSecretManager.stopThreads();
    }
}
