@Test
public void testExceptionCases() {
    testExceptionCases(false);
    testExceptionCases(true);
}
private void testExceptionCases(boolean resizable) {
    {
        // test contains
        final LightWeightGSet<Integer, Integer> gset = createGSet(16, resizable);
        try {
            // test contains with a null element
            gset.contains(null);
            Assert.fail();
        } catch (NullPointerException e) {
            LightWeightGSet.LOG.info("GOOD: getting " + e, e);
        }
    }
    {
        // test get
        final LightWeightGSet<Integer, Integer> gset = createGSet(16, resizable);
        try {
            // test get with a null element
            gset.get(null);
            Assert.fail();
        } catch (NullPointerException e) {
            LightWeightGSet.LOG.info("GOOD: getting " + e, e);
        }
    }
    {
        // test put
        final LightWeightGSet<Integer, Integer> gset = createGSet(16, resizable);
        try {
            // test put with a null element
            gset.put(null);
            Assert.fail();
        } catch (NullPointerException e) {
            LightWeightGSet.LOG.info("GOOD: getting " + e, e);
        }
        try {
            // test putting an element which is not implementing LinkedElement
            gset.put(1);
            Assert.fail();
        } catch (IllegalArgumentException e) {
            LightWeightGSet.LOG.info("GOOD: getting " + e, e);
        }
    }
    {
        // test iterator
        final IntElement[] data = new IntElement[5];
        for (int i = 0; i < data.length; i++) {
            data[i] = new IntElement(i, i);
        }
        for (int v = 1; v < data.length - 1; v++) {
            {
                // test remove while iterating
                final GSet<IntElement, IntElement> gset = createGSet(data, resizable);
                for (IntElement i : gset) {
                    if (i.value == v) {
                        // okay because data[0] is not in gset
                        gset.remove(data[0]);
                    }
                }
                try {
                    // exception because data[1] is in gset
                    for (IntElement i : gset) {
                        if (i.value == v) {
                            gset.remove(data[1]);
                        }
                    }
                    Assert.fail();
                } catch (ConcurrentModificationException e) {
                    LightWeightGSet.LOG.info("GOOD: getting " + e, e);
                }
            }
            {
                // test put new element while iterating
                final GSet<IntElement, IntElement> gset = createGSet(data, resizable);
                try {
                    for (IntElement i : gset) {
                        if (i.value == v) {
                            gset.put(data[0]);
                        }
                    }
                    Assert.fail();
                } catch (ConcurrentModificationException e) {
                    LightWeightGSet.LOG.info("GOOD: getting " + e, e);
                }
            }
            {
                // test put existing element while iterating
                final GSet<IntElement, IntElement> gset = createGSet(data, resizable);
                try {
                    for (IntElement i : gset) {
                        if (i.value == v) {
                            gset.put(data[3]);
                        }
                    }
                    Assert.fail();
                } catch (ConcurrentModificationException e) {
                    LightWeightGSet.LOG.info("GOOD: getting " + e, e);
                }
            }
        }
    }
}
