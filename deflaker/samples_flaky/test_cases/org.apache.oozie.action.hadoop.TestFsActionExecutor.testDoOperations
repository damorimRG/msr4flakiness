public void testDoOperations() throws Exception {
    FsActionExecutor ae = new FsActionExecutor();
    FileSystem fs = getFileSystem();
    Path mkdir = new Path(getFsTestCaseDir(), "mkdir");
    Path delete = new Path(getFsTestCaseDir(), "delete");
    fs.mkdirs(delete);
    Path source = new Path(getFsTestCaseDir(), "source");
    fs.mkdirs(source);
    Path target = new Path(new Path(getFsTestCaseDir(), "target").toUri().getPath());
    Path chmod1 = new Path(getFsTestCaseDir(), "chmod1");
    fs.mkdirs(chmod1);
    Path child1 = new Path(chmod1, "child1");
    fs.mkdirs(child1);
    Path chmod2 = new Path(getFsTestCaseDir(), "chmod2");
    fs.mkdirs(chmod2);
    Path child2 = new Path(chmod2, "child2");
    fs.mkdirs(child2);
    Path newFile1 = new Path(mkdir + "newFile1");
    Path newFile2 = new Path(mkdir + "newFile2");
    fs.createNewFile(newFile1);
    Path chmod3 = new Path(getFsTestCaseDir(), "chmod3");
    fs.mkdirs(chmod3);
    Path child3 = new Path(chmod3, "child3");
    fs.mkdirs(child3);
    Path grandchild3 = new Path(child3, "grandchild1");
    fs.mkdirs(grandchild3);
    String str = MessageFormat.format("<root><mkdir path=''{0}''/>" + "<delete path=''{1}''/>" + "<move source=''{2}'' target=''{3}''/>" + "<chmod path=''{4}'' permissions=''-rwxrwxrwx''/>" + "<chmod path=''{5}'' permissions=''-rwxrwx---'' dir-files=''false''/>" + "<touchz path=''{6}''/>" + "<touchz path=''{7}''/>" + "<chmod path=''{8}'' permissions=''-rwxrwx---''> <recursive/> </chmod>" + "</root>", mkdir, delete, source, target, chmod1, chmod2, newFile1, newFile2, chmod3);
    Element xml = XmlUtils.parseXml(str);
    ae.doOperations(createContext("<fs/>"), xml);
    assertTrue(fs.exists(mkdir));
    assertFalse(fs.exists(delete));
    assertFalse(fs.exists(source));
    assertTrue(fs.exists(target));
    assertTrue(fs.exists(newFile1));
    assertTrue(fs.exists(newFile2));
    assertEquals("rwxrwxrwx", fs.getFileStatus(chmod1).getPermission().toString());
    assertNotSame("rwxrwxrwx", fs.getFileStatus(child1).getPermission().toString());
    assertEquals("rwxrwx---", fs.getFileStatus(chmod2).getPermission().toString());
    assertNotSame("rwxrwx---", fs.getFileStatus(child2).getPermission().toString());
    assertEquals("rwxrwx---", fs.getFileStatus(child3).getPermission().toString());
    assertEquals("rwxrwx---", fs.getFileStatus(grandchild3).getPermission().toString());
    assertEquals("rwxrwx---", fs.getFileStatus(child3).getPermission().toString());
    assertEquals("rwxrwx---", fs.getFileStatus(grandchild3).getPermission().toString());
}
