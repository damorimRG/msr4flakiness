@SuppressWarnings("unused")
@Test
public void statelessWorkerDeactivationTest() throws ExecutionException, InterruptedException, TimeoutException {
    OrbitStage stage1 = createStage();
    OrbitStage client = createClient();
    IStatelessThing actor5 = IActor.getReference(IStatelessThing.class, "1000");
    final Set<UUID> set1 = new HashSet<>();
    {
        final List<Future<UUID>> futures = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            // this will force the creation of concurrent activations in each node
            futures.add(actor5.getUniqueActivationId(5000));
        }
        for (Future<UUID> f : futures) {
            set1.add(f.get(10, TimeUnit.SECONDS));
        }
    }
    // there should be multiple activations, off course statistics might let use down here.
    assertTrue(set1.size() > 1);
    assertTrue(set1.size() <= 100);
    // increment the clock
    awaitFor(() -> isIdle(stage1));
    clock.incrementTimeMillis(TimeUnit.MINUTES.toMillis(8));
    // touch a single activation (that will probably not be collected)
    UUID theSurviving = actor5.getUniqueActivationId().get();
    awaitFor(() -> isIdle(stage1));
    clock.incrementTimeMillis(TimeUnit.MINUTES.toMillis(8));
    // THE CLEANUP
    // this will collect all but one activation
    awaitFor(() -> isIdle(stage1));
    stage1.cleanup(true);
    // do the shenanigans again
    final Set<UUID> set2 = new HashSet<>();
    {
        final List<Future<UUID>> futures = new ArrayList<>();
        for (int i = 0; i < 25; i++) {
            // this will force the creation of concurrent activations in each node
            futures.add(actor5.getUniqueActivationId(1000));
        }
        for (Future<UUID> f : futures) {
            set2.add(f.get(10, TimeUnit.SECONDS));
        }
    }
    // multiple activations, again
    assertTrue(set2.size() > 1);
    assertTrue(set2.size() <= 100);
    // now there should be a single element from the first set1 that still exists here.
    assertTrue(set2.contains(theSurviving));
    // and no other ids will match
    set2.retainAll(set1);
    assertEquals(1, set2.size());
}
