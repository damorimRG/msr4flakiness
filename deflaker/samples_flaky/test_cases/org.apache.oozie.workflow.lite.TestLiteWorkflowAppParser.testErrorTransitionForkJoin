/*
    * f->(2,3)
    * 2->ok->j
    * 3->ok->j
    * j->6
    * 2->error->f1
    * 3->error->f1
    * f1->(4,5)
    * (4,5)->j1
    * j1->6
    * 6->k
    */
public void testErrorTransitionForkJoin() throws WorkflowException {
    LiteWorkflowAppParser parser = new LiteWorkflowAppParser(null, LiteWorkflowStoreService.LiteControlNodeHandler.class, LiteWorkflowStoreService.LiteDecisionHandler.class, LiteWorkflowStoreService.LiteActionHandler.class);
    LiteWorkflowApp def = new LiteWorkflowApp("wf", "<worklfow-app/>", new StartNodeDef(LiteWorkflowStoreService.LiteControlNodeHandler.class, "one")).addNode(new ActionNodeDef("one", dummyConf, TestActionNodeHandler.class, "f", "end")).addNode(new ForkNodeDef("f", LiteWorkflowStoreService.LiteControlNodeHandler.class, Arrays.asList(new String[] { "two", "three" }))).addNode(new ActionNodeDef("two", dummyConf, TestActionNodeHandler.class, "j", "f1")).addNode(new ActionNodeDef("three", dummyConf, TestActionNodeHandler.class, "j", "f1")).addNode(new ForkNodeDef("f1", LiteWorkflowStoreService.LiteControlNodeHandler.class, Arrays.asList(new String[] { "four", "five" }))).addNode(new ActionNodeDef("four", dummyConf, TestActionNodeHandler.class, "j1", "k")).addNode(new ActionNodeDef("five", dummyConf, TestActionNodeHandler.class, "j1", "k")).addNode(new JoinNodeDef("j", LiteWorkflowStoreService.LiteControlNodeHandler.class, "six")).addNode(new JoinNodeDef("j1", LiteWorkflowStoreService.LiteControlNodeHandler.class, "six")).addNode(new ActionNodeDef("six", dummyConf, TestActionNodeHandler.class, "k", "k")).addNode(new KillNodeDef("k", "kill", LiteWorkflowStoreService.LiteControlNodeHandler.class)).addNode(new EndNodeDef("end", LiteWorkflowStoreService.LiteControlNodeHandler.class));
    try {
        invokeForkJoin(parser, def);
    } catch (Exception e) {
        e.printStackTrace();
        fail("Unexpected Exception");
    }
}
