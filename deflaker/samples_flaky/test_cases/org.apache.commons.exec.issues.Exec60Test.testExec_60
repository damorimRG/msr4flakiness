/**
 * Possible deadlock when a process is terminating at the same time its timing out. Please
 * note that a successful test is no proof that the issues was indeed fixed.
 */
@Test
public void testExec_60() throws Exception {
    final int start = 0;
    final int seconds = 1;
    final int offsetMultiplier = 1;
    final int maxRetries = 180;
    int processTerminatedCounter = 0;
    int watchdogKilledProcessCounter = 0;
    final CommandLine cmdLine = new CommandLine(pingScript);
    // need to add "1" to wait the requested number of seconds
    cmdLine.addArgument(Integer.toString(seconds + 1));
    final long startTime = System.currentTimeMillis();
    for (int offset = start; offset <= maxRetries; offset++) {
        // wait progressively longer for process to complete
        // tricky to get this test right. We want to try and catch the process while it is terminating,
        // so we increase the timeout gradually until the test terminates normally.
        // However if the increase is too gradual, we never wait long enough for any test to exit normally
        final ExecuteWatchdog watchdog = new ExecuteWatchdog(seconds * 1000 + offset * offsetMultiplier);
        exec.setWatchdog(watchdog);
        try {
            exec.execute(cmdLine);
            processTerminatedCounter++;
            // System.out.println(offset + ": process has terminated: " + watchdog.killedProcess());
            if (processTerminatedCounter > 5) {
                break;
            }
        } catch (final ExecuteException ex) {
            // System.out.println(offset + ": process was killed: " + watchdog.killedProcess());
            assertTrue("Watchdog killed the process", watchdog.killedProcess());
            watchdogKilledProcessCounter++;
        }
    }
    final long avg = (System.currentTimeMillis() - startTime) / (watchdogKilledProcessCounter + processTerminatedCounter);
    System.out.println("Processes terminated: " + processTerminatedCounter + " killed: " + watchdogKilledProcessCounter + " Multiplier: " + offsetMultiplier + " MaxRetries: " + maxRetries + " Elapsed (avg ms): " + avg);
    assertTrue("Not a single process terminated on its own", processTerminatedCounter > 0);
    assertTrue("Not a single process was killed by the watch dog", watchdogKilledProcessCounter > 0);
}
