@Test
public void testAsynchronousClose() throws IOException, InterruptedException {
    ByteStore store = store(10);
    final FileChannel channel = channel(store, READ, WRITE);
    // ensure all operations on the channel will block
    store.writeLock().lock();
    ExecutorService executor = Executors.newCachedThreadPool();
    List<Future<?>> futures = queueAllBlockingOperations(channel, executor);
    // ensure time for operations to start blocking
    Uninterruptibles.sleepUninterruptibly(10, MILLISECONDS);
    channel.close();
    for (Future<?> future : futures) {
        try {
            future.get();
            fail();
        } catch (ExecutionException expected) {
            assertTrue(expected.getCause() instanceof AsynchronousCloseException);
        }
    }
}
