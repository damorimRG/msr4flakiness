/**
 * Test that copy on write for blocks works correctly
 * @throws IOException an exception might be thrown
 */
@Test
public void testCopyOnWrite() throws IOException {
    Configuration conf = new HdfsConfiguration();
    if (simulatedStorage) {
        conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED, true);
    }
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build();
    FileSystem fs = cluster.getFileSystem();
    InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort());
    DFSClient client = new DFSClient(addr, conf);
    try {
        // create a new file, write to it and close it.
        // 
        Path file1 = new Path("/filestatus.dat");
        FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1);
        writeFile(stm);
        stm.close();
        // Get a handle to the datanode
        DataNode[] dn = cluster.listDataNodes();
        assertTrue("There should be only one datanode but found " + dn.length, dn.length == 1);
        LocatedBlocks locations = client.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        List<LocatedBlock> blocks = locations.getLocatedBlocks();
        FSDataset dataset = (FSDataset) dn[0].data;
        // 
        // Create hard links for a few of the blocks
        // 
        for (int i = 0; i < blocks.size(); i = i + 2) {
            ExtendedBlock b = blocks.get(i).getBlock();
            File f = dataset.getFile(b.getBlockPoolId(), b.getLocalBlock());
            File link = new File(f.toString() + ".link");
            System.out.println("Creating hardlink for File " + f + " to " + link);
            HardLink.createHardLink(f, link);
        }
        // 
        // Detach all blocks. This should remove hardlinks (if any)
        // 
        for (int i = 0; i < blocks.size(); i++) {
            ExtendedBlock b = blocks.get(i).getBlock();
            System.out.println("testCopyOnWrite detaching block " + b);
            assertTrue("Detaching block " + b + " should have returned true", dataset.unlinkBlock(b, 1));
        }
        // Since the blocks were already detached earlier, these calls should
        // return false
        // 
        for (int i = 0; i < blocks.size(); i++) {
            ExtendedBlock b = blocks.get(i).getBlock();
            System.out.println("testCopyOnWrite detaching block " + b);
            assertTrue("Detaching block " + b + " should have returned false", !dataset.unlinkBlock(b, 1));
        }
    } finally {
        fs.close();
        cluster.shutdown();
    }
}
