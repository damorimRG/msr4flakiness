/**
 * testBlockCorruptionRecoveryPolicy.
 * This tests recovery of corrupt replicas, first for one corrupt replica
 * then for two. The test invokes blockCorruptionRecoveryPolicy which
 * 1. Creates a block with desired number of replicas
 * 2. Corrupts the desired number of replicas and restarts the datanodes
 *    containing the corrupt replica. Additionaly we also read the block
 *    in case restarting does not report corrupt replicas.
 *    Restarting or reading from the datanode would trigger reportBadBlocks
 *    to namenode.
 *    NameNode adds it to corruptReplicasMap and neededReplication
 * 3. Test waits until all corrupt replicas are reported, meanwhile
 *    Re-replciation brings the block back to healthy state
 * 4. Test again waits until the block is reported with expected number
 *    of good replicas.
 */
public void testBlockCorruptionRecoveryPolicy1() throws Exception {
    // Test recovery of 1 corrupt replica
    LOG.info("Testing corrupt replica recovery for one corrupt replica");
    blockCorruptionRecoveryPolicy(4, (short) 3, 1);
}
