public void testCreateprotoConfWithLibPath() throws Exception {
    Services services = new Services();
    try {
        services.init();
        Reader reader = IOUtils.getResourceAsReader("wf-schema-valid.xml", -1);
        Writer writer = new FileWriter(getTestCaseDir() + "/workflow.xml");
        IOUtils.copyCharStream(reader, writer);
        createTestCaseSubDir("lib");
        writer = new FileWriter(getTestCaseDir() + "/lib/maputil.jar");
        writer.write("bla bla");
        writer.close();
        writer = new FileWriter(getTestCaseDir() + "/lib/reduceutil.so");
        writer.write("bla bla");
        writer.close();
        createTestCaseSubDir("libx");
        writer = new FileWriter(getTestCaseDir() + "/libx/maputilx.jar");
        writer.write("bla bla");
        writer.close();
        WorkflowAppService wps = Services.get().get(WorkflowAppService.class);
        Configuration jobConf = new XConfiguration();
        jobConf.set(OozieClient.APP_PATH, "file://" + getTestCaseDir() + "/workflow.xml");
        jobConf.set(OozieClient.LIBPATH, "file://" + getTestCaseDir() + "/libx");
        jobConf.set(OozieClient.USER_NAME, getTestUser());
        Configuration protoConf = wps.createProtoActionConf(jobConf, "authToken", true);
        assertEquals(getTestUser(), protoConf.get(OozieClient.USER_NAME));
        assertEquals(3, protoConf.getStrings(WorkflowAppService.APP_LIB_PATH_LIST).length);
        List<String> found = new ArrayList<String>();
        found.add(protoConf.getStrings(WorkflowAppService.APP_LIB_PATH_LIST)[0]);
        found.add(protoConf.getStrings(WorkflowAppService.APP_LIB_PATH_LIST)[1]);
        found.add(protoConf.getStrings(WorkflowAppService.APP_LIB_PATH_LIST)[2]);
        List<String> expected = new ArrayList<String>();
        expected.add("file://" + getTestCaseDir() + "/lib/reduceutil.so");
        expected.add("file://" + getTestCaseDir() + "/lib/maputil.jar");
        expected.add("file://" + getTestCaseDir() + "/libx/maputilx.jar");
        Collections.sort(found);
        Collections.sort(expected);
        assertEquals(expected, found);
    } finally {
        services.destroy();
    }
}
