public void testQueueUniquenessWithSameKeyInOneComposite() throws Exception {
    EXEC_ORDER = new AtomicLong();
    final MyCallable callable1 = new MyCallable("QueueUniquenessWithSameKeyInOneComposite", "QueueUniquenessWithSameKeyInOneComposite", 0, 100);
    final MyCallable callable2 = new MyCallable("QueueUniquenessWithSameKeyInOneComposite", "QueueUniquenessWithSameKeyInOneComposite", 0, 100);
    final MyCallable callable3 = new MyCallable("QueueUniquenessWithSameKeyInOneComposite", "QueueUniquenessWithSameKeyInOneComposite", 0, 100);
    CallableQueueService queueservice = Services.get().get(CallableQueueService.class);
    queueservice.queueSerial(Arrays.asList(callable1, callable2, callable3));
    waitFor(200, new Predicate() {

        public boolean evaluate() throws Exception {
            return callable1.executed != 0 && callable2.executed == 0 && callable3.executed == 0;
        }
    });
    assertTrue(callable1.executed != 0);
    assertTrue(callable2.executed == 0);
    assertTrue(callable3.executed == 0);
}
