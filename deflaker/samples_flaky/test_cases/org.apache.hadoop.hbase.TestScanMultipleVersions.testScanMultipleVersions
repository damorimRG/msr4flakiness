/**
 * @throws Exception
 */
public void testScanMultipleVersions() throws Exception {
    // At this point we have created multiple regions and both HDFS and HBase
    // are running. There are 5 cases we have to test. Each is described below.
    HTable t = new HTable(conf, TABLE_NAME);
    for (int i = 0; i < ROWS.length; i++) {
        for (int j = 0; j < TIMESTAMPS.length; j++) {
            Get get = new Get(ROWS[i]);
            get.addFamily(HConstants.CATALOG_FAMILY);
            get.setTimeStamp(TIMESTAMPS[j]);
            Result result = t.get(get);
            int cellCount = 0;
            for (@SuppressWarnings("unused") KeyValue kv : result.sorted()) {
                cellCount++;
            }
            assertTrue(cellCount == 1);
        }
    }
    // Case 1: scan with LATEST_TIMESTAMP. Should get two rows
    int count = 0;
    Scan scan = new Scan();
    scan.addFamily(HConstants.CATALOG_FAMILY);
    ResultScanner s = t.getScanner(scan);
    try {
        for (Result rr = null; (rr = s.next()) != null; ) {
            System.out.println(rr.toString());
            count += 1;
        }
        assertEquals("Number of rows should be 2", 2, count);
    } finally {
        s.close();
    }
    // Case 2: Scan with a timestamp greater than most recent timestamp
    // (in this case > 1000 and < LATEST_TIMESTAMP. Should get 2 rows.
    count = 0;
    scan = new Scan();
    scan.setTimeRange(1000L, Long.MAX_VALUE);
    scan.addFamily(HConstants.CATALOG_FAMILY);
    s = t.getScanner(scan);
    try {
        while (s.next() != null) {
            count += 1;
        }
        assertEquals("Number of rows should be 2", 2, count);
    } finally {
        s.close();
    }
    // Case 3: scan with timestamp equal to most recent timestamp
    // (in this case == 1000. Should get 2 rows.
    count = 0;
    scan = new Scan();
    scan.setTimeStamp(1000L);
    scan.addFamily(HConstants.CATALOG_FAMILY);
    s = t.getScanner(scan);
    try {
        while (s.next() != null) {
            count += 1;
        }
        assertEquals("Number of rows should be 2", 2, count);
    } finally {
        s.close();
    }
    // Case 4: scan with timestamp greater than first timestamp but less than
    // second timestamp (100 < timestamp < 1000). Should get 2 rows.
    count = 0;
    scan = new Scan();
    scan.setTimeRange(100L, 1000L);
    scan.addFamily(HConstants.CATALOG_FAMILY);
    s = t.getScanner(scan);
    try {
        while (s.next() != null) {
            count += 1;
        }
        assertEquals("Number of rows should be 2", 2, count);
    } finally {
        s.close();
    }
    // Case 5: scan with timestamp equal to first timestamp (100)
    // Should get 2 rows.
    count = 0;
    scan = new Scan();
    scan.setTimeStamp(100L);
    scan.addFamily(HConstants.CATALOG_FAMILY);
    s = t.getScanner(scan);
    try {
        while (s.next() != null) {
            count += 1;
        }
        assertEquals("Number of rows should be 2", 2, count);
    } finally {
        s.close();
    }
}
