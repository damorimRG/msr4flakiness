public void testQueueUniquenessWithDiffKeyInComposite() throws Exception {
    EXEC_ORDER = new AtomicLong();
    final MyCallable callable1 = new MyCallable("QueueUniquenessWithDiffKeyInComposite1", "QueueUniquenessWithDiffKeyInComposite", 0, 100);
    final MyCallable callable2 = new MyCallable("QueueUniquenessWithDiffKeyInComposite2", "QueueUniquenessWithDiffKeyInComposite", 0, 100);
    final MyCallable callable3 = new MyCallable("QueueUniquenessWithDiffKeyInComposite3", "QueueUniquenessWithDiffKeyInComposite", 0, 100);
    List<MyCallable> callables = Arrays.asList(callable1, callable2, callable3);
    CallableQueueService queueservice = Services.get().get(CallableQueueService.class);
    String type = "QueueUniquenessWithDiffKeyInComposite";
    for (MyCallable c : callables) {
        queueservice.queueSerial(Arrays.asList(c, new MyCallable(type = type + "x", 0, 0)));
    }
    waitFor(200, new Predicate() {

        public boolean evaluate() throws Exception {
            return callable1.executed != 0 && callable2.executed != 0 && callable3.executed != 0;
        }
    });
    assertTrue(callable1.executed != 0);
    assertTrue(callable2.executed != 0);
    assertTrue(callable3.executed != 0);
}
