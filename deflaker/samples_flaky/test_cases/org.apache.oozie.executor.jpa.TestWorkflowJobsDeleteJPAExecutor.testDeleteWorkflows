public void testDeleteWorkflows() throws Exception {
    WorkflowJobBean jobA = this.addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    WorkflowActionBean actionA1 = this.addRecordToWfActionTable(jobA.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean actionA2 = this.addRecordToWfActionTable(jobA.getId(), "2", WorkflowAction.Status.OK);
    WorkflowJobBean jobB = this.addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    WorkflowActionBean actionB1 = this.addRecordToWfActionTable(jobB.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean actionB2 = this.addRecordToWfActionTable(jobB.getId(), "2", WorkflowAction.Status.OK);
    WorkflowJobBean jobC = this.addRecordToWfJobTable(WorkflowJob.Status.SUCCEEDED, WorkflowInstance.Status.SUCCEEDED);
    WorkflowActionBean actionC1 = this.addRecordToWfActionTable(jobC.getId(), "1", WorkflowAction.Status.OK);
    WorkflowActionBean actionC2 = this.addRecordToWfActionTable(jobC.getId(), "2", WorkflowAction.Status.OK);
    JPAService jpaService = Services.get().get(JPAService.class);
    assertNotNull(jpaService);
    List<String> deleteList = new ArrayList<String>();
    deleteList.add(jobA.getId());
    deleteList.add(jobB.getId());
    deleteList.add(jobC.getId());
    jpaService.execute(new WorkflowJobsDeleteJPAExecutor(deleteList));
    try {
        jpaService.execute(new WorkflowJobGetJPAExecutor(jobA.getId()));
        fail("Workflow Job A should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0604, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionA1.getId()));
        fail("Workflow Action A1 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionA2.getId()));
        fail("Workflow Action A2 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowJobGetJPAExecutor(jobB.getId()));
        fail("Workflow Job B should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0604, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionB1.getId()));
        fail("Workflow Action B1 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionB2.getId()));
        fail("Workflow Action B2 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowJobGetJPAExecutor(jobC.getId()));
        fail("Workflow Job C should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0604, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionC1.getId()));
        fail("Workflow Action C1 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
    try {
        jpaService.execute(new WorkflowActionGetJPAExecutor(actionC2.getId()));
        fail("Workflow Action C2 should have been deleted");
    } catch (JPAExecutorException je) {
        assertEquals(ErrorCode.E0605, je.getErrorCode());
    }
}
