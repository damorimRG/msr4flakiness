public void testStreamLogMultipleHours() throws IOException {
    long currTime = System.currentTimeMillis();
    XLogStreamer.Filter.reset();
    XLogStreamer.Filter.defineParameter("USER");
    XLogStreamer.Filter.defineParameter("GROUP");
    XLogStreamer.Filter.defineParameter("TOKEN");
    XLogStreamer.Filter.defineParameter("APP");
    XLogStreamer.Filter.defineParameter("JOB");
    XLogStreamer.Filter.defineParameter("ACTION");
    XLogStreamer.Filter xf = new XLogStreamer.Filter();
    xf.setParameter("JOB", "14-200904160239--example-forkjoinwf");
    xf.setLogLevel("DEBUG|INFO");
    // Test to check if all gz log files in the range jobStartTime-currentTime are retrieved
    String outFilename = "oozie.log-2012-04-24-19.gz";
    File f = new File(getTestCaseDir() + "/" + outFilename);
    StringBuilder logLines = new StringBuilder();
    logLines.append("\n2012-04-24 19:43:13,958 DEBUG _L19_:323 -" + logStatement);
    writeToGZFile(f, logLines);
    outFilename = "oozie.log-2012-04-24-20.gz";
    f = new File(getTestCaseDir() + "/" + outFilename);
    logLines = new StringBuilder();
    logLines.append("\n2012-04-24 20:43:13,958 DEBUG _L20_:323 -" + logStatement);
    writeToGZFile(f, logLines);
    outFilename = "oozie.log-2012-04-24-21.gz";
    f = new File(getTestCaseDir() + "/" + outFilename);
    logLines = new StringBuilder();
    logLines.append("\n2012-04-24 21:43:13,958 DEBUG _L21_:323 -" + logStatement);
    writeToGZFile(f, logLines);
    // This file will be always included in the list of files for log retrieval, provided the modification time lies
    // between the start and end times of the job
    FileWriter fw1 = new FileWriter(getTestCaseDir() + "/oozie.log");
    StringBuilder sb1 = new StringBuilder();
    sb1.append("\n2012-04-24 22:43:13,958 DEBUG _L22_:323 -" + logStatement);
    sb1.append("\n2012-04-24 22:43:13,961 INFO _L23_:317 -" + logStatement + "[org.apache.oozie.core.command.WorkflowRunnerCallable] " + "released lock");
    fw1.write(sb1.toString());
    fw1.close();
    File f1 = new File(getTestCaseDir() + "/oozie.log");
    f1.setLastModified(currTime - 5000);
    // Test for the log retrieval of the job spanning multiple hours
    StringWriter sw2 = new StringWriter();
    XLogStreamer str2 = new XLogStreamer(xf, sw2, getTestCaseDir(), "oozie.log", 1);
    Calendar calendarEntry = Calendar.getInstance();
    // Setting start-time to 2012-04-24-19 for log stream (month-1 passed as parameter since 0=January), and end time is current time
    calendarEntry.set(2012, 3, 24, 19, 0);
    str2.streamLog(calendarEntry.getTime(), new Date(System.currentTimeMillis()));
    String[] out = sw2.toString().split("\n");
    // Check if the retrieved log content is of length five lines after filtering based on time window, file name
    // pattern and parameters like JobId, Username etc. and/or based on log level like INFO, DEBUG, etc.
    assertEquals(5, out.length);
    // Check if the lines of the log contain the expected strings
    assertEquals(true, out[0].contains("_L19_"));
    assertEquals(true, out[1].contains("_L20_"));
    assertEquals(true, out[2].contains("_L21_"));
    // from oozie.log
    assertEquals(true, out[3].contains("_L22_"));
    assertEquals(true, out[4].contains("_L23_"));
}
