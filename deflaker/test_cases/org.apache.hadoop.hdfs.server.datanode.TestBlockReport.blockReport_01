/**
 * Test write a file, verifies and closes it. Then the length of the blocks
 * are messed up and BlockReport is forced.
 * The modification of blocks' length has to be ignored
 *
 * @throws java.io.IOException on an error
 */
@Test
public void blockReport_01() throws IOException {
    final String METHOD_NAME = GenericTestUtils.getMethodName();
    Path filePath = new Path("/" + METHOD_NAME + ".dat");
    ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE);
    if (LOG.isDebugEnabled()) {
        LOG.debug("Number of blocks allocated " + blocks.size());
    }
    long[] oldLengths = new long[blocks.size()];
    int tempLen;
    for (int i = 0; i < blocks.size(); i++) {
        Block b = blocks.get(i);
        if (LOG.isDebugEnabled()) {
            LOG.debug("Block " + b.getBlockName() + " before\t" + "Size " + b.getNumBytes());
        }
        oldLengths[i] = b.getNumBytes();
        if (LOG.isDebugEnabled()) {
            LOG.debug("Setting new length");
        }
        tempLen = rand.nextInt(BLOCK_SIZE);
        b.set(b.getBlockId(), tempLen, b.getGenerationStamp());
        if (LOG.isDebugEnabled()) {
            LOG.debug("Block " + b.getBlockName() + " after\t " + "Size " + b.getNumBytes());
        }
    }
    // all blocks belong to the same file, hence same BP
    DataNode dn = cluster.getDataNodes().get(DN_N0);
    String poolId = cluster.getNamesystem().getBlockPoolId();
    DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId);
    cluster.getNameNodeRpc().blockReport(dnR, poolId, new BlockListAsLongs(blocks, null).getBlockListAsLongs());
    List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath));
    if (LOG.isDebugEnabled()) {
        LOG.debug("After mods: Number of blocks allocated " + blocksAfterReport.size());
    }
    for (int i = 0; i < blocksAfterReport.size(); i++) {
        ExtendedBlock b = blocksAfterReport.get(i).getBlock();
        assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes());
    }
}
