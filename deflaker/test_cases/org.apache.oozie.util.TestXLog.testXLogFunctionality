public void testXLogFunctionality() {
    TestLog log = new TestLog();
    TestLog ops = new TestLog();
    XLog xLog = new XLog(log);
    assertEquals("", xLog.getMsgPrefix());
    xLog.setMsgPrefix("prefix");
    assertEquals("prefix", xLog.getMsgPrefix());
    xLog.setMsgPrefix(null);
    xLog.loggers[1] = ops;
    log.setLevel(SimpleLog.LOG_LEVEL_OFF);
    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);
    assertFalse(xLog.isDebugEnabled());
    assertFalse(xLog.isErrorEnabled());
    assertFalse(xLog.isFatalEnabled());
    assertFalse(xLog.isInfoEnabled());
    assertFalse(xLog.isWarnEnabled());
    assertFalse(xLog.isTraceEnabled());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);
    assertTrue(xLog.isDebugEnabled());
    assertTrue(xLog.isErrorEnabled());
    assertTrue(xLog.isFatalEnabled());
    assertTrue(xLog.isInfoEnabled());
    assertTrue(xLog.isWarnEnabled());
    assertTrue(xLog.isTraceEnabled());
    log.setLevel(SimpleLog.LOG_LEVEL_OFF);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    assertTrue(xLog.isDebugEnabled());
    assertTrue(xLog.isErrorEnabled());
    assertTrue(xLog.isFatalEnabled());
    assertTrue(xLog.isInfoEnabled());
    assertTrue(xLog.isWarnEnabled());
    assertTrue(xLog.isTraceEnabled());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    assertTrue(xLog.isDebugEnabled());
    assertTrue(xLog.isErrorEnabled());
    assertTrue(xLog.isFatalEnabled());
    assertTrue(xLog.isInfoEnabled());
    assertTrue(xLog.isWarnEnabled());
    assertTrue(xLog.isTraceEnabled());
    log.setLevel(SimpleLog.LOG_LEVEL_OFF);
    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);
    log.resetMessage();
    xLog.debug("");
    assertNull(log.getMessage());
    xLog.error("");
    assertNull(log.getMessage());
    xLog.fatal("");
    assertNull(log.getMessage());
    xLog.info("");
    assertNull(log.getMessage());
    xLog.warn("");
    assertNull(log.getMessage());
    xLog.trace("");
    assertNull(log.getMessage());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_OFF);
    log.resetMessage();
    ops.resetMessage();
    xLog.debug("debug");
    assertTrue(log.getMessage().endsWith("debug"));
    assertNull(ops.getMessage());
    xLog.error("error");
    assertTrue(log.getMessage().endsWith("error"));
    assertNull(ops.getMessage());
    xLog.fatal("fatal");
    assertTrue(log.getMessage().endsWith("fatal"));
    assertNull(ops.getMessage());
    xLog.info("info");
    assertTrue(log.getMessage().endsWith("info"));
    assertNull(ops.getMessage());
    xLog.warn("warn");
    assertTrue(log.getMessage().endsWith("warn"));
    assertNull(ops.getMessage());
    xLog.trace("trace");
    assertTrue(log.getMessage().endsWith("trace"));
    assertNull(ops.getMessage());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    log.resetMessage();
    ops.resetMessage();
    xLog.debug("debug");
    assertTrue(log.getMessage().endsWith("debug"));
    assertNull(ops.getMessage());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    log.resetMessage();
    ops.resetMessage();
    xLog.debug("debug");
    assertTrue(log.getMessage().endsWith("debug"));
    assertNull(ops.getMessage());
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    log.resetMessage();
    ops.resetMessage();
    xLog.debug(XLog.OPS, "debug");
    assertTrue(log.getMessage().endsWith("debug"));
    assertTrue(ops.getMessage().endsWith("debug"));
    log.setLevel(SimpleLog.LOG_LEVEL_ALL);
    ops.setLevel(SimpleLog.LOG_LEVEL_ALL);
    log.resetMessage();
    ops.resetMessage();
    xLog.debug(XLog.OPS, "debug {0}", "debug");
    assertTrue(log.getMessage().endsWith("debug debug"));
    assertTrue(ops.getMessage().endsWith("debug debug"));
    assertNull(XLog.getCause("a", "b"));
    assertNotNull(XLog.getCause("a", "b", new Exception()));
}
