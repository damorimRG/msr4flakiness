/**
 * Test that the filesystem removes the last block from a file if its
 * lease expires.
 */
public void testFileCreationError2() throws IOException {
    long leasePeriod = 1000;
    System.out.println("testFileCreationError2 start");
    Configuration conf = new HdfsConfiguration();
    conf.setInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, 1000);
    conf.setInt(DFS_HEARTBEAT_INTERVAL_KEY, 1);
    if (simulatedStorage) {
        conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED, true);
    }
    // create cluster
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build();
    DistributedFileSystem dfs = null;
    try {
        cluster.waitActive();
        dfs = (DistributedFileSystem) cluster.getFileSystem();
        DFSClient client = dfs.dfs;
        // create a new file.
        // 
        Path file1 = new Path("/filestatus.dat");
        createFile(dfs, file1, 1);
        System.out.println("testFileCreationError2: " + "Created file filestatus.dat with one replicas.");
        LocatedBlocks locations = client.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        System.out.println("testFileCreationError2: " + "The file has " + locations.locatedBlockCount() + " blocks.");
        // add one block to the file
        LocatedBlock location = client.getNamenode().addBlock(file1.toString(), client.clientName, null, null);
        System.out.println("testFileCreationError2: " + "Added block " + location.getBlock());
        locations = client.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        int count = locations.locatedBlockCount();
        System.out.println("testFileCreationError2: " + "The file now has " + count + " blocks.");
        // set the soft and hard limit to be 1 second so that the
        // namenode triggers lease recovery
        cluster.setLeasePeriod(leasePeriod, leasePeriod);
        // wait for the lease to expire
        try {
            Thread.sleep(5 * leasePeriod);
        } catch (InterruptedException e) {
        }
        // verify that the last block was synchronized.
        locations = client.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        System.out.println("testFileCreationError2: " + "locations = " + locations.locatedBlockCount());
        assertEquals(0, locations.locatedBlockCount());
        System.out.println("testFileCreationError2 successful");
    } finally {
        IOUtils.closeStream(dfs);
        cluster.shutdown();
    }
}
