@Test
public void testAsyncClose_write() throws IOException, InterruptedException {
    ByteStore store = byteStore(15);
    ExecutorService executor = Executors.newFixedThreadPool(4);
    try {
        JimfsAsynchronousFileChannel channel = channel(store, executor, READ, WRITE);
        // cause another thread trying to write to block
        store.writeLock().lock();
        Future<Integer> future = channel.write(ByteBuffer.allocate(10), 0);
        final CountDownLatch handlerLatch = new CountDownLatch(1);
        final AtomicBoolean gotAsyncCloseException = new AtomicBoolean(false);
        channel.write(ByteBuffer.allocate(10), 0, null, new CompletionHandler<Integer, Object>() {

            @Override
            public void completed(Integer result, Object attachment) {
                handlerLatch.countDown();
            }

            @Override
            public void failed(Throwable exc, Object attachment) {
                gotAsyncCloseException.set(exc instanceof AsynchronousCloseException);
                handlerLatch.countDown();
            }
        });
        // give enough time to ensure both writes start blocking
        Uninterruptibles.sleepUninterruptibly(10, MILLISECONDS);
        channel.close();
        try {
            future.get();
            fail();
        } catch (ExecutionException expected) {
            assertTrue(expected.getCause() instanceof AsynchronousCloseException);
        }
        handlerLatch.await();
        assertTrue(gotAsyncCloseException.get());
    } finally {
        executor.shutdown();
    }
}
