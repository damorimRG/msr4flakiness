/**
 * This test attempts to different types of datanode report.
 */
public void testDatanodeReport() throws Exception {
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, // 0.5s
    500);
    conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY, 1L);
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
    try {
        // wait until the cluster is up
        cluster.waitActive();
        InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort());
        DFSClient client = new DFSClient(addr, conf);
        assertEquals(client.datanodeReport(DatanodeReportType.ALL).length, NUM_OF_DATANODES);
        assertEquals(client.datanodeReport(DatanodeReportType.LIVE).length, NUM_OF_DATANODES);
        assertEquals(client.datanodeReport(DatanodeReportType.DEAD).length, 0);
        // bring down one datanode
        ArrayList<DataNode> datanodes = cluster.getDataNodes();
        datanodes.remove(datanodes.size() - 1).shutdown();
        DatanodeInfo[] nodeInfo = client.datanodeReport(DatanodeReportType.DEAD);
        while (nodeInfo.length != 1) {
            try {
                Thread.sleep(500);
            } catch (Exception e) {
            }
            nodeInfo = client.datanodeReport(DatanodeReportType.DEAD);
        }
        assertEquals(client.datanodeReport(DatanodeReportType.LIVE).length, NUM_OF_DATANODES - 1);
        assertEquals(client.datanodeReport(DatanodeReportType.ALL).length, NUM_OF_DATANODES);
        Thread.sleep(5000);
        assertCounter("ExpiredHeartbeats", 1, getMetrics("FSNamesystem"));
    } finally {
        cluster.shutdown();
    }
}
