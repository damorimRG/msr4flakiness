public void testTrashEmptier() throws Exception {
    Configuration conf = new Configuration();
    // Trash with 12 second deletes and 6 seconds checkpoints
    // 12 seconds
    conf.set(FS_TRASH_INTERVAL_KEY, "0.2");
    conf.setClass("fs.file.impl", TestLFS.class, FileSystem.class);
    // 6 seconds
    conf.set(FS_TRASH_CHECKPOINT_INTERVAL_KEY, "0.1");
    FileSystem fs = FileSystem.getLocal(conf);
    conf.set("fs.default.name", fs.getUri().toString());
    Trash trash = new Trash(conf);
    // Start Emptier in background
    Runnable emptier = trash.getEmptier();
    Thread emptierThread = new Thread(emptier);
    emptierThread.start();
    FsShell shell = new FsShell();
    shell.setConf(conf);
    shell.init();
    // First create a new directory with mkdirs
    Path myPath = new Path(TEST_DIR, "test/mkdirs");
    mkdir(fs, myPath);
    int fileIndex = 0;
    Set<String> checkpoints = new HashSet<String>();
    while (true) {
        // Create a file with a new name
        Path myFile = new Path(TEST_DIR, "test/mkdirs/myFile" + fileIndex++);
        writeFile(fs, myFile, 10);
        // Delete the file to trash
        String[] args = new String[2];
        args[0] = "-rm";
        args[1] = myFile.toString();
        int val = -1;
        try {
            val = shell.run(args);
        } catch (Exception e) {
            System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
        }
        assertTrue(val == 0);
        Path trashDir = shell.getCurrentTrashDir();
        FileStatus[] files = fs.listStatus(trashDir.getParent());
        // Scan files in .Trash and add them to set of checkpoints
        for (FileStatus file : files) {
            String fileName = file.getPath().getName();
            checkpoints.add(fileName);
        }
        // If checkpoints has 4 objects it is Current + 3 checkpoint directories
        if (checkpoints.size() == 4) {
            // The actual contents should be smaller since the last checkpoint
            // should've been deleted and Current might not have been recreated yet
            assertTrue(checkpoints.size() > files.length);
            break;
        }
        Thread.sleep(5000);
    }
    emptierThread.interrupt();
    emptierThread.join();
}
