@Test
public void testOnJobEvent() throws Exception {
    SLAService slas = services.get(SLAService.class);
    SLAJobEventListener listener = new SLAJobEventListener();
    listener.init(services.getConf());
    // add dummy registration events to the SLAService map
    SLARegistrationBean job = _createSLARegBean("wf1", AppType.WORKFLOW_JOB);
    job.setExpectedStart(DateUtils.parseDateUTC("2012-07-22T00:00Z"));
    slas.addRegistrationEvent(job);
    assertEquals(1, slas.getSLACalculator().size());
    Date actualStart = DateUtils.parseDateUTC("2012-07-22T01:00Z");
    WorkflowJobEvent wfe = new WorkflowJobEvent("wf1", "caId1", WorkflowJob.Status.RUNNING, "user1", "wf-app-name1", actualStart, null);
    listener.onWorkflowJobEvent(wfe);
    SLACalcStatus serviceObj = slas.getSLACalculator().get("wf1");
    // check that start sla has been calculated
    assertTrue(serviceObj.isStartProcessed());
    assertEquals(EventStatus.START_MISS, serviceObj.getEventStatus());
    job = _createSLARegBean("wa1", AppType.WORKFLOW_ACTION);
    slas.addRegistrationEvent(job);
    assertEquals(2, slas.getSLACalculator().size());
    job.setExpectedStart(DateUtils.parseDateUTC("2012-07-22T00:00Z"));
    WorkflowActionEvent wae = new WorkflowActionEvent("wa1", "wfId1", WorkflowAction.Status.RUNNING, "user1", "wf-app-name1", actualStart, null);
    listener.onWorkflowActionEvent(wae);
    serviceObj = slas.getSLACalculator().get("wa1");
    // check that start sla has been calculated
    assertTrue(serviceObj.isStartProcessed());
    assertEquals(EventStatus.START_MISS, serviceObj.getEventStatus());
    job = _createSLARegBean("cj1", AppType.COORDINATOR_JOB);
    job.setExpectedEnd(DateUtils.parseDateUTC("2012-07-22T01:00Z"));
    slas.addRegistrationEvent(job);
    assertEquals(3, slas.getSLACalculator().size());
    Date actualEnd = DateUtils.parseDateUTC("2012-07-22T00:00Z");
    CoordinatorJobEvent cje = new CoordinatorJobEvent("cj1", "bj1", CoordinatorJob.Status.SUCCEEDED, "user1", "coord-app-name1", actualStart, actualEnd);
    listener.onCoordinatorJobEvent(cje);
    // Since serviceObj is removed from memory after END stage
    SLACalculatorBean calc = Services.get().get(JPAService.class).execute(new SLACalculatorGetJPAExecutor("cj1"));
    SLASummaryBean summary = Services.get().get(JPAService.class).execute(new SLASummaryGetJPAExecutor("cj1"));
    // check that end sla has been calculated
    assertTrue(calc.isEndProcessed());
    assertEquals(EventStatus.END_MET, summary.getEventStatus());
    job = _createSLARegBean("ca1", AppType.COORDINATOR_ACTION);
    actualEnd = DateUtils.parseDateUTC("2012-07-22T02:00Z");
    slas.addRegistrationEvent(job);
    assertEquals(3, slas.getSLACalculator().size());
    CoordinatorActionEvent cae = new CoordinatorActionEvent("ca1", "cj1", CoordinatorAction.Status.KILLED, "user1", "coord-app-name1", null, actualEnd, null);
    listener.onCoordinatorActionEvent(cae);
    calc = Services.get().get(JPAService.class).execute(new SLACalculatorGetJPAExecutor("ca1"));
    summary = Services.get().get(JPAService.class).execute(new SLASummaryGetJPAExecutor("ca1"));
    // check that start sla has been calculated
    assertTrue(calc.isEndProcessed());
    assertEquals(EventStatus.END_MISS, summary.getEventStatus());
}
