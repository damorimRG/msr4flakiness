/**
 * Tests various options of DFSShell.
 */
public void testDFSShell() throws IOException {
    Configuration conf = new HdfsConfiguration();
    /* This tests some properties of ChecksumFileSystem as well.
     * Make sure that we create ChecksumDFS */
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    FileSystem fs = cluster.getFileSystem();
    assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem);
    DistributedFileSystem fileSys = (DistributedFileSystem) fs;
    FsShell shell = new FsShell();
    shell.setConf(conf);
    try {
        // First create a new directory with mkdirs
        Path myPath = new Path("/test/mkdirs");
        assertTrue(fileSys.mkdirs(myPath));
        assertTrue(fileSys.exists(myPath));
        assertTrue(fileSys.mkdirs(myPath));
        // Second, create a file in that directory.
        Path myFile = new Path("/test/mkdirs/myFile");
        writeFile(fileSys, myFile);
        assertTrue(fileSys.exists(myFile));
        Path myFile2 = new Path("/test/mkdirs/myFile2");
        writeFile(fileSys, myFile2);
        assertTrue(fileSys.exists(myFile2));
        // Verify that rm with a pattern
        {
            String[] args = new String[2];
            args[0] = "-rm";
            args[1] = "/test/mkdirs/myFile*";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertTrue(val == 0);
            assertFalse(fileSys.exists(myFile));
            assertFalse(fileSys.exists(myFile2));
            // re-create the files for other tests
            writeFile(fileSys, myFile);
            assertTrue(fileSys.exists(myFile));
            writeFile(fileSys, myFile2);
            assertTrue(fileSys.exists(myFile2));
        }
        // Verify that we can read the file
        {
            String[] args = new String[3];
            args[0] = "-cat";
            args[1] = "/test/mkdirs/myFile";
            args[2] = "/test/mkdirs/myFile2";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run: " + StringUtils.stringifyException(e));
            }
            assertTrue(val == 0);
        }
        fileSys.delete(myFile2, true);
        // Verify that we get an error while trying to read an nonexistent file
        {
            String[] args = new String[2];
            args[0] = "-cat";
            args[1] = "/test/mkdirs/myFile1";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertTrue(val != 0);
        }
        // Verify that we get an error while trying to delete an nonexistent file
        {
            String[] args = new String[2];
            args[0] = "-rm";
            args[1] = "/test/mkdirs/myFile1";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertTrue(val != 0);
        }
        // Verify that we succeed in removing the file we created
        {
            String[] args = new String[2];
            args[0] = "-rm";
            args[1] = "/test/mkdirs/myFile";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertTrue(val == 0);
        }
        // Verify touch/test
        {
            String[] args;
            int val;
            args = new String[3];
            args[0] = "-test";
            args[1] = "-e";
            args[2] = "/test/mkdirs/noFileHere";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(1, val);
            args[1] = "-z";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(1, val);
            args = new String[2];
            args[0] = "-touchz";
            args[1] = "/test/mkdirs/noFileHere";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(0, val);
            args = new String[3];
            args[0] = "-test";
            args[1] = "-e";
            args[2] = "/test/mkdirs/noFileHere";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(0, val);
            args[1] = "-d";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(1, val);
            args[1] = "-z";
            val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(0, val);
        }
        // Verify that cp from a directory to a subdirectory fails
        {
            String[] args = new String[2];
            args[0] = "-mkdir";
            args[1] = "/test/dir1";
            int val = -1;
            try {
                val = shell.run(args);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(0, val);
            // this should fail
            String[] args1 = new String[3];
            args1[0] = "-cp";
            args1[1] = "/test/dir1";
            args1[2] = "/test/dir1/dir2";
            val = 0;
            try {
                val = shell.run(args1);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(1, val);
            // this should succeed
            args1[0] = "-cp";
            args1[1] = "/test/dir1";
            args1[2] = "/test/dir1foo";
            val = -1;
            try {
                val = shell.run(args1);
            } catch (Exception e) {
                System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
            }
            assertEquals(0, val);
        }
    } finally {
        try {
            fileSys.close();
        } catch (Exception e) {
        }
        cluster.shutdown();
    }
}
