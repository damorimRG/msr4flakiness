public void testJobInfo() throws Exception {
    runTest("/v0/job/*", V0JobServlet.class, IS_SECURITY_ENABLED, new Callable<Void>() {

        public Void call() throws Exception {
            MockDagEngineService.reset();
            Map<String, String> params = new HashMap<String, String>();
            params.put(RestConstants.JOB_SHOW_PARAM, RestConstants.JOB_SHOW_INFO);
            URL url = createURL(MockDagEngineService.JOB_ID + 1 + MockDagEngineService.JOB_ID_END, params);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode());
            assertTrue(conn.getHeaderField("content-type").startsWith(RestConstants.JSON_CONTENT_TYPE));
            JSONObject obj = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream()));
            assertEquals(MockDagEngineService.JOB_ID + 1 + MockDagEngineService.JOB_ID_END, obj.get(JsonTags.WORKFLOW_ID));
            assertEquals(RestConstants.JOB_SHOW_INFO, MockDagEngineService.did);
            MockDagEngineService.reset();
            params = new HashMap<String, String>();
            params.put(RestConstants.JOB_SHOW_PARAM, RestConstants.JOB_SHOW_INFO);
            url = createURL(MockDagEngineService.JOB_ID + (MockDagEngineService.workflows.size() + 1) + MockDagEngineService.JOB_ID_END, params);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode());
            assertEquals(RestConstants.JOB_SHOW_INFO, MockDagEngineService.did);
            return null;
        }
    });
}
