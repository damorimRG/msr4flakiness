@Test
public void testQueueOperations() throws Exception {
    EventHandlerService ehs = Services.get().get(EventHandlerService.class);
    EventQueue eventQ = ehs.getEventQueue();
    assertEquals(eventQ.size(), 0);
    assertEquals(eventQ.getBatchSize(), 3);
    // create some events to enqueue
    WorkflowJobEvent wfEvent = new WorkflowJobEvent("1234-W", "1234-C", WorkflowJob.Status.RUNNING, getTestUser(), "myapp", null, null);
    for (int i = 0; i < 10; i++) {
        ehs.queueEvent(wfEvent);
    }
    assertEquals(eventQ.size(), 10);
    // test single threads polling from queue
    int numThreads = 1;
    Thread[] thread = new Thread[numThreads];
    for (int i = 0; i < numThreads; i++) {
        thread[i] = new Thread(ehs.new EventWorker());
        thread[i].run();
    }
    // n(events) - n(batch) i.e.
    assertEquals(eventQ.size(), 7);
    // 10-3 = 7
    // restore events count to 10
    for (int i = 0; i < 3; i++) {
        ehs.queueEvent(wfEvent);
    }
    assertEquals(eventQ.size(), 10);
    // test two threads polling concurrently from queue
    numThreads = 2;
    thread = new Thread[numThreads];
    for (int i = 0; i < numThreads; i++) {
        thread[i] = new Thread(ehs.new EventWorker());
        thread[i].run();
    }
    // n(events) - n(batch)*n(threads)
    assertEquals(eventQ.size(), 4);
    // i.e. 10 - 3*2 = 4
    // enqueue events again
    for (int i = 0; i < 6; i++) {
        ehs.queueEvent(wfEvent);
    }
    assertEquals(eventQ.size(), 10);
    // test the 2 threads draining repeatedly (mimicking SchedulerService)
    // from queue
    int repetition = 3;
    int r = 0;
    while (r < repetition) {
        if (eventQ.isEmpty()) {
            break;
        }
        for (int i = 0; i < numThreads; i++) {
            thread[i].run();
        }
        r++;
    }
    assertEquals(eventQ.size(), 0);
}
