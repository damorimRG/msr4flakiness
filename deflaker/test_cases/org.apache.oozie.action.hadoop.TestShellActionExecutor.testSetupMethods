/**
 * Verify if the ShellActionExecutor indeed setups the basic stuffs
 *
 * @throws Exception
 */
public void testSetupMethods() throws Exception {
    ShellActionExecutor ae = new ShellActionExecutor();
    // ActionExcutor type is 'shell'
    assertEquals("shell", ae.getType());
    // Verify the launcher jar filename
    assertEquals("shell-launcher.jar", ae.getLauncherJarName());
    List<Class> classes = new ArrayList<Class>();
    classes.add(LauncherMapper.class);
    classes.add(LauncherSecurityManager.class);
    classes.add(LauncherException.class);
    classes.add(LauncherMainException.class);
    classes.add(PrepareActionsDriver.class);
    classes.addAll(Services.get().get(URIHandlerService.class).getClassesForLauncher());
    classes.add(ActionStats.class);
    classes.add(ActionType.class);
    classes.add(LauncherMain.class);
    classes.add(MapReduceMain.class);
    classes.add(ShellMain.class);
    classes.add(ShellMain.OutputWriteThread.class);
    // Verify the class
    assertEquals(classes, ae.getLauncherClasses());
    Element actionXml = XmlUtils.parseXml("<shell>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<exec>SCRIPT</exec>" + "<argument>a=A</argument>" + "<argument>b=B</argument>" + "</shell>");
    XConfiguration protoConf = new XConfiguration();
    protoConf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    WorkflowJobBean wf = createBaseWorkflow(protoConf, "pig-action");
    WorkflowActionBean action = (WorkflowActionBean) wf.getActions().get(0);
    action.setType(ae.getType());
    Context context = new Context(wf, action);
    Configuration conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    assertEquals("SCRIPT", conf.get("oozie.shell.exec"));
    assertEquals("2", conf.get("oozie.shell.args.size"));
    assertEquals("a=A", conf.get("oozie.shell.args.0"));
    assertEquals("b=B", conf.get("oozie.shell.args.1"));
}
