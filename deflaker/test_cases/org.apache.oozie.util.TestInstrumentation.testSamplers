public void testSamplers() throws Exception {
    Instrumentation inst = new Instrumentation();
    ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1);
    inst.setScheduler(scheduledExecutorService);
    inst.addSampler("a", "1", 10, 1, new Instrumentation.Variable<Long>() {

        public Long getValue() {
            return 1L;
        }
    });
    assertEquals(1, inst.getSamplers().size());
    assertEquals(1, inst.getSamplers().get("a").size());
    inst.addSampler("a", "2", 10, 1, new Instrumentation.Variable<Long>() {

        public Long getValue() {
            return 2L;
        }
    });
    assertEquals(1, inst.getSamplers().size());
    assertEquals(2, inst.getSamplers().get("a").size());
    inst.addSampler("b", "1", 10, 1, new Instrumentation.Variable<Long>() {

        private long counter = 0;

        public Long getValue() {
            return counter++ % 10;
        }
    });
    assertEquals(2, inst.getSamplers().size());
    assertEquals(2, inst.getSamplers().get("a").size());
    assertEquals(1, inst.getSamplers().get("b").size());
    waitFor(20 * 1000, new Predicate() {

        public boolean evaluate() throws Exception {
            return false;
        }
    });
    assertEquals("", 1D, inst.getSamplers().get("a").get("1").getValue(), 0.01D);
    assertEquals("", 2D, inst.getSamplers().get("a").get("2").getValue(), 0.02D);
    assertEquals("", 5D, inst.getSamplers().get("b").get("1").getValue(), 0.5D);
    scheduledExecutorService.shutdownNow();
}
