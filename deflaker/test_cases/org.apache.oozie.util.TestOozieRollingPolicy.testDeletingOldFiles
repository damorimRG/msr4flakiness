public void testDeletingOldFiles() throws Exception {
    // OozieRollingPolicy gets the log path and log name from XLogService by calling Services.get.get(XLogService.class) so we
    // use a mock version where we overwrite the XLogService.getOozieLogName() and XLogService.getOozieLogPath() to simply
    // return these values instead of involving Services.  We then overwrite OozieRollingPolicy.getXLogService() to return the
    // mock one instead.
    String oozieLogPath = getTestCaseDir();
    String oozieLogName = "oozie.log";
    final XLogService xls = new MockXLogService(oozieLogPath, oozieLogName);
    OozieRollingPolicy orp = new OozieRollingPolicy() {

        @Override
        XLogService getXLogService() {
            return xls;
        }
    };
    // only keep 3 newest logs
    orp.setMaxHistory(3);
    Calendar cal = new GregorianCalendar();
    final File f0 = new File(oozieLogPath, oozieLogName);
    f0.createNewFile();
    f0.setLastModified(cal.getTimeInMillis());
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f1 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal) + ".gz");
    f1.createNewFile();
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f2 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal) + ".gz");
    f2.createNewFile();
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f3 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal) + ".gz");
    f3.createNewFile();
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f4 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal) + ".gz");
    f4.createNewFile();
    // Test that it only deletes the oldest file (f1)
    orp.isTriggeringEvent(null, null, null, 0);
    waitFor(60 * 1000, new Predicate() {

        @Override
        public boolean evaluate() throws Exception {
            return (f0.exists() && !f1.exists() && f2.exists() && f3.exists() && f4.exists());
        }
    });
    assertTrue(f0.exists() && !f1.exists() && f2.exists() && f3.exists() && f4.exists());
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f5 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal));
    f5.createNewFile();
    f5.setLastModified(cal.getTimeInMillis());
    cal.add(Calendar.HOUR_OF_DAY, -15);
    final File f6 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal));
    f6.createNewFile();
    f6.setLastModified(cal.getTimeInMillis());
    // Test that it can delete more than one file when necessary and that it works with non .gz files
    orp.isTriggeringEvent(null, null, null, 0);
    waitFor(60 * 1000, new Predicate() {

        @Override
        public boolean evaluate() throws Exception {
            return (f0.exists() && !f1.exists() && !f2.exists() && f3.exists() && f4.exists() && f5.exists() && !f6.exists());
        }
    });
    assertTrue(f0.exists() && !f1.exists() && !f2.exists() && f3.exists() && f4.exists() && f5.exists() && !f6.exists());
    final File f7 = new File(oozieLogPath, "blah.txt");
    f7.createNewFile();
    f7.setLastModified(cal.getTimeInMillis());
    cal.add(Calendar.HOUR_OF_DAY, 1);
    final File f8 = new File(oozieLogPath, oozieLogName + formatDateForFilename(cal));
    cal.add(Calendar.HOUR_OF_DAY, 15);
    f8.createNewFile();
    f8.setLastModified(cal.getTimeInMillis());
    // Test that it ignores "other" files even if they are oldest and test that it uses the modified time for non .gz files
    // (instead of the time from the filename)
    orp.isTriggeringEvent(null, null, null, 0);
    waitFor(60 * 1000, new Predicate() {

        @Override
        public boolean evaluate() throws Exception {
            return (f0.exists() && !f1.exists() && !f2.exists() && !f3.exists() && f4.exists() && f5.exists() && !f6.exists() && f7.exists() && f8.exists());
        }
    });
    assertTrue(f0.exists() && !f1.exists() && !f2.exists() && !f3.exists() && f4.exists() && f5.exists() && !f6.exists() && f7.exists() && f8.exists());
}
