/**
 * Tests modification time in DFS.
 */
@Test
public void testModTime() throws IOException {
    Configuration conf = new HdfsConfiguration();
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
    cluster.waitActive();
    InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort());
    DFSClient client = new DFSClient(addr, conf);
    DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE);
    assertEquals("Number of Datanodes ", numDatanodes, info.length);
    FileSystem fileSys = cluster.getFileSystem();
    int replicas = numDatanodes - 1;
    assertTrue(fileSys instanceof DistributedFileSystem);
    try {
        // 
        // create file and record ctime and mtime of test file
        // 
        System.out.println("Creating testdir1 and testdir1/test1.dat.");
        Path dir1 = new Path("testdir1");
        Path file1 = new Path(dir1, "test1.dat");
        DFSTestUtil.createFile(fileSys, file1, fileSize, fileSize, blockSize, (short) replicas, seed);
        FileStatus stat = fileSys.getFileStatus(file1);
        long mtime1 = stat.getModificationTime();
        assertTrue(mtime1 != 0);
        // 
        // record dir times
        // 
        stat = fileSys.getFileStatus(dir1);
        long mdir1 = stat.getModificationTime();
        // 
        // create second test file
        // 
        System.out.println("Creating testdir1/test2.dat.");
        Path file2 = new Path(dir1, "test2.dat");
        DFSTestUtil.createFile(fileSys, file2, fileSize, fileSize, blockSize, (short) replicas, seed);
        stat = fileSys.getFileStatus(file2);
        // 
        // verify that mod time of dir remains the same
        // as before. modification time of directory has increased.
        // 
        stat = fileSys.getFileStatus(dir1);
        assertTrue(stat.getModificationTime() >= mdir1);
        mdir1 = stat.getModificationTime();
        // 
        // create another directory
        // 
        Path dir2 = fileSys.makeQualified(new Path("testdir2/"));
        System.out.println("Creating testdir2 " + dir2);
        assertTrue(fileSys.mkdirs(dir2));
        stat = fileSys.getFileStatus(dir2);
        long mdir2 = stat.getModificationTime();
        // 
        // rename file1 from testdir into testdir2
        // 
        Path newfile = new Path(dir2, "testnew.dat");
        System.out.println("Moving " + file1 + " to " + newfile);
        fileSys.rename(file1, newfile);
        // 
        // verify that modification time of file1 did not change.
        // 
        stat = fileSys.getFileStatus(newfile);
        assertTrue(stat.getModificationTime() == mtime1);
        // 
        // verify that modification time of  testdir1 and testdir2
        // were changed.
        // 
        stat = fileSys.getFileStatus(dir1);
        assertTrue(stat.getModificationTime() != mdir1);
        mdir1 = stat.getModificationTime();
        stat = fileSys.getFileStatus(dir2);
        assertTrue(stat.getModificationTime() != mdir2);
        mdir2 = stat.getModificationTime();
        // 
        // delete newfile
        // 
        System.out.println("Deleting testdir2/testnew.dat.");
        assertTrue(fileSys.delete(newfile, true));
        // 
        // verify that modification time of testdir1 has not changed.
        // 
        stat = fileSys.getFileStatus(dir1);
        assertTrue(stat.getModificationTime() == mdir1);
        // 
        // verify that modification time of testdir2 has changed.
        // 
        stat = fileSys.getFileStatus(dir2);
        assertTrue(stat.getModificationTime() != mdir2);
        mdir2 = stat.getModificationTime();
        cleanupFile(fileSys, file2);
        cleanupFile(fileSys, dir1);
        cleanupFile(fileSys, dir2);
    } catch (IOException e) {
        info = client.datanodeReport(DatanodeReportType.ALL);
        printDatanodeReport(info);
        throw e;
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
}
