public void testSetupMethods() throws Exception {
    MapReduceActionExecutor ae = new MapReduceActionExecutor();
    assertEquals("map-reduce", ae.getType());
    assertEquals("map-reduce-launcher.jar", ae.getLauncherJarName());
    List<Class> classes = new ArrayList<Class>();
    classes.add(LauncherMapper.class);
    classes.add(LauncherSecurityManager.class);
    classes.add(LauncherException.class);
    classes.add(LauncherMainException.class);
    classes.add(PrepareActionsDriver.class);
    classes.addAll(Services.get().get(URIHandlerService.class).getClassesForLauncher());
    classes.add(ActionStats.class);
    classes.add(ActionType.class);
    classes.add(LauncherMain.class);
    classes.add(MapReduceMain.class);
    classes.add(PipesMain.class);
    // TODO - Remove comment when Main class refactoring is done
    // assertEquals(classes, ae.getLauncherClasses());
    Element actionXml = XmlUtils.parseXml("<map-reduce>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<configuration>" + "<property><name>mapred.input.dir</name><value>IN</value></property>" + "<property><name>mapred.output.dir</name><value>OUT</value></property>" + "</configuration>" + "</map-reduce>");
    XConfiguration protoConf = new XConfiguration();
    protoConf.set(WorkflowAppService.HADOOP_USER, getTestUser());
    WorkflowJobBean wf = createBaseWorkflow(protoConf, "mr-action");
    WorkflowActionBean action = (WorkflowActionBean) wf.getActions().get(0);
    action.setType(ae.getType());
    Context context = new Context(wf, action);
    Configuration conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    assertEquals("IN", conf.get("mapred.input.dir"));
    // Enable uber jars to test that MapReduceActionExecutor picks up the oozie.mapreduce.uber.jar property correctly
    Services serv = Services.get();
    boolean originalUberJarDisabled = serv.getConf().getBoolean("oozie.action.mapreduce.uber.jar.enable", false);
    serv.getConf().setBoolean("oozie.action.mapreduce.uber.jar.enable", true);
    actionXml = createUberJarActionXML(getNameNodeUri() + "/app/job.jar", "");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // absolute path with namenode
    assertEquals(getNameNodeUri() + "/app/job.jar", conf.get("oozie.mapreduce.uber.jar"));
    JobConf launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher conf
    assertEquals(getNameNodeUri() + "/app/job.jar", launcherJobConf.getJar());
    actionXml = createUberJarActionXML("/app/job.jar", "");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // absolute path without namenode
    assertEquals(getNameNodeUri() + "/app/job.jar", conf.get("oozie.mapreduce.uber.jar"));
    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher conf
    assertEquals(getNameNodeUri() + "/app/job.jar", launcherJobConf.getJar());
    actionXml = createUberJarActionXML("job.jar", "");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // relative path
    assertEquals(getFsTestCaseDir() + "/job.jar", conf.get("oozie.mapreduce.uber.jar"));
    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher
    assertEquals(getFsTestCaseDir() + "/job.jar", launcherJobConf.getJar());
    actionXml = createUberJarActionXML("job.jar", "<streaming></streaming>");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // ignored for streaming
    assertEquals("", conf.get("oozie.mapreduce.uber.jar"));
    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher conf (not set)
    assertNull(launcherJobConf.getJar());
    actionXml = createUberJarActionXML("job.jar", "<pipes></pipes>");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // ignored for pipes
    assertEquals("", conf.get("oozie.mapreduce.uber.jar"));
    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher conf (not set)
    assertNull(launcherJobConf.getJar());
    actionXml = XmlUtils.parseXml("<map-reduce>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "</map-reduce>");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    // doesn't resolve if not set
    assertNull(conf.get("oozie.mapreduce.uber.jar"));
    launcherJobConf = ae.createLauncherConf(getFileSystem(), context, action, actionXml, conf);
    // same for launcher conf
    assertNull(launcherJobConf.getJar());
    // Disable uber jars to test that MapReduceActionExecutor won't allow the oozie.mapreduce.uber.jar property
    serv.getConf().setBoolean("oozie.action.mapreduce.uber.jar.enable", false);
    try {
        actionXml = createUberJarActionXML(getNameNodeUri() + "/app/job.jar", "");
        conf = ae.createBaseHadoopConf(context, actionXml);
        ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
        fail("ActionExecutorException expected because uber jars are disabled");
    } catch (ActionExecutorException aee) {
        assertEquals("MR003", aee.getErrorCode());
        assertEquals(ActionExecutorException.ErrorType.ERROR, aee.getErrorType());
        assertTrue(aee.getMessage().contains("oozie.action.mapreduce.uber.jar.enable"));
        assertTrue(aee.getMessage().contains("oozie.mapreduce.uber.jar"));
    }
    serv.getConf().setBoolean("oozie.action.mapreduce.uber.jar.enable", originalUberJarDisabled);
    actionXml = XmlUtils.parseXml("<map-reduce>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<streaming>" + "<mapper>M</mapper>" + "<reducer>R</reducer>" + "<record-reader>RR</record-reader>" + "<record-reader-mapping>RRM1=1</record-reader-mapping>" + "<record-reader-mapping>RRM2=2</record-reader-mapping>" + "<env>e=E</env>" + "<env>ee=EE</env>" + "</streaming>" + "<configuration>" + "<property><name>mapred.input.dir</name><value>IN</value></property>" + "<property><name>mapred.output.dir</name><value>OUT</value></property>" + "</configuration>" + "</map-reduce>");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    assertEquals("M", conf.get("oozie.streaming.mapper"));
    assertEquals("R", conf.get("oozie.streaming.reducer"));
    assertEquals("RR", conf.get("oozie.streaming.record-reader"));
    assertEquals("2", conf.get("oozie.streaming.record-reader-mapping.size"));
    assertEquals("2", conf.get("oozie.streaming.env.size"));
    actionXml = XmlUtils.parseXml("<map-reduce>" + "<job-tracker>" + getJobTrackerUri() + "</job-tracker>" + "<name-node>" + getNameNodeUri() + "</name-node>" + "<pipes>" + "<map>M</map>" + "<reduce>R</reduce>" + "<inputformat>IF</inputformat>" + "<partitioner>P</partitioner>" + "<writer>W</writer>" + "<program>PP</program>" + "</pipes>" + "<configuration>" + "<property><name>mapred.input.dir</name><value>IN</value></property>" + "<property><name>mapred.output.dir</name><value>OUT</value></property>" + "</configuration>" + "</map-reduce>");
    conf = ae.createBaseHadoopConf(context, actionXml);
    ae.setupActionConf(conf, context, actionXml, getFsTestCaseDir());
    assertEquals("M", conf.get("oozie.pipes.map"));
    assertEquals("R", conf.get("oozie.pipes.reduce"));
    assertEquals("IF", conf.get("oozie.pipes.inputformat"));
    assertEquals("P", conf.get("oozie.pipes.partitioner"));
    assertEquals("W", conf.get("oozie.pipes.writer"));
    assertEquals(getFsTestCaseDir() + "/PP", conf.get("oozie.pipes.program"));
}
