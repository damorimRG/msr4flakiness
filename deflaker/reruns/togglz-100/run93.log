org.togglz.cdi.container.ManagedFeatureManagerTest, containerManagedFeatureManagerShouldBeUsedIfAvailable, pass
org.togglz.cdi.test.CDIBasicOperationTest, testCDIBasicFeatures, pass
org.togglz.junit.TogglzRuleAllDisabledTest, testActiveByDefault, pass
org.togglz.junit.TogglzRuleAllDisabledTest, testToggleFeature, pass
org.togglz.junit.TogglzRuleAllEnabledTest, testActiveByDefault, pass
org.togglz.junit.TogglzRuleAllEnabledTest, testToggleFeature, pass
org.togglz.junit.TogglzRuleWithAnnotationTest, shouldActivateMultipleFeatures, pass
org.togglz.junit.TogglzRuleWithAnnotationTest, featureShouldBeInactiveByDefault, pass
org.togglz.junit.TogglzRuleWithAnnotationTest, featureShouldBeActiveWithAnnotation, pass
org.togglz.junit.vary.FeatureVariationsTest, test, pass
org.togglz.junit.vary.FeatureVariationsTest, test, pass
org.togglz.junit.vary.FeatureVariationsTest, test, pass
org.togglz.junit.vary.FeatureVariationsTest, test, pass
org.togglz.junit.vary.TogglzRuleWithVariations_CalledMultipleTimes_Test, test, pass
org.togglz.junit.vary.TogglzRuleWithVariations_DisableSadCase_Test, test, pass
org.togglz.junit.vary.TogglzRuleWithVariations_EnableSadCase_Test, test, pass
org.togglz.junit.vary.TogglzRuleWithVariations_HappyCase_Test, test, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeValidWithIpv6AddressRange, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeInvalidWithWrongIpv6Address, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeValidWithIpv4Address, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForFirstMatchingIp, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeInvalidWithWrongCidrFormat, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeValidWithIpv4AddressRange, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForFirstMatchingRange, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeInvalidWithWrongIpv4Address, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterProperties, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForNonMatchingIp, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForNullParams, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForInvalidCidrNotation, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForMatchingIpv6Range, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeInvalidWithEmptyInput, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForNonMatchingIpv6, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForSecondMatchingRange, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForNonMatchingRange, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForMatchingIpv6ShortForm, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForEmptyParams, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForSecondMatchingIp, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, addressParameterShouldBeValidWithIpv6Address, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeActiveForMatchingIpv6, pass
org.togglz.servlet.activation.ClientIpActivationStrategyTest, shouldBeInactiveForNonMatchingIpv6ShortForm, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldNotBeActiveWithANullRequestObject, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldNotBeActiveWithNoPermittedParameters, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldBeActiveWhenAnAcceptedParameterWithoutRequiredValueIsPresent, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldBeActiveRegardlessOfWhitespaceAroundActivationParams, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, refererWithMultiValueParamsShouldBeChecked, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldNotBeActiveWhenOnlyNonMatchingParametersArePresent, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, refererParamsShouldNotOverrideRequestParamsButWillQualifyAsActiveIfSeparate, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldNotBeActiveWhenMatchingParameterRequiringValueDoesNotHaveValue, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, refererWithoutQueryParam, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldBeActiveIfParameterWithMultipleValuesHasAnyMatch, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldBeActiveWhenAnAcceptedParameterAndValueArePresent, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, strategyShouldCheckParametersOfReferrer, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldNotBeActiveWhenMatchingParameterHasANonMatchingValue, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, refererWithEncodedParamsCanMatch, pass
org.togglz.servlet.activation.QueryParameterActivationStrategyTest, shouldBeActiveWhenAnAcceptedParameterWithoutRequiredValueIsPresentAndItHasAValue, pass
org.togglz.servlet.activation.ServerNameActivationStrategyTest, shouldReturnTrueForFeatureOnMatchingDomainName, pass
org.togglz.servlet.activation.ServerNameActivationStrategyTest, shouldReturnFalseForEmptyDomainList, pass
org.togglz.servlet.activation.ServerNameActivationStrategyTest, shouldReturnFalseForFeatureOnDifferentDomainName, pass
org.togglz.servlet.activation.ServerNameActivationStrategyTest, shouldReturnTrueForFeatureOnMatchingOneDomainNameFromDomainList, pass
org.togglz.servlet.test.basic.ServletBasicOperationTest, testSerlvetBasicFeatures, pass
org.togglz.servlet.test.repository.cache.CacheRepositoryTest, testCachingOfFeatureState, pass
org.togglz.servlet.test.repository.jdbc.JDBCRepositoryTest, testSetFeatureStateFromJDBCRepository, pass
org.togglz.servlet.test.repository.jdbc.JDBCRepositoryTest, testGetFeatureStateFromJDBCRepository, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testFeatureAdminFlagForAdminUser, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testDisabledForAllUsers, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testEnabledForOneUserWithCorrectUser, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testEnabledForAllUsers, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testEnabledForOneUserWithOtherUsers, pass
org.togglz.servlet.test.user.thread.ThreadBasedUsersTest, testFeatureAdminFlagForOtherUser, pass
org.togglz.servlet.test.util.HttpServletRequestHolderTest, testRequestIsBoundToHolder, pass
org.togglz.testing.DefaultFeatureStateTest, testFeatureManagerImmutable, pass
org.togglz.testing.DefaultFeatureStateTest, testFeaturesActiveByDefault, pass
org.togglz.testing.TestFeatureManagerTest, shouldSupportTogglingUntypedFeature, pass
org.togglz.testing.TestFeatureManagerTest, featureShouldBeInactiveByDefault, pass
org.togglz.testing.TestFeatureManagerTest, shouldSupportReadingWithNamedFeature, pass
org.togglz.testing.TestFeatureManagerTest, shouldToggleAllFeatures, pass
org.togglz.testing.TestFeatureManagerTest, shouldToggleIndividualFeature, pass
org.togglz.redis.RedisStateRepositoryTest, testFormatOfExistingFeatureState, pass
org.togglz.redis.RedisStateRepositoryTest, testSetFeatureStateWithStrategyAndParameter, pass
org.togglz.redis.RedisStateRepositoryTest, testGetFeatureStateNotExisting, pass
org.togglz.redis.RedisStateRepositoryTest, testSetFeatureStateExisting, pass
org.togglz.s3.S3StateRepositoryTest, testUpdateFeatureState, pass
org.togglz.s3.S3StateRepositoryTest, testGetSetFeatureState, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, testSetFeatureStateExistingInMap, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, onlyHazelcastInstanceSetBuildsSuccessfully, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, multipleConfiguredPiecesThrowsIllegalStateException, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, onlyConfigSetBuildsSuccessfully, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, testSetFeatureStateNotExisitingInMap, pass
org.togglz.hazelcast.HazelcastStateRepositoryTest, onlyClientConfigSetBuildsSuccessfully, pass
org.togglz.zookeeper.ZookeeperStateRepositoryTest, testActivationStrategySavingAndLoading, pass
org.togglz.zookeeper.ZookeeperStateRepositoryTest, testFeatureSavingAndLoading, pass
org.togglz.zookeeper.ZookeeperStateRepositoryTest, testZkNodeChangesUpdateFeatureState, pass
org.togglz.zookeeper.ZookeeperStateRepositoryTest, testEnabledStateSavingAndLoading, pass
org.togglz.zookeeper.ZookeeperStateRepositoryTest, testLoadingWithSavedState, pass
org.togglz.core.activation.DefaultActivationStrategyProviderTest, shouldLoadDefaultStrategies, pass
org.togglz.core.activation.DefaultActivationStrategyProviderTest, shouldNotContainCustomStrategyIfNotAdded, pass
org.togglz.core.activation.DefaultActivationStrategyProviderTest, shouldContainCustomStrategyIfAddedMultipleBefore, pass
org.togglz.core.activation.DefaultActivationStrategyProviderTest, shouldContainCustomStrategyIfAddedBefore, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldAlwaysReturnTrueForOneHundredPercent, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldWorkCorrectlyForNinetyNinePercent, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldAlwaysReturnFalseForZeroPercent, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldWorkCorrectlyForOnePercent, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldFindCorrectDecisionForIntermediateValues, pass
org.togglz.core.activation.GradualActivationStrategyTest, shouldReturnFalseForInvalidPercentage, pass
org.togglz.core.activation.IPActivationStrategyTest, shouldReturnFalseForFeatureOnOtherMachine, pass
org.togglz.core.activation.IPActivationStrategyTest, shouldReturnTrueForFeatureOnCorrectMachine, pass
org.togglz.core.activation.IPActivationStrategyTest, shouldReturnFalseForEmptyIPlist, pass
org.togglz.core.activation.IPActivationStrategyTest, multipleMachineIps, pass
org.togglz.core.activation.ParameterBuilderTest, testLargeTextParameter, pass
org.togglz.core.activation.ParameterBuilderTest, testParameterWithRegularExpression, pass
org.togglz.core.activation.ParameterBuilderTest, testOptionalParameter, pass
org.togglz.core.activation.ParameterBuilderTest, testParameterWithCustomName, pass
org.togglz.core.activation.ParameterBuilderTest, testMinimalParameter, pass
org.togglz.core.activation.ParameterBuilderTest, testParameterWithDescription, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, scriptCanAccessUserAttributes, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, shouldSupportScriptWithFunction, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, shouldReturnSameResultAsScriptForLiterals, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, scriptCanAccessCurrentDate, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, scriptCanAccessCurrentUser, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, shouldReturnFalseForUnsupportedLanguage, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, shouldSupportMultilineScripts, pass
org.togglz.core.activation.ScriptEngineActivationStrategyTest, shouldReturnFalseForInvalidJavaScript, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeFalseIfPropertyExistsButisInvalid, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeFalseIfNoMatchingFeatureState, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeFalseIfPropertyDoesNotExist, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeTrueIfPropertyExistsAndIsTrue, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeFalseIfPropertyExistsAndIsEmpty, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeTrueIfPropertyStringsMatch, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeTrueIfPropertyAndStateValueMatchFalse, pass
org.togglz.core.activation.SystemPropertyActivationStrategyTest, shouldBeFalseIfPropertyExistsButisFalse, pass
org.togglz.core.activation.UsernameActivationStrategyTest, shouldReturnFalseForDifferentUser, pass
org.togglz.core.activation.UsernameActivationStrategyTest, shouldReturnTrueForCorrectUser, pass
org.togglz.core.activation.UsernameActivationStrategyTest, shouldReturnCorrectParameterList, pass
org.togglz.core.activation.UsernameActivationStrategyTest, shouldReturnFalseForUnknownUser, pass
org.togglz.core.activation.UsernameActivationStrategyTest, shouldReturnFalseForEmptyUserlist, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, doesntFailForOtherCollectionTypes, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnFalseWhenThereIsNoUser, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, getParametersWillReturnRoles, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, getNameWillReturnConstant, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnFalseWhenRolesParamIsBlank, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnFalseWhenThereIsNoRolesAttribute, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnFalseWhenUserHasNoneOfSelectedRoles, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnTrueWhenUserHasAnyOfSelectedRoles, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, isActiveWillReturnFalseWhenThereIsNoRolesParam, pass
org.togglz.core.activation.UserRoleActivationStrategyTest, getIdWillReturnConstant, pass
org.togglz.core.context.ThreadLocalFeatureManagerProviderTest, firstTest, pass
org.togglz.core.context.ThreadLocalFeatureManagerProviderTest, secondTest, pass
org.togglz.core.logging.LoggingStateRepositoryTest, shouldDelegateSetFeatureStateAndLog, pass
org.togglz.core.logging.LoggingStateRepositoryTest, shouldDelegateSetFeatureStateAndLogCustomLogMessage, pass
org.togglz.core.logging.LoggingStateRepositoryTest, shouldDelegateGetFeatureState, pass
org.togglz.core.logging.LoggingStateRepositoryTest, shouldDelegateSetFeatureStateAndLogCustomLogMessageWithoutPlaceholders, pass
org.togglz.core.manager.CompositeFeatureProviderTest, oneProvider, pass
org.togglz.core.manager.CompositeFeatureProviderTest, empty, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testGetFeatureState, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testIsActive, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testIsActiveUsingDefaultFeatureState, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testGetFeatures, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testShouldHandleEnabledFlagCorrectlyWithCustomStrategy, pass
org.togglz.core.manager.DefaultFeatureManagerTest, testGetFeatureStateUsingDefaultFeatureState, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnMetaDataWhenRequestedWithOtherFeatureImplementation, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnCombinedFeatureListForMultipleEnums, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldBuildMetadataForMultipleEnums, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldFailForDuplicateFeatureName, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnNullForInfoLinkByDefault, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnInfoLinkIfAnnotationPresent, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldBuildMetadataForMultipleEnumsViaConstructor, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldFailForNull, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnOwnerNameIfAnnotationPresent, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnCombinedFeatureListForMultipleEnumsViaConstructor, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnCorrectListOfFeaturesForEnum, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldFailForArrayWithNull, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnMetaDataWithCorrectLabel, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldNotAllowTheDefaultFeatureStateToBeChangedByExternalClasses, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldFailForNonEnumType, pass
org.togglz.core.manager.EnumBasedFeatureProviderTest, shouldReturnNullForOwnerNameByDefault, pass
org.togglz.core.manager.FeatureManagerBuilderTest, shouldAddStrategyIfUsingDefaultProvider, pass
org.togglz.core.manager.FeatureManagerBuilderTest, shouldFailIfAddingStrategyWithCustomProvider, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldSupportDefinitionWithSingleGroup, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldSupportDefinitionWithLabelAndDefault, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldSupportDefinitionWithLabelAndDefaultAndTrailingSemicolon, pass
org.togglz.core.manager.PropertyFeatureProviderTest, canInitializeFromProperties, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldNotAllowTheDefaultFeatureStateToBeChangedByExternalClasses, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldSupportDefinitionWithOnlyLabel, pass
org.togglz.core.manager.PropertyFeatureProviderTest, shouldSupportDefinitionWithoutLabel, pass
org.togglz.core.metadata.enums.AnnotationFeatureGroupTest, buildWillReturnNullWhenFeatureGroupAnnotationIsNotPresent, pass
org.togglz.core.metadata.enums.AnnotationFeatureGroupTest, buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForClassLevelGroup, pass
org.togglz.core.metadata.enums.AnnotationFeatureGroupTest, buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForFieldLevelGroup, pass
org.togglz.core.metadata.enums.EnumFeatureMetaDataTest, constructorWillPopulateGroupsFromAnnotations, pass
org.togglz.core.metadata.enums.EnumFeatureMetaDataTest, constructorWillPopulateDefaultActivationStrategyFromAnnotations, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, testCachingOfReadOperationsWithTimeToLife, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, testCacheExpiryBecauseOfTimeToLife, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, testCacheWithDifferentFeatureImplementations, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, shouldFailForNegativeTtl, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, testCachingOfReadOperationsWithoutTimeToLife, pass
org.togglz.core.repository.cache.CachingStateRepositoryTest, testStateModifyExpiresCache, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testGetFeatureInFirstBackingRepo, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testGetFeatureInSecondBackingRepo, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testSetFeatureFIRST, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testSetFeatureLAST, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testFeatureNotFound, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testGetFeatureFIFO, pass
org.togglz.core.repository.composite.CompositeStateRepositoryTest, testGetFeatureLIFO, pass
org.togglz.core.repository.FeatureStateTest, testOldUsersApiHandling, pass
org.togglz.core.repository.FeatureStateTest, testSimpleFeatureState, pass
org.togglz.core.repository.file.FileBasedRepositoryPerformanceTest, readingExistingFeature, pass
org.togglz.core.repository.file.FileBasedRepositoryPerformanceTest, readingMissingFeature, pass
org.togglz.core.repository.file.FileBasedStateRepositoryConcurrencyTest, shouldWorkUnderHeavyLoad, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, updateMultipleStates, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, enableFeature, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, removeStrategy, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, readFeatureStateFromOldFormat, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, setStrategyId, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, disableFeature, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, addNewProperty, pass
org.togglz.core.repository.file.FileBasedStateRepositoryTest, removeProperty, pass
org.togglz.core.repository.jdbc.JDBCRepositoryAutoCommitTest, shouldUpdateWithAutoCommitDisabled, pass
org.togglz.core.repository.jdbc.JDBCRepositoryAutoCommitTest, shouldUpdateWithAutoCommitEnabled, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldReadStateWithStrategyAndParameters, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldSaveStateStrategyAndParameters, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldSaveStateWithoutStrategyOrParameters, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldPropagateTheExceptionWhenWriteFails, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldReadStateWithoutStrategyAndParameters, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldPropagateTheExceptionWhenReadFails, pass
org.togglz.core.repository.jdbc.JDBCStateRepositoryTest, testShouldUpdateExistingDatabaseEntry, pass
org.togglz.core.repository.jdbc.SchemaUpdaterTest, shouldMigrateToVersion1, pass
org.togglz.core.repository.jdbc.SchemaUpdaterTest, shouldMigrateToVersion2, pass
org.togglz.core.repository.jdbc.SchemaUpdaterTest, shouldDetectMissingTable, pass
org.togglz.core.repository.jdbc.SchemaUpdaterTest, shouldDetectVersion1, pass
org.togglz.core.repository.listener.ListenableStateRepositoryTest, shouldNotifyListenersInWeightedOrder, pass
org.togglz.core.repository.listener.ListenableStateRepositoryTest, shouldNotifyListenersAfterSet, pass
org.togglz.core.repository.listener.ListenableStateRepositoryTest, shouldSetFeatureInDelegate, pass
org.togglz.core.repository.listener.ListenableStateRepositoryTest, shouldGetFeatureFromDelegate, pass
org.togglz.core.repository.listener.ListenableStateRepositoryTest, shouldReturnNullForUnknownFeature, pass
org.togglz.core.repository.mem.InMemoryStateRepositoryTest, testGetFeatureStateChangeNotAffectsInternalRepositoryState, pass
org.togglz.core.repository.mem.InMemoryStateRepositoryTest, testSetFeatureStateChangeNotAffectsInternalRepositoryState, pass
org.togglz.core.repository.mem.InMemoryStateRepositoryTest, testGetFeatureStateNotSameAsSetFeatureState, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, lineSeparatorShouldDefaultSimpleNewLine, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, escapesNewLineInSinglelineMode, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, escapesAmpersandInSinglelineMode, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, shouldUseCustomLineSeparator, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, shouldConvertInMultilineMode, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, escapesNewLineInMultilineMode, pass
org.togglz.core.repository.util.DefaultMapSerializerTest, shouldConvertInSinglelineMode, pass
org.togglz.core.user.SingleUserProviderTest, canProvideNamedUser, pass
org.togglz.core.util.ClassUtilsTest, testCreateInstance, pass
org.togglz.core.util.FeatureAnnotationsTest, testGetLabel, pass
org.togglz.core.util.FeatureAnnotationsTest, getAnnotationsWillReturnEmptySetWhenThereAreNoAnnotations, pass
org.togglz.core.util.FeatureAnnotationsTest, getAnnotationWillReturnFieldLevelAnnotation, pass
org.togglz.core.util.FeatureAnnotationsTest, getAnnotationWillReturnClassLevelAnnotation, pass
org.togglz.core.util.FeatureAnnotationsTest, getAnnotationsWillReturnBothFieldAndClassLevelAnnotations, pass
org.togglz.core.util.FeatureAnnotationsTest, getAnnotationWillReturnNullWhenAnnotationDoesNotExist, pass
org.togglz.core.util.FeatureAnnotationsTest, testIsEnabledByDefault, pass
org.togglz.core.util.FeatureMapTest, canBootstrapViaConstructor, pass
org.togglz.core.util.FeatureMapTest, shouldReturnCorrectSize, pass
org.togglz.core.util.FeatureMapTest, shouldSupportLookupByFeatureInstance, pass
org.togglz.core.util.FeatureMapTest, shouldSupportLookupByFeatureName, pass
org.togglz.core.util.FeatureStateTest, serializable, pass
org.togglz.core.util.NamedFeatureTest, serializable, pass
org.togglz.core.util.StringsTest, testTrim, pass
org.togglz.core.util.StringsTest, testToBoolean, pass
org.togglz.core.util.StringsTest, testSplitAndTrim, pass
org.togglz.core.util.StringsTest, testToBooleanThrowsIfStringIsInvalid, pass
org.togglz.core.util.StringsTest, testIsNotEmpty, pass
org.togglz.core.util.StringsTest, testTrimToNull, pass
org.togglz.core.util.StringsTest, testIsEmpty, pass
org.togglz.core.util.WeightedTest, shouldSupportMinimumIntValue, pass
org.togglz.core.util.WeightedTest, shouldSortCorrectlySimpleIntValues, pass
org.togglz.core.util.WeightedTest, shouldSupportMaximumIntValue, pass
org.togglz.slack.config.NotificationConfigurationBuilderSpec, should require withSlackHookUrl property, pass
org.togglz.slack.config.NotificationConfigurationBuilderSpec, should only withSlackHookUrl property be required, pass
org.togglz.slack.config.NotificationConfigurationBuilderSpec, should build complex configuration, pass
org.togglz.slack.notification.MarkdownSpec, should format text[0], pass
org.togglz.slack.notification.MarkdownSpec, should format text[1], pass
org.togglz.slack.notification.MarkdownSpec, should format text[2], pass
org.togglz.slack.notification.MarkdownSpec, should format text[3], pass
org.togglz.slack.notification.MarkdownSpec, should format text[4], pass
org.togglz.slack.notification.MarkdownSpec, cannot format empty text[0], pass
org.togglz.slack.notification.MarkdownSpec, cannot format empty text[1], pass
org.togglz.slack.notification.MarkdownSpec, cannot format empty text[2], pass
org.togglz.slack.notification.MarkdownSpec, should format link from 'null' and 'null', pass
org.togglz.slack.notification.MarkdownSpec, should format link from 'http' and 'abc', pass
org.togglz.slack.notification.MarkdownSpec, should format link from '#Error:url' and empty 'null', pass
org.togglz.slack.notification.MarkdownSpec, should format link from '#Error:url' and empty '', pass
org.togglz.slack.notification.MarkdownSpec, should format link from '#Error:url' and empty ' ', pass
org.togglz.slack.notification.MarkdownSpec, cannot format link from empty 'null' and '#Error:name', pass
org.togglz.slack.notification.MarkdownSpec, cannot format link from empty '' and '#Error:name', pass
org.togglz.slack.notification.MarkdownSpec, cannot format link from empty ' ' and '#Error:name', pass
org.togglz.slack.notification.NotificationComposerSpec, should compose notification according to #Error:appIcon and #Error:channel, pass
org.togglz.slack.notification.NotificationComposerSpec, should compose notification according to #Error:appIcon and #Error:channel, pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for enabled (minimum configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for disabled (minimum configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for enabled (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for disabled (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for full name (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for system user (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for null user (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for empty user (custom configuration), pass
org.togglz.slack.notification.NotificationComposerSpec, should compose message according to the template for labeling (custom configuration), pass
org.togglz.slack.SlackNotificationsSpec, should send 0 notification to [], pass
org.togglz.slack.SlackNotificationsSpec, should send 1 notification to [developers], pass
org.togglz.slack.SlackNotificationsSpec, should send 2 notification to [developers, qa-engineers], pass
org.togglz.slack.SlackStateRepositorySpec, should read state from wrapped, pass
org.togglz.slack.SlackStateRepositorySpec, should write state to wrapped and send notification, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testGetId, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testGetName, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testIsActiveThrowsWhenNoApplicationContext, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testGetParameters, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testIsActiveWithParam, pass
org.togglz.spring.activation.SpringEnvironmentPropertyActivationStrategyTest, testIsActiveWithNoParam, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testGetId, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testGetName, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testGetTokenParameterName, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testGetTokenParameterTransformer, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testIsActiveThrowsWhenNoApplicationContext, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testGetParameters, pass
org.togglz.spring.activation.SpringProfileActivationStrategyTest, testIsActive, pass
org.togglz.spring.listener.TogglzApplicationContextBinderApplicationListenerTest, contextClosed, pass
org.togglz.spring.listener.TogglzApplicationContextBinderApplicationListenerTest, contextRefreshedWhileContextAlreadyBound, pass
org.togglz.spring.listener.TogglzApplicationContextBinderApplicationListenerTest, contextRefreshedIgnored, pass
org.togglz.spring.listener.TogglzApplicationContextBinderApplicationListenerTest, contextRefreshed, pass
org.togglz.spring.repository.ApplicationEventPublisherRepositoryTest, testSaveFeatureStatePublishesEvent, pass
org.togglz.guice.GuiceIntegrationTest, testGuiceIntegration, pass
org.togglz.spring.boot.actuate.autoconfigure.TogglzManagementContextConfigurationTest, customConsolePath, pass
org.togglz.spring.boot.actuate.autoconfigure.TogglzManagementContextConfigurationTest, consoleWithCustomManagementContextPath, pass
org.togglz.spring.boot.actuate.autoconfigure.TogglzManagementContextConfigurationTest, customConsolePathWithTrailingSlash, pass
org.togglz.spring.boot.actuate.thymeleaf.TogglzDialectTest, shouldContainThreeProcessors, pass
org.togglz.spring.boot.actuate.thymeleaf.TogglzDialectTest, shouldContainFeatureActiveProcessor, pass
org.togglz.spring.boot.actuate.thymeleaf.TogglzDialectTest, shouldContainFeatureInActiveProcessor, pass
org.togglz.spring.boot.actuate.thymeleaf.TogglzDialectTest, shouldContainStandardXmlNsTagProcessor, pass
org.togglz.spring.boot.actuate.TogglzEndpointTest, shouldDisableAFeature, pass
org.togglz.spring.boot.actuate.TogglzEndpointTest, endpointDisabled, pass
org.togglz.spring.boot.actuate.TogglzEndpointTest, getAllFeatures, pass
org.togglz.spring.boot.actuate.TogglzEndpointTest, shouldThrowAnIllegalArgumentExceptionIfTheFeatureDoesNotExist, pass
org.togglz.spring.boot.actuate.TogglzEndpointTest, shouldEnableAFeature, pass
org.togglz.spring.boot.legacy.actuate.autoconfigure.TogglzEndpointAutoConfigurationTest, defaultTogglzEndpoint, pass
org.togglz.spring.boot.legacy.actuate.autoconfigure.TogglzManagementContextConfigurationTest, customConsolePath, pass
org.togglz.spring.boot.legacy.actuate.autoconfigure.TogglzManagementContextConfigurationTest, consoleWithCustomManagementContextPath, pass
org.togglz.spring.boot.legacy.actuate.autoconfigure.TogglzManagementContextConfigurationTest, customConsolePathWithTrailingSlash, pass
org.togglz.spring.boot.legacy.actuate.TogglzEndpointTest, customEndpointId, pass
org.togglz.spring.boot.legacy.actuate.TogglzEndpointTest, invoke, pass
org.togglz.spring.boot.legacy.actuate.TogglzEndpointTest, endpointNotSensitive, pass
org.togglz.spring.boot.legacy.actuate.TogglzEndpointTest, endpointDisabled, pass
org.togglz.spring.test.container.ManagedFeatureManagerTest, containerManagedFeatureManagerShouldBeUsedIfAvailable, pass
org.togglz.spring.test.proxy.FeatureProxyTest, testProxyWithManuallySetProxyType, pass
org.togglz.spring.test.proxy.FeatureProxyTest, testProxyWithAutoDetectedProxyType, pass
org.togglz.spring.test.SpringBasicOperationTest, testSpringBasicFeatures, pass
org.togglz.spring.test.SpringEarlyFeatureUsageTest, testEarlyFeatureUsage, pass
org.togglz.spring.web.FeatureInterceptorTest, enumFrom, pass
org.togglz.spring.web.FeatureInterceptorTest, handlerAnnotation_OnMethod, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_methodFeatureNoEnum_InvalidEnum, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_ClassFeature_Inactive, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_noAnnotations, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_MethodFeature_Inactive, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_MethodFeatureTwo_Inactive, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_MethodFeatureTwo_AllActive, pass
org.togglz.spring.web.FeatureInterceptorTest, handlerAnnotation_OnType, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_MethodFeature_Active, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_MethodFeatureTwo_OnlyOneActive, pass
org.togglz.spring.web.FeatureInterceptorTest, preHandle_ClassFeature_Active, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testGetId, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testGetName, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testGetTokenParameterName, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testGetTokenParameterTransformer, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testGetParameters, pass
org.togglz.deltaspike.activation.DeltaSpikeProjectStageActivationStrategyTest, testIsActive, pass
org.togglz.deltaspike.activation.DeltaSpikePropertyActivationStrategyTest, testGetId, pass
org.togglz.deltaspike.activation.DeltaSpikePropertyActivationStrategyTest, testGetName, pass
org.togglz.deltaspike.activation.DeltaSpikePropertyActivationStrategyTest, testGetParameters, pass
org.togglz.deltaspike.activation.DeltaSpikePropertyActivationStrategyTest, testIsActiveWithParam, pass
org.togglz.deltaspike.activation.DeltaSpikePropertyActivationStrategyTest, testIsActiveWithNoParam, pass
org.togglz.jsp.JspTaglibTest, shouldIncludeOrExcludeBodyCorrectlyInverseCondition, pass
org.togglz.jsp.JspTaglibTest, shouldIncludeOrExcludeBodyCorrectly, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, shouldReadFalseStateWithoutStrategyAndParameters, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, withStrategyNoParameters, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, shouldReadTrueStateWithoutStrategyAndParameters, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, shouldReturnNullWhenStateDoesntExist, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, setState, pass
org.togglz.archaius.repository.ArchaiusStateRepositoryTest, withStrategyParameters, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest, testFeatureManagerParameter{TestFeatureManager}, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$DisabledChildTest, testFeatureManagerParameter{TestFeatureManager}, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$EnabledChildTest, testFeatureManagerParameter{TestFeatureManager}, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest, allEnabled, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$AllEnabledClassTest, allEnabled, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest, allDisabled, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$AllDisabledClassTest, allDisabled, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$DisabledChildTest, methodInParentClass, pass
org.togglz.junit5.AnnotationBasedTogglzExtensionTest$EnabledChildTest, methodInParentClass, pass
org.togglz.junit5.FeatureVariationTogglzExtensionTest, variations[1], pass
org.togglz.junit5.FeatureVariationTogglzExtensionTest, variations[2], pass
org.togglz.shiro.test.ShiroUsersTest, testShiroWithCorrectUser, pass
org.togglz.shiro.test.ShiroUsersTest, testShiroLoginAsFeatureAdmin, pass
org.togglz.shiro.test.ShiroUsersTest, testShiroWithSomeOtherUser, pass
org.togglz.shiro.test.ShiroUsersTest, testShiroAsAnonymousUser, pass
org.togglz.shiro.test.ShiroUsersTest, testShiroLoginAsNormalUser, pass
org.togglz.microprofile.activation.MicroProfileConfigActivationStrategyTest, testGetId, pass
org.togglz.microprofile.activation.MicroProfileConfigActivationStrategyTest, testGetName, pass
org.togglz.microprofile.activation.MicroProfileConfigActivationStrategyTest, testGetParameters, pass
org.togglz.microprofile.activation.MicroProfileConfigActivationStrategyTest, testIsActiveWithParam, pass
org.togglz.microprofile.activation.MicroProfileConfigActivationStrategyTest, testIsActiveWithNoParam, pass
org.togglz.spring.mobile.DeviceActivationStrategyTest, shouldBeActiveForDesktop, pass
org.togglz.spring.mobile.DeviceActivationStrategyTest, shouldBeActiveForMobile, pass
org.togglz.spring.mobile.DeviceActivationStrategyTest, shouldBeActiveForTablet, pass
org.togglz.spring.mobile.DeviceActivationStrategyTest, shouldBeAccurateForLowerCaseParams, pass
org.togglz.spring.mobile.DeviceActivationStrategyTest, shouldBeInactiveForEmptyParams, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnTrueWhenMatchesServerCurrentVersion, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnFalseForNullVersion, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnTrueWhenAtLeastOneOfTheVersionsMatchServerCurrentVersion, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnFalseWhenNoneOfTheVersionsMatchTheServerCurrentVersion, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnFalseForEmptyVersion, pass
org.togglz.appengine.activation.ApplicationVersionActivationStrategyTest, shouldReturnFalseWhenCurrentVersionCannotBeResolved, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, shouldNotAddNewEntityGroupToCurrentCrossGroupTransaction, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, testShouldReadStateWithStrategyAndParameters, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, shouldWorkInsideRunningTransaction, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, testShouldSaveStateStrategyAndParameters, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, shouldReturnNullWhenStateDoesntExist, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, customKindName, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, shouldNotStartNewTransaction, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, testShouldSaveStateWithoutStrategyOrParameters, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, testShouldReadStateWithoutStrategyAndParameters, pass
org.togglz.appengine.repository.DatastoreStateRepositoryTest, testShouldUpdateExistingDatabaseEntry, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, getFeatureStateShouldRunWithinGivenNamespaceWhenCurrentNamespaceIsNotDefault, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, shouldNotAcceptNullDecorated, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, setFeatureStateShouldRunWithinGivenNamespaceWhenCurrentNamespaceIsNotDefault, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, getFeatureStateShouldRunWithinGivenNamespace, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, setFeatureStateShouldRunWithinGivenNamespace, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, shouldNotAcceptNullNamespace, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, shouldFallbackToOriginalNamespace, pass
org.togglz.appengine.repository.FixedNamespaceStateRepositoryTest, shouldAcceptEmptyNamespace, pass
org.togglz.appengine.repository.MemcacheStateRepositoryTest, testCachingOfReadOperationsWithTimeToLife, pass
org.togglz.appengine.repository.MemcacheStateRepositoryTest, testCacheExpiryBecauseOfTimeToLife, pass
org.togglz.appengine.repository.MemcacheStateRepositoryTest, testNullCaching, pass
org.togglz.appengine.repository.MemcacheStateRepositoryTest, testStateModifyExpiresCache, pass
org.togglz.appengine.user.UserServiceUserProviderTest, userIsNotLoggedIn, pass
org.togglz.appengine.user.UserServiceUserProviderTest, userIsLoggedInAsAdmin, pass
org.togglz.appengine.user.UserServiceUserProviderTest, userIsLoggedIn, pass
org.togglz.cassandra.CassandraStateRepositoryTest, testActivationStrategySavingAndLoading, pass
org.togglz.cassandra.CassandraStateRepositoryTest, testFeatureSavingAndLoading, pass
org.togglz.cassandra.CassandraStateRepositoryTest, testEnabledStateSavingAndLoading, pass
org.togglz.cassandra.CassandraStateRepositoryTest, testRemovingOfActivationStrategy, pass
org.togglz.cassandra.CassandraStateRepositoryTest, testAutomaticCreationOfColumnFamily, pass
org.togglz.mongodb.MongoStateRepositoryTest, testInsertAndUpdate, pass
org.togglz.spring.security.SpringSecurityUserProviderTest, getCurrentUserWillReturnNormalUserWhenAuthoritiesDoNotContainFeatureAdminAuthority, pass
org.togglz.spring.security.SpringSecurityUserProviderTest, getCurrentUserWillCopyAuthoritiesFromAuthenticationIntoFeatureUser, pass
org.togglz.spring.security.SpringSecurityUserProviderTest, getCurrentUserWillReturnFeatureAdminWhenAuthoritiesContainFeatureAdminAuthority, pass
org.togglz.jsf.test.map.JSFMapTest, testJSFFeatureMap, pass
