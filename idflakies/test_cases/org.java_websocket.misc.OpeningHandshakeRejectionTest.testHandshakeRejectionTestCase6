@Test(timeout = 5000)
public void testHandshakeRejectionTestCase0() throws Exception {
  testHandshakeRejection( 0 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase1() throws Exception {
  testHandshakeRejection( 1 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase2() throws Exception {
  testHandshakeRejection( 2 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase3() throws Exception {
  testHandshakeRejection( 3 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase4() throws Exception {
  testHandshakeRejection( 4 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase5() throws Exception {
  testHandshakeRejection( 5 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase6() throws Exception {
  testHandshakeRejection( 6 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase7() throws Exception {
  testHandshakeRejection( 7 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase8() throws Exception {
  testHandshakeRejection( 8 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase9() throws Exception {
  testHandshakeRejection( 9 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase10() throws Exception {
  testHandshakeRejection( 10 );
}

@Test(timeout = 5000)
public void testHandshakeRejectionTestCase11() throws Exception {
  testHandshakeRejection( 11 );
}

private void testHandshakeRejection( int i ) throws Exception {
  final int finalI = i;
  final boolean[] threadReturned = { false };
  WebSocketClient webSocketClient = new WebSocketClient( new URI( "ws://localhost:"+ port + "/" + finalI ) ) {
    @Override
    public void onOpen( ServerHandshake handshakedata ) {
      fail( "There should not be a connection!" );
    }

    @Override
    public void onMessage( String message ) {
      fail( "There should not be a message!" );
    }

    @Override
    public void onClose( int code, String reason, boolean remote ) {
      if( finalI != 10 && finalI != 11 ) {
        if( code != CloseFrame.PROTOCOL_ERROR ) {
          fail( "There should be a protocol error!" );
        } else if( reason.startsWith( "Invalid status code received:" ) || reason.startsWith( "Invalid status line received:" ) ) {
          if( debugPrintouts )
            System.out.println( "Protocol error for test case: " + finalI );
          threadReturned[0] = true;
          counter++;
        } else {
          fail( "The reason should be included!" );
        }
      } else {
        //Since we do not include a correct Sec-WebSocket-Accept, onClose will be called with reason 'Draft refuses handshake'
        if( !reason.endsWith( "refuses handshake" ) ) {
          fail( "onClose should not be called!" );
        } else {
          if( debugPrintouts )
            System.out.println( "Refuses handshake error for test case: " + finalI );
          counter++;
          threadReturned[0] = true;
        }
      }
    }

    @Override
    public void onError( Exception ex ) {
      fail( "There should not be an exception" );
    }
  };
  Thread finalThread = new Thread( webSocketClient );
  finalThread.start();
  finalThread.join();

  if( !threadReturned[0] ) {
    fail( "Error" );
  }
}
