private void runTestScenarioReconnect( boolean closeBlocking ) throws Exception {
  final CountDownLatch countDownLatch0 = new CountDownLatch( 1 );
  final CountDownLatch countDownLatch1 = new CountDownLatch( 2 );
  WebSocketClient clt = new WebSocketClient( new URI( "ws://localhost:" + port ) ) {
    @Override
    public void onOpen( ServerHandshake handshakedata ) {
      countDownLatch1.countDown();
    }

    @Override
    public void onMessage( String message ) {

    }

    @Override
    public void onClose( int code, String reason, boolean remote ) {
      countDownLatch0.countDown();
    }

    @Override
    public void onError( Exception ex ) {
      ex.printStackTrace(  );
      assumeThat(true, is(false));
      System.out.println("There should be no exception!");
    }
  };
  clt.connectBlocking();
  if( closeBlocking ) {
    clt.closeBlocking();
  } else {
    clt.getSocket().close();
  }
  countDownLatch0.await();
  clt.reconnectBlocking();
  clt.closeBlocking();
}

@AfterClass
public static void successTests() throws InterruptedException, IOException {
  ws.stop();
}

@Parameterized.Parameters
public static Collection<Integer[]> data() {
  List<Integer[]> ret = new ArrayList<Integer[]>(NUMBER_OF_TESTS);
  for (int i = 0; i < NUMBER_OF_TESTS; i++) ret.add(new Integer[]{i});
  return ret;
}

@Test(timeout = 5000)
public void runReconnectSocketClose() throws Exception {
  runTestScenarioReconnect( false );
}

@Test(timeout = 5000)
public void runReconnectCloseBlocking() throws Exception {
  runTestScenarioReconnect( true );
}
