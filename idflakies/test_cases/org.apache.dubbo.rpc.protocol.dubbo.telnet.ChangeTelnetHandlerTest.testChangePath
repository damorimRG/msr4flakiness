@Test
public void testChangeSimpleName() throws RemotingException {
    DubboProtocol.getDubboProtocol().export(mockInvoker);
    String result = change.telnet(mockChannel, "DemoService");
    assertEquals("Used the DemoService as default.\r\nYou can cancel default service by command: cd /", result);
}

@Test
public void testChangeName() throws RemotingException {
    DubboProtocol.getDubboProtocol().export(mockInvoker);
    String result = change.telnet(mockChannel, "org.apache.dubbo.qos.legacy.service.DemoService");
    assertEquals("Used the org.apache.dubbo.qos.legacy.service.DemoService as default.\r\nYou can cancel default service by command: cd /",
            result);
}

@Test
public void testChangePath() throws RemotingException {
    DubboProtocol.getDubboProtocol().export(mockInvoker);
    String result = change.telnet(mockChannel, "demo");
    assertEquals("Used the demo as default.\r\nYou can cancel default service by command: cd /", result);
}

@Test
public void testChangeMessageNull() throws RemotingException {
    String result = change.telnet(mockChannel, null);
    assertEquals("Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService", result);
}

@Test
public void testChangeServiceNotExport() throws RemotingException {
    String result = change.telnet(mockChannel, "demo");
    assertEquals("No such service demo", result);
}

@Test
public void testChangeCancel() throws RemotingException {
    String result = change.telnet(mockChannel, "..");
    assertEquals("Cancelled default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
}

@Test
public void testChangeCancel2() throws RemotingException {
    String result = change.telnet(mockChannel, "/");
    assertEquals("Cancelled default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.", result);
}
